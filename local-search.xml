<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>青龙组-jocker</title>
    <link href="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/"/>
    <url>/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/</url>
    
    <content type="html"><![CDATA[<h1 id="buu-网鼎杯-2020-青龙组-jocker"><a href="#buu-网鼎杯-2020-青龙组-jocker" class="headerlink" title="buu [网鼎杯 2020 青龙组]jocker"></a>buu [网鼎杯 2020 青龙组]jocker</h1><p>本题的难点在于：第12行if语句中对加密函数encrypt的代码本体使用VirtualProtect函数进行了加密保护，再在第24，25行对encrypt函数代码与0x41异或进行解密还原，所以只有执行完for循环后才能得到真正的encrypt函数，因此需要动态调试在for循环结束后并且调用encrypt前的位置下断点，再f8步入真正的encrypt函数中，将真正的加密函数dump下来，感觉就是脱壳，但是这里的壳加在了关键函数上。</p><p>查看文件，无壳，32位，ida查看</p><p>main函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/1.png" alt="1"></p><p>读入输入的flag后复制到Destination中，再进行加密，加密函数encrypt无法查看。</p><p>这里的wrong函数和omg函数暂时不用看，真正的加密过程在encrypt中。</p><p>同时出现了堆栈不平衡的问题，堆栈平衡即正常函数在被调用完后会将栈指针（esp）和桢指针（ebp）还原到被调用前的状态，从而不影响调用它的函数的正常执行。（不仅如此，寄存器也会还原。一般会将调用前的寄存器压入栈，调用完再pop回去）</p><p>这里出现堆栈不平衡是因为在静态编译时encrypt函数还没有被解码还原，不是一个功能正常的函数，导致调用完encrypt后栈指针（esp）没有被还原，影响了调用它的函数正常执行，程序产生错误。只要动态调试，就会进行encrypt函数的还原后再调用encrypt函数，不会出现堆栈不平衡的问题，所以其实不用理会这个问题也能把题目做出来。（网上很多writeup说不解决这个问题无法f5看伪c代码，不知道为什么我可以直接f5不受影响，总之下面是解决方法。）</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/2.png" alt="2"></p><p> 在菜单中的option的general中勾选stack pointer查看函数调用过程中栈指针的变化进行验证</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/3.png" alt="3"></p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/4.png" alt="4"></p><p>可以看到call完encrypt函数后栈指针就乱了，没有被还原到0AC，所以这里手动帮encrypt函数还原栈指针,选中encrypt和finally函数的call指令，alt+k，将偏移修改为0</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/6.png" alt="6"></p><p>修改完后f5反汇编，伪c界面的堆栈不平衡警告就没了</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/5.png" alt="5"> <img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/7.png" alt="7"></p><p>下面设断点动态调试dump出encrypt函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/8.png" alt="8"></p><p>在ida中结合汇编和伪c判断40182B是for循环结束的位置，下面的call jocker.401500就是encrypt函数</p><p>f9到断点后f7步入函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/9.png" alt="9"></p><p>dump的oep是401500，用x32dbg的scylla插件dump后修复</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/10.png" alt="10"></p><p>输入oep后点击IAT Autosearch和Get Imports，再dump出jocker_dump.exe,再点击fix dump，选择jocker_dump.exe,修复文件得到修复完成的jocker_dump_SCY.exe,ida查看</p><p>下面是还原的encrypt函数</p><p>修复后的main函数，观察可知需要经过start函数和sub_40159A函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/11.png" alt="11"></p><p>start函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/12.png" alt="12"></p><p>sub_40159A函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/13.png" alt="13"></p><p>start函数可以逆向出flag的前19位，sub_40159A函数得到后5位</p><p>写脚本逆向</p><p>start</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span>  str[<span class="hljs-number">19</span>]=&#123;<span class="hljs-number">0xe</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x3E</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0xc</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0xd</span>&#125;;<br><span class="hljs-type">char</span>  key[]=&#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;?&#x27;</span>&#125;;<br>    <span class="hljs-type">char</span> flag[<span class="hljs-number">19</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">18</span>;i++)&#123;<br>flag[i]=str[i]^key[i];<br>cout&lt;&lt;flag[i];<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>得到flag前19位：flag{d07abccf8a410c</p><p>sub_40159A</p><p>看代码看不出是怎么加密的，但是flag最后一位肯定是}，加密后变为：，猜测加密方式和之前相同是逐位异或，}与71异或得到：，所以异或的数字是71</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span>  str[<span class="hljs-number">5</span>]=&#123;<span class="hljs-string">&#x27;%&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;:&#x27;</span>&#125;;<br> <span class="hljs-type">char</span> a;<br> <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">4</span>;i++)&#123;<br> a=str[i]^<span class="hljs-number">71</span>;<br> cout&lt;&lt;a;<br> &#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>flag后五位：b37a}</p><p>flag{d07abccf8a410cb37a}猜测正确</p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>buu</tag>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buu刮开有奖</title>
    <link href="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/"/>
    <url>/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/</url>
    
    <content type="html"><![CDATA[<h1 id="buu-刮开有奖"><a href="#buu-刮开有奖" class="headerlink" title="buu 刮开有奖"></a>buu 刮开有奖</h1><p>本题收获：1.有时候直接分析伪c代码的加密十分困难，跳过分析加密过程直接得到加密结果的方式有：动态调试、修复伪c代码成c代码直接运行</p><p>2.连续存储的数字或字符可以看作数组，指针和数组可以进行转换</p><p>查壳，无壳，32位文件，ida，直接进入主要函数DialogFunc</p><p><img src="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/DialogFunc2.png" alt="DialogFunc2"></p><p><img src="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/dialogfunc.png" alt="dialogfunc"></p><p>分析得加密主要有两部分：sub_4010F0和sub_401000</p><p>sub_4010F0加密v7开始的数组，这里分析具体过程很花时间，只要将伪c代码修改成c代码（仅需修改数组表现形式），将v7开始的一串数字定义成数组，直接运行得到加密结果即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_4010F0</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// edx</span><br><br>  result = a3;<br>  <span class="hljs-keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )<br>  &#123;<br>    v5 = <span class="hljs-number">4</span> * i;<span class="hljs-comment">//int类型站四字节，4*i可看作数组下标i</span><br>    v6 = *(_DWORD *)(<span class="hljs-number">4</span> * i + a1);<span class="hljs-comment">//诸如此类可看成a[i]</span><br>    <span class="hljs-keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )<br>    &#123;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v6 &gt; *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result) )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          ++i;<br>          *(_DWORD *)(v5 + a1) = *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result);<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">while</span> ( *(_DWORD *)(a1 + <span class="hljs-number">4</span> * i) &lt;= v6 )<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( ++i &gt;= result )<br>              <span class="hljs-keyword">goto</span> LABEL_13;<br>          &#125;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          v5 = <span class="hljs-number">4</span> * i;<br>          *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result) = *(_DWORD *)(<span class="hljs-number">4</span> * i + a1);<br>        &#125;<br>        --result;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( i &lt; result );<br>    &#125;<br>LABEL_13:<br>    *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result) = v6;<br>    sub_4010F0(a1, a2, i - <span class="hljs-number">1</span>);<br>    result = a3;<br>    ++i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改成c代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_AD10F0</span><span class="hljs-params">(<span class="hljs-type">char</span> *a1,<span class="hljs-type">char</span> a2,<span class="hljs-type">char</span> a3)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// edx</span><br><br>  result = a3;<br>  <span class="hljs-keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )<br>  &#123;<br>    v5 = i;<br>    v6 = a1[i];<br>    <span class="hljs-keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )<br>    &#123;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v6 &gt; a1[result] )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          ++i;<br>          a1[v5] = a1[result];<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">while</span> ( a1[i] &lt;= v6 )<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( ++i &gt;= result )<br>              <span class="hljs-keyword">goto</span> LABEL_13;<br>          &#125;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          v5 = i;<br>          a1[result] = a1[i];<br>        &#125;<br>        --result;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( i &lt; result );<br>    &#125;<br>LABEL_13:<br>    a1[result] = v6;<br>    sub_AD10F0(a1, a2, i - <span class="hljs-number">1</span>);<br>    result = a3;<br>    ++i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">char</span> str[<span class="hljs-number">11</span>]=&#123;<span class="hljs-number">90</span>,<span class="hljs-number">74</span>,<span class="hljs-number">83</span>,<span class="hljs-number">69</span>,<span class="hljs-number">67</span>,<span class="hljs-number">97</span>,<span class="hljs-number">78</span>,<span class="hljs-number">72</span>,<span class="hljs-number">51</span>,<span class="hljs-number">110</span>,<span class="hljs-number">103</span>&#125;;<br>sub_AD10F0(str,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,str[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>得到处理后的从v7[0]开始的字符串3CEHJNSZagn</p><p>接下来处理sub_401000</p><p><img src="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/sub_A01000.png" alt="sub_A01000"></p><p>查看byte_407830</p><p><img src="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/base64.png" alt="base64"></p><p>基本确定是base64加密</p><p>用脚本分别对ak1w和V1Ax解密，</p><p>ak1w对应base64加密输入字符串的第6，7，8位jMp</p><p>V1Ax对应base64加密输入字符串的第1，2，3位WP1</p><p>string[0]&#x3D;’3’+34&#x3D;85&#x3D;’U’<br>string[1]&#x3D;’J’</p><p>组合得到flag{UJWP1jMp}</p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>buu</tag>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>悠哉日常</title>
    <link href="/2022/06/24/%E6%82%A0%E5%93%89%E6%97%A5%E5%B8%B8/"/>
    <url>/2022/06/24/%E6%82%A0%E5%93%89%E6%97%A5%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
