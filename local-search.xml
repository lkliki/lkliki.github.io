<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux_shell命令</title>
    <link href="/2022/09/08/linux-shell%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/09/08/linux-shell%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="0-编译"><a href="#0-编译" class="headerlink" title="0.编译"></a>0.编译</h2><p>gcc Hello.c -o hello</p><p>g++  hello.cpp -0 hello</p><h2 id="1-打开终端命令行"><a href="#1-打开终端命令行" class="headerlink" title="1.打开终端命令行"></a>1.打开终端命令行</h2><p>方法一：右键-&gt;打开终端。<br>方法二：Ctrl+Alt+T</p><h2 id="2-常用快捷键"><a href="#2-常用快捷键" class="headerlink" title="2.常用快捷键"></a>2.常用快捷键</h2><h3 id="2-1-tab键"><a href="#2-1-tab键" class="headerlink" title="2.1 tab键"></a>2.1 tab键</h3><p>tab键是有两个功能，一个一次tab命令补齐，另一个两次tab提示内容，如果我们不记得一个命令的全拼，或者不记得某个路径的全拼，可以输入命令的前面几个字母，然后使用tab键自动补齐命令或查看提示信息。</p><h3 id="2-2-Ctrl-c组合键"><a href="#2-2-Ctrl-c组合键" class="headerlink" title="2.2 Ctrl+c组合键"></a>2.2 Ctrl+c组合键</h3><p>Ctrl+c中断，强行打断进程，如果终端命令行正在执行某个进程的程序，这时想要中断掉该进程就可以使用Ctrl+c。</p><h3 id="2-3-Ctrl-d组合键"><a href="#2-3-Ctrl-d组合键" class="headerlink" title="2.3 Ctrl+d组合键"></a>2.3 Ctrl+d组合键</h3><p>Ctrl+d退出，相当于exit和quit，比如用python命令进入python交互环境后，就可以用Ctrl+d退出python交互。</p><h3 id="2-4Ctrl-Shift-c组合键和Ctrl-Shift-v组合键"><a href="#2-4Ctrl-Shift-c组合键和Ctrl-Shift-v组合键" class="headerlink" title="2.4Ctrl+Shift+c组合键和Ctrl+Shift+v组合键"></a>2.4Ctrl+Shift+c组合键和Ctrl+Shift+v组合键</h3><p>在终端中复制粘贴时，先用鼠标选中需要复制的内容，然后用Ctrl+Shift+c进行复制，再用Ctrl+Shift+v进行粘贴。</p><h3 id="2-5图形界面和纯文本交互模式切换"><a href="#2-5图形界面和纯文本交互模式切换" class="headerlink" title="2.5图形界面和纯文本交互模式切换"></a>2.5图形界面和纯文本交互模式切换</h3><p>Ctrl+Alt+F1F6:纯文本交互模式登入tty1tty6终端机；<br>Ctrl+Alt+F7：切回图形界面。</p><h3 id="3-终端命令行中一些常用符号了解"><a href="#3-终端命令行中一些常用符号了解" class="headerlink" title="3.终端命令行中一些常用符号了解"></a>3.终端命令行中一些常用符号了解</h3><p>用户主目录：~<br>系统根目录：&#x2F;<br>一般用户提示符：$<br>root用户提示符：#</p><p>shell当前所在目录：.</p><h3 id="4-关机与重启命令"><a href="#4-关机与重启命令" class="headerlink" title="4.关机与重启命令"></a>4.关机与重启命令</h3><h4 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h4><p>sudo poweroff</p><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><p>sudo reboot</p><h3 id="5-目录与文件相关命令"><a href="#5-目录与文件相关命令" class="headerlink" title="5.目录与文件相关命令"></a>5.目录与文件相关命令</h3><h4 id="通配符的使用"><a href="#通配符的使用" class="headerlink" title="通配符的使用"></a>通配符的使用</h4><p>*代表任意个数个字符</p><p>?代表任意一个字符，至少一个</p><p>[]表示可以匹配字符组中的任意一个</p><p>[abc]匹配a、b、c中的任意一个</p><p>[a-f]匹配从a-f范围内的任意一个字符</p><h4 id="显示文件和目录列表"><a href="#显示文件和目录列表" class="headerlink" title="显示文件和目录列表"></a>显示文件和目录列表</h4><p>ls</p><h4 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h4><p>cd &lt;目标目录&gt;</p><p>cd  切换到当前用户的主目录（&#x2F;home&#x2F;用户目录)</p><p>cd ~  切换到当前用户的主目录（&#x2F;home&#x2F;用户目录)</p><p>cd .  保持在当前目录不变</p><p>cd ..  切换到上级目录</p><p>cd -  可以在最近两次工作目录之间来回切换</p><h4 id="显示当前所在工作目录"><a href="#显示当前所在工作目录" class="headerlink" title="显示当前所在工作目录"></a>显示当前所在工作目录</h4><p>pwd</p><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><p>touch &lt;文件名&gt;</p><p>创建文件或修改文件创建时间</p><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><p>cp &lt;源文件路径&gt; &lt;目标文件路径&gt;</p><h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p>mv &lt;源文件路径&gt; &lt;目标文件路径&gt;</p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>rm &lt;文件名&gt;</p><p>rm是从磁盘中删除，删除后无法恢复文件</p><p>-f  强制删除，忽略不存在的文件，无需提示  </p><p>-r  递归地删除目录下的内容，删除文件夹时必须加此参数</p><h4 id="显示文件内容"><a href="#显示文件内容" class="headerlink" title="显示文件内容"></a>显示文件内容</h4><p>cat &lt;文件名&gt;</p><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><p>mkdir &lt;文件夹名&gt;</p><h4 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h4><p>rmdir &lt;文件夹名&gt;</p><h3 id="6-文件权限"><a href="#6-文件权限" class="headerlink" title="6.文件权限"></a>6.文件权限</h3><h4 id="修改文件读写可执行权限-具体权限由掩码值决定，如777权限全开"><a href="#修改文件读写可执行权限-具体权限由掩码值决定，如777权限全开" class="headerlink" title="修改文件读写可执行权限,具体权限由掩码值决定，如777权限全开"></a>修改文件读写可执行权限,具体权限由掩码值决定，如777权限全开</h4><p>sudo chmod 777 &lt;文件名&gt;</p><h4 id="修改文件所有者"><a href="#修改文件所有者" class="headerlink" title="修改文件所有者"></a>修改文件所有者</h4><p>sudo chown &lt;用户名&gt;:&lt;组名&gt; &lt;文件名&gt;</p><h3 id="7-文件查找"><a href="#7-文件查找" class="headerlink" title="7.文件查找"></a>7.文件查找</h3><h4 id="7-1locate命令查找文件"><a href="#7-1locate命令查找文件" class="headerlink" title="7.1locate命令查找文件"></a>7.1locate命令查找文件</h4><p>sudo updatedb<br>locate &lt;待查找文件名&gt;</p><h4 id="7-2find命令查找文件"><a href="#7-2find命令查找文件" class="headerlink" title="7.2find命令查找文件"></a>7.2find命令查找文件</h4><p>find -name &lt;待查找文件名&gt;</p><h3 id="8-网络相关命令"><a href="#8-网络相关命令" class="headerlink" title="8.网络相关命令"></a>8.网络相关命令</h3><h4 id="网络连接与否测试"><a href="#网络连接与否测试" class="headerlink" title="网络连接与否测试"></a>网络连接与否测试</h4><p>ping &lt;待测目标主机IP或域名&gt;</p><h4 id="本地IP地址查看"><a href="#本地IP地址查看" class="headerlink" title="本地IP地址查看"></a>本地IP地址查看</h4><p>ifconfig</p><h4 id="远程登录到目标主机"><a href="#远程登录到目标主机" class="headerlink" title="远程登录到目标主机"></a>远程登录到目标主机</h4><p>ssh &lt;目标主机用户名&gt;@&lt;目标主机IP地址&gt;</p><h3 id="9-系统软件安装与软件运行方法"><a href="#9-系统软件安装与软件运行方法" class="headerlink" title="9.系统软件安装与软件运行方法"></a>9.系统软件安装与软件运行方法</h3><h4 id="9-1系统默认的软件安装方法apt-get"><a href="#9-1系统默认的软件安装方法apt-get" class="headerlink" title="9.1系统默认的软件安装方法apt-get"></a>9.1系统默认的软件安装方法apt-get</h4><p>sudo apt-get update<br>sudo apt-get install &lt;软件包名称&gt;</p><h4 id="9-2-source方法执行系统脚本，比如执行用户默认配置脚本-bashrc"><a href="#9-2-source方法执行系统脚本，比如执行用户默认配置脚本-bashrc" class="headerlink" title="9.2 source方法执行系统脚本，比如执行用户默认配置脚本.bashrc"></a>9.2 source方法执行系统脚本，比如执行用户默认配置脚本.bashrc</h4><p>source ~&#x2F;.bashrc</p><h4 id="9-3-x2F-方法执行一般可执行文件"><a href="#9-3-x2F-方法执行一般可执行文件" class="headerlink" title="9.3 .&#x2F;方法执行一般可执行文件"></a>9.3 .&#x2F;方法执行一般可执行文件</h4><p>.&#x2F;&lt;可执行文件&gt;</p><h3 id="10-文本编辑器vim使用"><a href="#10-文本编辑器vim使用" class="headerlink" title="10.文本编辑器vim使用"></a>10.文本编辑器vim使用</h3><h4 id="vim查看文件内容"><a href="#vim查看文件内容" class="headerlink" title="vim查看文件内容"></a>vim查看文件内容</h4><p>vim &lt;文件名&gt;</p><h4 id="vim进入编辑模式"><a href="#vim进入编辑模式" class="headerlink" title="vim进入编辑模式"></a>vim进入编辑模式</h4><p>在vim查看文件内容的界面中，按i键进入编辑模式，然后就可以编辑文件的内容了</p><h4 id="vim退出编辑模式"><a href="#vim退出编辑模式" class="headerlink" title="vim退出编辑模式"></a>vim退出编辑模式</h4><p>在vim编辑文件内容的界面中，按Esc键退出编辑模式，然后就又回到查看文件内容的界面了</p><h4 id="vim编辑内容保存"><a href="#vim编辑内容保存" class="headerlink" title="vim编辑内容保存"></a>vim编辑内容保存</h4><p>vim在编辑完文件内容，退出到查看文件内容的界面后，可以输入“:w”对编辑内容进行保存，也可以输入“:wq”对编辑内容进行保存并退出vim</p><h3 id="后续补充内容"><a href="#后续补充内容" class="headerlink" title="后续补充内容"></a>后续补充内容</h3><h5 id="1-ssh"><a href="#1-ssh" class="headerlink" title="1)ssh"></a>1)ssh</h5><p>ssh链接  ssh -p 端口号 用户名@地址 </p><p>例：</p><p>ssh 用户名：root 密码：123456 地址和端口为动态分配的。</p><p>靶机信息:node4.buuoj.cn:28508</p><p>链接代码：ssh -p 28508 <a href="mailto:&#114;&#111;&#111;&#x74;&#x40;&#110;&#x6f;&#x64;&#x65;&#52;&#46;&#98;&#x75;&#117;&#111;&#x6a;&#46;&#99;&#x6e;">&#114;&#111;&#111;&#x74;&#x40;&#110;&#x6f;&#x64;&#x65;&#52;&#46;&#98;&#x75;&#117;&#111;&#x6a;&#46;&#99;&#x6e;</a></p><h5 id="2）top"><a href="#2）top" class="headerlink" title="2）top"></a>2）top</h5><p>查看当前进程</p><h5 id="3）su"><a href="#3）su" class="headerlink" title="3）su"></a>3）su</h5><p>获取root权限</p><h5 id="4-sudo-command"><a href="#4-sudo-command" class="headerlink" title="4)sudo + command"></a>4)sudo + command</h5><p>以root权限执行命令</p><h5 id="5）passwd"><a href="#5）passwd" class="headerlink" title="5）passwd"></a>5）passwd</h5><p>修改当前权限下用户的密码</p><h5 id="6）adduser-username-sudo"><a href="#6）adduser-username-sudo" class="headerlink" title="6）adduser username sudo"></a>6）adduser username sudo</h5><p>将用户添加进超级用户组（root）</p><h5 id="7）whoami"><a href="#7）whoami" class="headerlink" title="7）whoami"></a>7）whoami</h5><p>显示当前用户名称</p><h5 id="8）poweroff"><a href="#8）poweroff" class="headerlink" title="8）poweroff"></a>8）poweroff</h5><p>关机</p><h5 id="9）管道符号"><a href="#9）管道符号" class="headerlink" title="9）管道符号 |"></a>9）管道符号 |</h5><p>这一符号的左右都是Shell命令, <code>A | B</code>的含义是创建两个进程<code>A</code>和<code>B</code>, 并将<code>A</code>进程的标准输出连接到<code>B</code>进程的标准输入</p><h5 id="10）find"><a href="#10）find" class="headerlink" title="10）find"></a>10）find</h5><p><code>find</code>是搜索目录中的文件</p><h5 id="11-grep"><a href="#11-grep" class="headerlink" title="11)grep"></a>11)grep</h5><p>对标准输入进行筛选后标准输出</p><h5 id="12-man"><a href="#12-man" class="headerlink" title="12)man"></a>12)man</h5><p>查看参数中命令的手册</p><h5 id="13）xargs"><a href="#13）xargs" class="headerlink" title="13）xargs"></a>13）xargs</h5><p>将标准输入转换为参数, 传送给第一个参数所指定的程序</p><h5 id="14-wc"><a href="#14-wc" class="headerlink" title="14) wc"></a>14) wc</h5><p>统计指定文件中的字节数、字数、行数，并将统计结果显示输出。该命令统计指定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。</p><p>wc同时也给出所指定文件的总统计数。</p><p>　-c　 统计字节数</p><p>　-l　  统计行数</p><p>　-m　 统计字符数。这个参数不能与 -c 参数一起使用</p><p>　-w　 统计字数。一个字被定义为空白、跳格或换行字符分隔的字符串</p><p>　-L　 打印最长行的长度</p><p>　-help 　 显示帮助信息</p><p>　-version 显示版本信息</p><h5 id="9），10），11），13）的一个例子"><a href="#9），10），11），13）的一个例子" class="headerlink" title="9），10），11），13）的一个例子"></a>9），10），11），13）的一个例子</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . | grep &#x27;\.c$\|\.h$&#x27; | xargs wc -l<br></code></pre></td></tr></table></figure><p>统计一个目录中(包含子目录)中的代码行数</p><h5 id="15-alias"><a href="#15-alias" class="headerlink" title="15)alias"></a>15)alias</h5><p>查看别名，启用别名</p><h5 id="16）echo"><a href="#16）echo" class="headerlink" title="16）echo"></a>16）echo</h5><p>1.用于字符串的输出，语法“echo [选项] [输出内容]”</p><p>如果输出内容中没有特殊含义，则原内容输出到屏幕；如果输出内容有特殊含义，则输出打印其含义。</p><ul><li><code>-e</code>：支持反斜线控制的字符转换</li><li><code>-n</code>：取消输出后行末的换行符号（内容输出后不换行）</li></ul><ol start="2"><li>echo的重定向</li></ol><p>  echo命令的重定向功能经常被用于清空文件内容（删除文件）时使用</p><p>（1）echo “content” &gt; filename<br>将content覆盖到filename文件当中去，filename文件当中之前的内容不复存在了，实际上是修改了原文件的内容。</p><p>（2）echo “content” &gt;&gt; filename<br>将content追加到filename文件后，对filename文件之前的内容不修改，只进行增添，也叫追加重定向。</p><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost my_shell]# touch test<br>[root@localhost my_shell]# cat test <br>[root@localhost my_shell]# ll<br>total 4<br>-rw-r--r-- 1 root root 175 Nov  6 17:46 del.sh<br>-rw-r--r-- 1 root root   0 Nov  7 23:33 test<br>[root@localhost my_shell]# echo &quot;123456&quot; &gt; test<br>[root@localhost my_shell]# cat test<br>123456<br>[root@localhost my_shell]# echo &quot;111111&quot; &gt; test<br>[root@localhost my_shell]# cat test<br>111111<br>[root@localhost my_shell]# echo &quot;123456&quot; &gt;&gt; test<br>[root@localhost my_shell]# cat test<br>111111<br>123456<br>[root@localhost my_shell]# <br></code></pre></td></tr></table></figure><h5 id="17）linux中的重定向"><a href="#17）linux中的重定向" class="headerlink" title="17）linux中的重定向"></a>17）linux中的重定向</h5><p><a href="https://blog.csdn.net/qq_16268979/article/details/112130317">https://blog.csdn.net/qq_16268979/article/details/112130317</a></p><h5 id="18-printf"><a href="#18-printf" class="headerlink" title="18) printf"></a>18) printf</h5><p><a href="https://www.runoob.com/linux/linux-shell-printf.html">https://www.runoob.com/linux/linux-shell-printf.html</a></p><h5 id="19-sort"><a href="#19-sort" class="headerlink" title="19)sort"></a>19)sort</h5><p>对标准输入进行排序后输出</p><p>其中的选项<code>-n</code>表示按照数值进行排序, 而<code>-r</code>则表示从大到小输出.</p><h5 id="20）du"><a href="#20）du" class="headerlink" title="20）du"></a>20）du</h5><p>磁盘分析工具</p><p>（英文全拼：disk usage）用于显示目录或文件的大小。</p><p>du 会显示指定的目录或文件所占用的磁盘空间。</p><h5 id="21）more"><a href="#21）more" class="headerlink" title="21）more"></a>21）more</h5><p>Linux more 命令类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能（与 vi 相似），使用中的说明文件，请按 h 。</p><p><a href="https://www.runoob.com/linux/linux-comm-more.html">https://www.runoob.com/linux/linux-comm-more.html</a></p><h5 id="22）less"><a href="#22）less" class="headerlink" title="22）less"></a>22）less</h5><p>less 与 more 类似，less 可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页。</p><p><a href="https://m.runoob.com/linux/linux-comm-less.html">https://m.runoob.com/linux/linux-comm-less.html</a></p><h5 id="23）tmux"><a href="#23）tmux" class="headerlink" title="23）tmux"></a>23）tmux</h5><p>tmux是一个 terminal multiplexer（终端复用器），它可以启动一系列终端会话。我们使用命令行时，打开一个终端窗口，会话开始，执行某些命令如fio ，dd，scp，关闭此终端窗口，会话结束，fio dd scp服务会话随之被关闭。有时我们希望我们运行的服务被保留，而不是关闭窗口再打开后，重新手动执行。tmux的主要用途就在于此。</p><p>它解绑了会话和终端窗口。关闭终端窗口再打开，会话并不终止，而是继续运行在执行。将会话与终端窗后彻底分离。</p><p><a href="https://blog.csdn.net/Guzarish/article/details/123391714%EF%BC%88%E8%BF%99%E4%B8%AA%E6%95%99%E7%A8%8B%E6%AF%94%E8%BE%83%E5%85%A8%EF%BC%89">https://blog.csdn.net/Guzarish/article/details/123391714（这个教程比较全）</a></p><h5 id="24-source"><a href="#24-source" class="headerlink" title="24)source"></a>24)source</h5><p>1、source命令是什么？<br>source命令也称为“点命令”，也就是一个点符号（.），是bash的内部命令。<br><strong>注意：该命令通常用命令“.”来替代</strong></p><p>2、source命令 功能（能干什么）？<br>source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。因为linux所有的操作都会变成文件的格式存在。</p><p><a href="https://www.cnblogs.com/amxiang/p/16378298.html">https://www.cnblogs.com/amxiang/p/16378298.html</a></p><h5 id="25-who"><a href="#25-who" class="headerlink" title="25)who"></a>25)who</h5><p>你的用户名和终端类型</p><h5 id="26-uname"><a href="#26-uname" class="headerlink" title="26)uname"></a>26)uname</h5><p>查看当前操作系统名称或版本号</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
      <tag>basic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>青龙组-jocker</title>
    <link href="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/"/>
    <url>/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/</url>
    
    <content type="html"><![CDATA[<h1 id="buu-网鼎杯-2020-青龙组-jocker"><a href="#buu-网鼎杯-2020-青龙组-jocker" class="headerlink" title="buu [网鼎杯 2020 青龙组]jocker"></a>buu [网鼎杯 2020 青龙组]jocker</h1><p>本题的难点在于：第12行if语句中对加密函数encrypt的代码本体使用VirtualProtect函数进行了加密保护，再在第24，25行对encrypt函数代码与0x41异或进行解密还原，所以只有执行完for循环后才能得到真正的encrypt函数，因此需要动态调试在for循环结束后并且调用encrypt前的位置下断点，再f8步入真正的encrypt函数中，将真正的加密函数dump下来，感觉就是脱壳，但是这里的壳加在了关键函数上。</p><p>查看文件，无壳，32位，ida查看</p><p>main函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/1.png" alt="1"></p><p>读入输入的flag后复制到Destination中，再进行加密，加密函数encrypt无法查看。</p><p>这里的wrong函数和omg函数暂时不用看，真正的加密过程在encrypt中。</p><p>同时出现了堆栈不平衡的问题，堆栈平衡即正常函数在被调用完后会将栈指针（esp）和桢指针（ebp）还原到被调用前的状态，从而不影响调用它的函数的正常执行。（不仅如此，寄存器也会还原。一般会将调用前的寄存器压入栈，调用完再pop回去）</p><p>这里出现堆栈不平衡是因为在静态编译时encrypt函数还没有被解码还原，不是一个功能正常的函数，导致调用完encrypt后栈指针（esp）没有被还原，影响了调用它的函数正常执行，程序产生错误。只要动态调试，就会进行encrypt函数的还原后再调用encrypt函数，不会出现堆栈不平衡的问题，所以其实不用理会这个问题也能把题目做出来。（网上很多writeup说不解决这个问题无法f5看伪c代码，不知道为什么我可以直接f5不受影响，总之下面是解决方法。）</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/2.png" alt="2"></p><p> 在菜单中的option的general中勾选stack pointer查看函数调用过程中栈指针的变化进行验证</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/3.png" alt="3"></p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/4.png" alt="4"></p><p>可以看到call完encrypt函数后栈指针就乱了，没有被还原到0AC，所以这里手动帮encrypt函数还原栈指针,选中encrypt和finally函数的call指令，alt+k，将偏移修改为0</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/6.png" alt="6"></p><p>修改完后f5反汇编，伪c界面的堆栈不平衡警告就没了</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/5.png" alt="5"> <img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/7.png" alt="7"></p><p>下面设断点动态调试dump出encrypt函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/8.png" alt="8"></p><p>在ida中结合汇编和伪c判断40182B是for循环结束的位置，下面的call jocker.401500就是encrypt函数</p><p>f9到断点后f7步入函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/9.png" alt="9"></p><p>dump的oep是401500，用x32dbg的scylla插件dump后修复</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/10.png" alt="10"></p><p>输入oep后点击IAT Autosearch和Get Imports，再dump出jocker_dump.exe,再点击fix dump，选择jocker_dump.exe,修复文件得到修复完成的jocker_dump_SCY.exe,ida查看</p><p>下面是还原的encrypt函数</p><p>修复后的main函数，观察可知需要经过start函数和sub_40159A函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/11.png" alt="11"></p><p>start函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/12.png" alt="12"></p><p>sub_40159A函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/13.png" alt="13"></p><p>start函数可以逆向出flag的前19位，sub_40159A函数得到后5位</p><p>写脚本逆向</p><p>start</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span>  str[<span class="hljs-number">19</span>]=&#123;<span class="hljs-number">0xe</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x3E</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0xc</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0xd</span>&#125;;<br><span class="hljs-type">char</span>  key[]=&#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;?&#x27;</span>&#125;;<br>    <span class="hljs-type">char</span> flag[<span class="hljs-number">19</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">18</span>;i++)&#123;<br>flag[i]=str[i]^key[i];<br>cout&lt;&lt;flag[i];<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>得到flag前19位：flag{d07abccf8a410c</p><p>sub_40159A</p><p>看代码看不出是怎么加密的，但是flag最后一位肯定是}，加密后变为：，猜测加密方式和之前相同是逐位异或，}与71异或得到：，所以异或的数字是71</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span>  str[<span class="hljs-number">5</span>]=&#123;<span class="hljs-string">&#x27;%&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;:&#x27;</span>&#125;;<br> <span class="hljs-type">char</span> a;<br> <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">4</span>;i++)&#123;<br> a=str[i]^<span class="hljs-number">71</span>;<br> cout&lt;&lt;a;<br> &#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>flag后五位：b37a}</p><p>flag{d07abccf8a410cb37a}猜测正确</p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>buu</tag>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buu刮开有奖</title>
    <link href="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/"/>
    <url>/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/</url>
    
    <content type="html"><![CDATA[<h1 id="buu-刮开有奖"><a href="#buu-刮开有奖" class="headerlink" title="buu 刮开有奖"></a>buu 刮开有奖</h1><p>本题收获：1.有时候直接分析伪c代码的加密十分困难，跳过分析加密过程直接得到加密结果的方式有：动态调试、修复伪c代码成c代码直接运行</p><p>2.连续存储的数字或字符可以看作数组，指针和数组可以进行转换</p><p>查壳，无壳，32位文件，ida，直接进入主要函数DialogFunc</p><p><img src="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/DialogFunc2.png" alt="DialogFunc2"></p><p><img src="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/dialogfunc.png" alt="dialogfunc"></p><p>分析得加密主要有两部分：sub_4010F0和sub_401000</p><p>sub_4010F0加密v7开始的数组，这里分析具体过程很花时间，只要将伪c代码修改成c代码（仅需修改数组表现形式），将v7开始的一串数字定义成数组，直接运行得到加密结果即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_4010F0</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// edx</span><br><br>  result = a3;<br>  <span class="hljs-keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )<br>  &#123;<br>    v5 = <span class="hljs-number">4</span> * i;<span class="hljs-comment">//int类型站四字节，4*i可看作数组下标i</span><br>    v6 = *(_DWORD *)(<span class="hljs-number">4</span> * i + a1);<span class="hljs-comment">//诸如此类可看成a[i]</span><br>    <span class="hljs-keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )<br>    &#123;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v6 &gt; *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result) )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          ++i;<br>          *(_DWORD *)(v5 + a1) = *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result);<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">while</span> ( *(_DWORD *)(a1 + <span class="hljs-number">4</span> * i) &lt;= v6 )<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( ++i &gt;= result )<br>              <span class="hljs-keyword">goto</span> LABEL_13;<br>          &#125;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          v5 = <span class="hljs-number">4</span> * i;<br>          *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result) = *(_DWORD *)(<span class="hljs-number">4</span> * i + a1);<br>        &#125;<br>        --result;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( i &lt; result );<br>    &#125;<br>LABEL_13:<br>    *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result) = v6;<br>    sub_4010F0(a1, a2, i - <span class="hljs-number">1</span>);<br>    result = a3;<br>    ++i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改成c代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_AD10F0</span><span class="hljs-params">(<span class="hljs-type">char</span> *a1,<span class="hljs-type">char</span> a2,<span class="hljs-type">char</span> a3)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// edx</span><br><br>  result = a3;<br>  <span class="hljs-keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )<br>  &#123;<br>    v5 = i;<br>    v6 = a1[i];<br>    <span class="hljs-keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )<br>    &#123;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v6 &gt; a1[result] )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          ++i;<br>          a1[v5] = a1[result];<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">while</span> ( a1[i] &lt;= v6 )<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( ++i &gt;= result )<br>              <span class="hljs-keyword">goto</span> LABEL_13;<br>          &#125;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          v5 = i;<br>          a1[result] = a1[i];<br>        &#125;<br>        --result;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( i &lt; result );<br>    &#125;<br>LABEL_13:<br>    a1[result] = v6;<br>    sub_AD10F0(a1, a2, i - <span class="hljs-number">1</span>);<br>    result = a3;<br>    ++i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">char</span> str[<span class="hljs-number">11</span>]=&#123;<span class="hljs-number">90</span>,<span class="hljs-number">74</span>,<span class="hljs-number">83</span>,<span class="hljs-number">69</span>,<span class="hljs-number">67</span>,<span class="hljs-number">97</span>,<span class="hljs-number">78</span>,<span class="hljs-number">72</span>,<span class="hljs-number">51</span>,<span class="hljs-number">110</span>,<span class="hljs-number">103</span>&#125;;<br>sub_AD10F0(str,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,str[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>得到处理后的从v7[0]开始的字符串3CEHJNSZagn</p><p>接下来处理sub_401000</p><p><img src="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/sub_A01000.png" alt="sub_A01000"></p><p>查看byte_407830</p><p><img src="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/base64.png" alt="base64"></p><p>基本确定是base64加密</p><p>用脚本分别对ak1w和V1Ax解密，</p><p>ak1w对应base64加密输入字符串的第6，7，8位jMp</p><p>V1Ax对应base64加密输入字符串的第1，2，3位WP1</p><p>string[0]&#x3D;’3’+34&#x3D;85&#x3D;’U’<br>string[1]&#x3D;’J’</p><p>组合得到flag{UJWP1jMp}</p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>buu</tag>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>悠哉日常</title>
    <link href="/2022/06/24/%E6%82%A0%E5%93%89%E6%97%A5%E5%B8%B8/"/>
    <url>/2022/06/24/%E6%82%A0%E5%93%89%E6%97%A5%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
